{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CodeLab Adapter ¶ Turn the world into your playground! 是什么？ ¶ CodeLab Adapter 是一个由 Python 构建的软件(构建在消息之上( Everything Is a Message ))， 致力于连接万物，无论是软件还是硬件，无论是 AI、开源硬件、现实世界的物体、还是虚拟世界的动画角色，接入 CodeLab Adapter，皆可彼此互动。 \"连接能力\" 和 \"可扩展性\" 是它的主要特色。 在 CodeLab Adapter 驱动的环境里，通过使用 Scratch 或 Python 编程，你可以与万物沟通: 你可以在朋友生日那天，在 Ta 进门的一刻，将手中的魔杖一挥，在空中划一个字母 L 的轨迹，瞬间，点亮房间里五彩的灯光。 具体请看下面两个演示案例： 在上方视频中, 我们做了一场魔法烟花秀: 请看视频左侧，当挥动手中的魔杖实施第一个魔法，时间被冻结，视频右侧烟花静止在空中；实施第二个魔法，将烟花\"解冻\"; 实施第三个魔法-- 百花齐放。 Adapter 负责将烟花(虚拟)与魔杖(实物)连接在一起，用户在一个 创作平台 中即可同时操控两者，演绎自己编写的故事。 上方第二个视频演示了如何构建一个 理解 你当前处境的 AI，当你正在阅读时，AI 将为你把灯打开；当你合上书，AI 将为你把灯关掉，让你沉浸在黑暗中思考。 Adapter 负责接入外部 AI 与现实空间内的智能灯具，辅助你在 创作平台 中通过编程控制他们。 下面请看案例集锦视频，更多的在 这里 。 能做什么？ ¶ CodeLab Adapter 的典型用途包括: 扩展 Scratch 的能力（ 比 Scratch Link 更强大 ） 为它接入 AI、IoT、开源硬件、始就玩起来实物、虚拟角色...使Scratch成为酷上加酷的 创作平台 Python 入门 Adapter 由 Python 构建，对 Scratch 的增强也是通过使用 Python 写的插件实现。因此，Python 入门者通过简单修改现成插件代码为己所用、或编写新的插件代码，即可快速上手玩起来 构建可编程空间 构建 Dynamic Table 扩展在线编程平台(Blockly 等)的能力 特性有哪些？ ¶ 开放 高度可扩展 插件(Extension) 和 节点(Node) 万物皆消息(EIM, Everything Is a Message) RESTful API 支持多门编程语言(34+) 将 Scratch 和 Python 视为一等公民","text_tokens":["¶","a","虚拟世界","主要","内","沟通","秀","消息","为","加酷","百花","更","之上","、","外部","所用","还是","灯具","玩起来","可编","具体","让","多","虚拟","？","简单","语言","智能","正在","dynamic","快速","多门","两个","手","第三个","新",":","演示","打开","构建","由","is","(","可扩展性","能力","scratch",",","两者","强大","皆","实施","演绎","负责","支持","平台","空中","做","致力","如何","比","成为","互动","进门","五彩","你","eim","同时","接入","无论","典型","代码","动画","点亮","即可","有","是","能","彼此","一场","的","开源","魔法","restful","实物","关掉","因此","使用","物体","codelab","致力于","理解","在","使","它","可","里","；","时",")","特色","编程","your","!","二个","连接","扩展性"," ","（","我们","百花齐放","这里","34","一起","增强","角色","...","python","将","）","对","一挥","三个","link","魔杖","可以","时间","table","包括","烟花","。","可编程","齐放","那天","故事","哪些","黑暗","酷上","处境","集锦","房间","硬件","被","world","everything","与","轨迹","案例","当前","特性","l","辅助","开放","沉浸","左侧","当","创作","一个","展性","解冻","看","世界","冻结","他们","也","上","节点","右侧","请",";","adapter","现成","一刻","视频","-","修改","灯","为己","扩展","或","第一","在线","划","软件","驱动","阅读","the","ai","\"","playground","空间","通过","，","万物","ta","编写","和","+","一等","控制","上书","挥动","中","思考","第一个","现实","始","message","上方","操控","字母","把","什么","：","自己","下面","环境","iot","into","api","了","起来","第二","入门","第三","extension","等","第二个","就","静止","玩起","blockly","高度","瞬间","灯光","turn","无论是","公民","插件","朋友","node","编程语言","用户","视为","实现","合","手中","生日","用途","入门者","写"],"title":"主页(Home)","title_tokens":[")","home","主页","("]},{"location":"#codelab-adapter","text":"Turn the world into your playground!","text_tokens":[" ","world","into","your","the","turn","!","playground"],"title":"CodeLab Adapter","title_tokens":[" ","codelab","adapter"]},{"location":"#_1","text":"CodeLab Adapter 是一个由 Python 构建的软件(构建在消息之上( Everything Is a Message ))， 致力于连接万物，无论是软件还是硬件，无论是 AI、开源硬件、现实世界的物体、还是虚拟世界的动画角色，接入 CodeLab Adapter，皆可彼此互动。 \"连接能力\" 和 \"可扩展性\" 是它的主要特色。 在 CodeLab Adapter 驱动的环境里，通过使用 Scratch 或 Python 编程，你可以与万物沟通: 你可以在朋友生日那天，在 Ta 进门的一刻，将手中的魔杖一挥，在空中划一个字母 L 的轨迹，瞬间，点亮房间里五彩的灯光。 具体请看下面两个演示案例： 在上方视频中, 我们做了一场魔法烟花秀: 请看视频左侧，当挥动手中的魔杖实施第一个魔法，时间被冻结，视频右侧烟花静止在空中；实施第二个魔法，将烟花\"解冻\"; 实施第三个魔法-- 百花齐放。 Adapter 负责将烟花(虚拟)与魔杖(实物)连接在一起，用户在一个 创作平台 中即可同时操控两者，演绎自己编写的故事。 上方第二个视频演示了如何构建一个 理解 你当前处境的 AI，当你正在阅读时，AI 将为你把灯打开；当你合上书，AI 将为你把灯关掉，让你沉浸在黑暗中思考。 Adapter 负责接入外部 AI 与现实空间内的智能灯具，辅助你在 创作平台 中通过编程控制他们。 下面请看案例集锦视频，更多的在 这里 。","text_tokens":["a","虚拟世界","主要","内","沟通","秀","消息","为","百花","更","之上","、","外部","还是","灯具","具体","让","多","虚拟","智能","正在","两个","第三个",":","演示","打开","构建","由","is","(","可扩展性","能力","scratch",",","两者","皆","实施","演绎","负责","平台","空中","做","致力","如何","互动","进门","五彩","你","同时","接入","无论","动画","点亮","即可","是","彼此","一场","的","开源","魔法","实物","关掉","使用","物体","codelab","致力于","理解","在","它","可","里","；","时",")","特色","编程","二个","连接","扩展性"," ","我们","百花齐放","这里","一起","角色","python","将","一挥","三个","魔杖","可以","时间","烟花","。","齐放","那天","故事","黑暗","处境","集锦","房间","硬件","被","everything","与","轨迹","案例","当前","l","辅助","沉浸","左侧","当","创作","一个","展性","解冻","看","世界","冻结","他们","右侧","请",";","adapter","一刻","视频","-","灯","扩展","或","第一","划","软件","驱动","阅读","空间","ai","\"","通过","，","万物","ta","编写","和","控制","上书","挥动","中","思考","第一个","现实","message","上方","操控","字母","把","：","自己","下面","环境","了","第二","第三","第二个","静止","瞬间","灯光","无论是","朋友","用户","合","手中","生日"],"title":"是什么？","title_tokens":["是","什么","？"]},{"location":"#_2","text":"CodeLab Adapter 的典型用途包括: 扩展 Scratch 的能力（ 比 Scratch Link 更强大 ） 为它接入 AI、IoT、开源硬件、始就玩起来实物、虚拟角色...使Scratch成为酷上加酷的 创作平台 Python 入门 Adapter 由 Python 构建，对 Scratch 的增强也是通过使用 Python 写的插件实现。因此，Python 入门者通过简单修改现成插件代码为己所用、或编写新的插件代码，即可快速上手玩起来 构建可编程空间 构建 Dynamic Table 扩展在线编程平台(Blockly 等)的能力","text_tokens":["为","加酷","更","、","所用","玩起来","可编","虚拟","简单","dynamic","快速","手","新",":","构建","由","强大","(","scratch","能力","平台","比","成为","接入","典型","代码","即可","是","的","开源","实物","因此","使用","codelab","使","它",")","编程"," ","（","增强","角色","...","python","对","）","link","table","包括","。","可编程","酷上","硬件","创作","也","上","adapter","现成","修改","为己","扩展","或","在线","空间","ai","通过","，","编写","始","iot","起来","入门","等","就","玩起","blockly","插件","实现","用途","入门者","写"],"title":"能做什么？","title_tokens":["能","？","做","什么"]},{"location":"#_3","text":"开放 高度可扩展 插件(Extension) 和 节点(Node) 万物皆消息(EIM, Everything Is a Message) RESTful API 支持多门编程语言(34+) 将 Scratch 和 Python 视为一等公民","text_tokens":["eim","和","a","+","消息","一等","message","restful","everything","语言","api","开放","多门","extension","高度","节点","可","is","(",",",")","scratch","编程","皆","公民"," ","插件","node","支持","编程语言","视为","扩展","34","将","python","万物"],"title":"特性有哪些？","title_tokens":["有","？","特性","哪些"]},{"location":"changelog/","text":"changelog ¶ 2018.5.26 v0.1.0 2018.5.28 v0.1.1 fix extension_cozmo bug 2018.10.24 v0.2.0， 重构笔记 2018.11.30 v0.2.3 2018.12.03 0.3.0 支持eim_script 2018.12.14 0.3.1 fix bug：多个 ws 通道重复 pub；直接展示插件 2019.01.16 0.4.0 支持第三方网站接入 增加插件 完善插件的管理，退出后自动清理子进程 第三方库支持 requests pyserial Pillow 2019.01.29 0.5.0 修复 read 阻塞问题（导致需要额外的一条消息才能推出插件） 支持前端启停插件 将消息用作内部管理机制 rename scratch3-adapter to codelab-adapter 添加树莓派插件（gpiozero） 支撑多个 client 并行作为 UI（同步） 2019.01.30 0.5.1 添加调试（Debug）页面 2019.02.14 0.6.0 添加 REST API 统一消息体命名规范：message.data/message.message -> message.payload 添加 打开本地文件目录 功能 内置微信插件（extension_wechat） 添加 typing 库 完善 cli mode 2019.02.14 0.6.1 提高微信插件（extension_wechat）的易用性（内置） 2019.02.15 0.6.2 fix bug 2019.02.16 0.7.0 允许跨域访问 websocket/REST API, 方便开发者调试 为 webdebug 添加 REST API 调试工具 2019.02.23 0.7.1 让 Cozmo/Vector 插件支持同步模式（通过添加 messageID），至于采用同步模式还是异步模式，由 client 决定 添加 extension_mpfshell 扩展（by junhuanchen ） 2019.02.26 0.8.0 允许用户添加自定义配置： ~/codelab_adapter/user_settings.py 典型的配置包括： cli_load_extension_threads = [\"extension_iot\"] 命令行模式（./codelab-adapter --mode cli）默认启动插件 add gpiozero for raspberrypi platform 内置 mqtt client/broker： hbmqtt 内置 extension_iot 更新 extension_mpfshell 2019.03.16 0.8.1 微信插件支持收发群消息 添加 web 日志页面 添加重构之后的 blender 插件 2019.08.28 2.3.1 2019.09.10 2.5.0 安全性改进 2019.09.23 2.5.1 使用 Scratch 配色风格的 Web UI 版本号更新提醒（只提醒旧版本，不提醒测试版升级） 报告 adapter core 信息（version） 2019.09.23 2.5.3 将 GUI menu 迁移到 Web UI 2019.11.13 2.6.0 2.6.x 专注于提高健壮性 添加 rate limit 机制：TokenBucket 为 usb_microbit 添加 TokenBucket 提升 token 安全性（每次启动随机生成；也允许用户在配置文件里固化token） 添加 token 复制按钮（用于粘贴到外部网站） 将 token 添加到 scratch 启动 url 里（提高安全性） 2019.11.13 2.6.1 Scratch3Lab -> CodeLabClub 2019.11.13 2.6.2 支持 headless 模式（linux），用于开机自启、无人值守的环境 2020.04.17 3.0.0 发行说明 2020.04.30 3.1.0 自动更新 adapter home 目录 插件市场支持extension/node下载(统称为plugin)，node可以是任何有效的url链接 Cozmo 插件支持 event、sensor Adapter 默认随最后一个client关闭而关闭，允许用户配置该行为 重构 WebUI 的 Adatper socketio client，使其易于二次开发 2020.12.28 4.0.0 提供 Linda 支持！ 支持激光雷达，将普通地面变为交互式 Scratch 舞台（社区版暂未提供相关支持，目前近提供给CodeLab合作方） 与CodeLab IP访问方式兼容 修复与 token 有关的安全风险 webui, 基于最新codelab_adapter_base.js 解决websocket input token潜在风险 2021.12.31 4.1.0 修复目录字符问题（空格、中文） WebUI 支持 Linda 可视化 修复4.0.0引起的魔杖问题","text_tokens":["消息","重构","自启","可视","还是","2019.03","页面","tokenbucket","配置文件","树莓","webui","健壮性","[","后","pillow","增加","发行","由","同步","市场","有关","scratch","普通","开机","潜在","给","_","for","笔记","支撑","mpfshell","eim","gui","1","linux","只","3","直接","命令行","调试","文件","15","core","随","to","13","一条","pyserial","跨域","2021.12","settings","里","生成","28","未","typing","最后","mode","将","更新","版暂","headless","空格","体","plugin","websocket","payload","event","作为","本地","2018.10","messageid","-","blender","2018.5","js","社区","启动","完善","load","bug","\"","问题","2019.09","阻塞","]","其","ip","iot","风格","extension","2.3","提升","目录","=","url","方便","4.0","client","提高","地面","每次","解决","外部","开发","v0.1","目前","机制","0.8","方式","gpiozero","二次","展示","0.6","打开","17","随机","3.0","03","变为","scratch3lab","rate","前端","合作方","内部","升级","旧版本","于","模式","库","有效","配置","规范","codelabclub","易于","sensor","而",">","在","推出","需要"," ","之后","user","2.5","提醒","junhuanchen","魔杖","激光雷达","安全性","add","旧版","自定义","script","管理机制","by","web","开发者","23","合作","相关","任何","配色","额外","message","24","下载","：","pub","环境","api","重复","交互式","插件","node","用户","30","¶","changelog","让","version","input","引起","关闭","cozmo","默认","requests","收发","！","(",",","usb","版本号","debug","2019.11","接入","cli","是","的","最新","0.5","允许","2.6","中文","并行","codelab","测试版","可视化","派",")","2018.11","雷达","报告","/","三方","说明","mqtt","可以","启停","包括","ws","命名","群","与","粘贴","一个","至于","用于","4.1","adapter","menu","信息","31","2","自动更新","扩展","专注","近","0","scratch3","内置","通过","改进","第三方","工具","~","决定","2019.02","进程","版本","limit","修复","行为","二次开发","固化","第三","按钮","webdebug","2019.01","无人","复制","2019.08","使","功能","文件目录","platform","为","、","不","易用性","26","14","2020.12","日志","到","hbmqtt","字符","16","支持","基于","0.4","10","统一","健壮","采用","典型","值守","threads","vector","兼容","2020.04",".","使用","迁移","微信","；","0.3","socketio","rest","（","统称","管理","）","风险","fix","linda","py","read","该","安全","x","添加","多个","也","舞台","用作","通道","自动","3.1","broker","base","0.7","清理","才能","rename","，","自定","定义","2018.12","raspberrypi","测试","adatper","v0.2","交互","退出","wechat","token","链接","导致","ui","data","访问","易用","异步","29","网站","子","microbit","提供","home","命令","激光"],"title":"历史(changelog)","title_tokens":[")","changelog","(","历史"]},{"location":"changelog/#changelog","text":"2018.5.26 v0.1.0 2018.5.28 v0.1.1 fix extension_cozmo bug 2018.10.24 v0.2.0， 重构笔记 2018.11.30 v0.2.3 2018.12.03 0.3.0 支持eim_script 2018.12.14 0.3.1 fix bug：多个 ws 通道重复 pub；直接展示插件 2019.01.16 0.4.0 支持第三方网站接入 增加插件 完善插件的管理，退出后自动清理子进程 第三方库支持 requests pyserial Pillow 2019.01.29 0.5.0 修复 read 阻塞问题（导致需要额外的一条消息才能推出插件） 支持前端启停插件 将消息用作内部管理机制 rename scratch3-adapter to codelab-adapter 添加树莓派插件（gpiozero） 支撑多个 client 并行作为 UI（同步） 2019.01.30 0.5.1 添加调试（Debug）页面 2019.02.14 0.6.0 添加 REST API 统一消息体命名规范：message.data/message.message -> message.payload 添加 打开本地文件目录 功能 内置微信插件（extension_wechat） 添加 typing 库 完善 cli mode 2019.02.14 0.6.1 提高微信插件（extension_wechat）的易用性（内置） 2019.02.15 0.6.2 fix bug 2019.02.16 0.7.0 允许跨域访问 websocket/REST API, 方便开发者调试 为 webdebug 添加 REST API 调试工具 2019.02.23 0.7.1 让 Cozmo/Vector 插件支持同步模式（通过添加 messageID），至于采用同步模式还是异步模式，由 client 决定 添加 extension_mpfshell 扩展（by junhuanchen ） 2019.02.26 0.8.0 允许用户添加自定义配置： ~/codelab_adapter/user_settings.py 典型的配置包括： cli_load_extension_threads = [\"extension_iot\"] 命令行模式（./codelab-adapter --mode cli）默认启动插件 add gpiozero for raspberrypi platform 内置 mqtt client/broker： hbmqtt 内置 extension_iot 更新 extension_mpfshell 2019.03.16 0.8.1 微信插件支持收发群消息 添加 web 日志页面 添加重构之后的 blender 插件 2019.08.28 2.3.1 2019.09.10 2.5.0 安全性改进 2019.09.23 2.5.1 使用 Scratch 配色风格的 Web UI 版本号更新提醒（只提醒旧版本，不提醒测试版升级） 报告 adapter core 信息（version） 2019.09.23 2.5.3 将 GUI menu 迁移到 Web UI 2019.11.13 2.6.0 2.6.x 专注于提高健壮性 添加 rate limit 机制：TokenBucket 为 usb_microbit 添加 TokenBucket 提升 token 安全性（每次启动随机生成；也允许用户在配置文件里固化token） 添加 token 复制按钮（用于粘贴到外部网站） 将 token 添加到 scratch 启动 url 里（提高安全性） 2019.11.13 2.6.1 Scratch3Lab -> CodeLabClub 2019.11.13 2.6.2 支持 headless 模式（linux），用于开机自启、无人值守的环境 2020.04.17 3.0.0 发行说明 2020.04.30 3.1.0 自动更新 adapter home 目录 插件市场支持extension/node下载(统称为plugin)，node可以是任何有效的url链接 Cozmo 插件支持 event、sensor Adapter 默认随最后一个client关闭而关闭，允许用户配置该行为 重构 WebUI 的 Adatper socketio client，使其易于二次开发 2020.12.28 4.0.0 提供 Linda 支持！ 支持激光雷达，将普通地面变为交互式 Scratch 舞台（社区版暂未提供相关支持，目前近提供给CodeLab合作方） 与CodeLab IP访问方式兼容 修复与 token 有关的安全风险 webui, 基于最新codelab_adapter_base.js 解决websocket input token潜在风险 2021.12.31 4.1.0 修复目录字符问题（空格、中文） WebUI 支持 Linda 可视化 修复4.0.0引起的魔杖问题","text_tokens":["消息","重构","自启","可视","还是","2019.03","页面","tokenbucket","配置文件","树莓","webui","健壮性","[","后","pillow","增加","发行","由","同步","市场","有关","scratch","普通","开机","潜在","给","_","for","笔记","支撑","mpfshell","eim","gui","1","linux","只","3","直接","命令行","调试","文件","15","core","随","to","13","一条","pyserial","跨域","2021.12","settings","里","生成","28","未","typing","最后","mode","将","更新","版暂","headless","空格","体","plugin","websocket","payload","event","作为","本地","2018.10","messageid","-","blender","2018.5","js","社区","启动","完善","load","bug","\"","问题","2019.09","阻塞","]","其","ip","iot","风格","extension","2.3","提升","目录","=","url","方便","4.0","client","提高","地面","每次","解决","外部","开发","v0.1","目前","机制","0.8","方式","gpiozero","二次","展示","0.6","打开","17","随机","3.0","03","变为","scratch3lab","rate","前端","合作方","内部","升级","旧版本","于","模式","库","有效","配置","规范","codelabclub","易于","sensor","而",">","在","推出","需要"," ","之后","user","2.5","提醒","junhuanchen","魔杖","激光雷达","安全性","add","旧版","自定义","script","管理机制","by","web","开发者","23","合作","相关","任何","配色","额外","message","24","下载","：","pub","环境","api","重复","交互式","插件","node","用户","30","让","version","input","引起","关闭","cozmo","默认","requests","收发","！","(",",","usb","版本号","debug","2019.11","接入","cli","是","的","最新","0.5","允许","2.6","中文","并行","codelab","测试版","可视化","派",")","2018.11","雷达","报告","/","三方","说明","mqtt","可以","启停","包括","ws","命名","群","与","粘贴","一个","至于","用于","4.1","adapter","menu","信息","31","2","自动更新","扩展","专注","近","0","scratch3","内置","通过","改进","第三方","工具","~","决定","2019.02","进程","版本","limit","修复","行为","二次开发","固化","第三","按钮","webdebug","2019.01","无人","复制","2019.08","使","功能","文件目录","platform","为","、","不","易用性","26","14","2020.12","日志","到","hbmqtt","字符","16","支持","基于","0.4","10","统一","健壮","采用","典型","值守","threads","vector","兼容","2020.04",".","使用","迁移","微信","；","0.3","socketio","rest","（","统称","管理","）","风险","fix","linda","py","read","该","安全","x","添加","多个","也","舞台","用作","通道","自动","3.1","broker","base","0.7","清理","才能","rename","，","自定","定义","2018.12","raspberrypi","测试","adatper","v0.2","交互","退出","wechat","token","链接","导致","ui","data","访问","易用","异步","29","网站","子","microbit","提供","home","命令","激光"],"title":"changelog","title_tokens":["changelog"]},{"location":"DynamicTable/","text":"介绍 ¶ DynamicTable 是: 集体想象的产物。 是一个工具包(toolkit)，而不是一个 APP 鼓励创作者使用剪刀、纸张、玩具等事物进行创作。 是一种开放的可编程环境 使用 Scratch 即时构建应用程序。 基于 CodeLab Adapter 连接万物 与 CodeLab 可编程空间拥有一样的设计理念，可以视为它的一个 micro 版本 实物与虚拟事物融合在桌面上，可交互 交互的规则由用户自定义 在环境中,洞悉(seeing)事物的内部/运行状态，以便于创作者真正理解复杂事物 详情参考: CodeLab DynamicTable: A Seeing World CodeLab DynamicTable: 一个可实施的技术方案","text_tokens":["¶","规则","a","参考","一样","、","剪刀","可编","理念","虚拟","进行","工具包",":","构建","设计","由","(",",","scratch","纸张","micro","洞悉","实施","基于","内部","于","是","创作者","的","想象","作者","seeing","实物","产物","toolkit","而","使用","codelab","理解","在","它","融合","可","桌面",")","编程","连接"," ","/","状态","集体","app","可以","。","可编程","详情","不是","复杂","应用","运行","world","与","一种","开放","创作","一个","自定义","事物","以便","dynamictable","adapter","拥有","桌面上","复杂事物","真正","空间","面上","，","万物","自定","定义","技术","工具","中","交互","版本","杂事","程序","环境","即时","鼓励","玩具","等","视为","应用程序","用户","方案","介绍"],"title":"介绍(introduction)","title_tokens":["介绍",")","introduction","("]},{"location":"DynamicTable/#_1","text":"DynamicTable 是: 集体想象的产物。 是一个工具包(toolkit)，而不是一个 APP 鼓励创作者使用剪刀、纸张、玩具等事物进行创作。 是一种开放的可编程环境 使用 Scratch 即时构建应用程序。 基于 CodeLab Adapter 连接万物 与 CodeLab 可编程空间拥有一样的设计理念，可以视为它的一个 micro 版本 实物与虚拟事物融合在桌面上，可交互 交互的规则由用户自定义 在环境中,洞悉(seeing)事物的内部/运行状态，以便于创作者真正理解复杂事物 详情参考: CodeLab DynamicTable: A Seeing World CodeLab DynamicTable: 一个可实施的技术方案","text_tokens":["规则","a","参考","一样","、","剪刀","可编","理念","虚拟","进行","工具包",":","构建","设计","由","(",",","scratch","纸张","micro","洞悉","实施","基于","内部","于","是","创作者","的","想象","作者","seeing","实物","产物","toolkit","而","使用","codelab","理解","在","它","融合","可","桌面",")","编程","连接"," ","/","状态","集体","app","可以","。","可编程","详情","不是","复杂","应用","运行","world","与","一种","开放","创作","一个","自定义","事物","以便","dynamictable","adapter","拥有","桌面上","复杂事物","真正","空间","面上","，","万物","自定","定义","技术","工具","中","交互","版本","杂事","程序","环境","即时","鼓励","玩具","等","视为","应用程序","用户","方案"],"title":"介绍","title_tokens":["介绍"]},{"location":"DynamicTable/hello_world/","text":"hello world ¶ 依赖 ¶ DynamicTable 依赖于 Adapter 的内置的 node_physical_blocks 插件。 node_physical_blocks 最近推出了2.0版本: physical blocks 2.0 本文目前基于1.0版本。 Scratch ¶ 打开这两个插件: ImageData Physical Blocks ImageData 负责与 Scratch 舞台区数据交互，诸如获取舞台区的截图或者视频数据等。 我们可以将这些数据传递到 Adapter 处理: node_physical_blocks 便是一个能够处理 ImageData 数据的插件，你也可以自定义插件。 获取视频中的 marker 信息 ¶ 首先我们要开启摄像头( 镜像开启 ) 获取 marker id 列表 ¶ 使用该积木可以获得摄像头里所有的 marker 的 id 列表 可以看到视频里，一共有 4 个 marker，从左到右 id 分别为 28， 27，26，25 利用这个积木，可以构建 单词拼写程序 获取 marker 旋转角 ¶ 使用该积木可以获得摄像头里某个 marker 的旋转角 Scratch-marker-angle-demo.sb3 利用旋转角可以构建纸糊方向盘: 获取 marker 位置 ¶ 使用该积木可以获得摄像头里某个 marker 的位置信息","text_tokens":["¶","hello","或者","为","处理","从左到右","imagedata","id","目前","26","某个","两个",":","这些","打开","构建","到","(","scratch","传递","分别","负责","基于","demo","_","要","列表","所有","你","首先","拼写","便是","有","位置","的",".","方向盘","摄像头","4","使用","开启","推出","里",")","依赖于","28","角"," ","赖于","我们","一共","sb3","摄像","截图","将","25","积木","可以","这","。","该","区","world","与","physical","一个","自定义","也","依赖","舞台","dynamictable","看到","angle","adapter","1.0","信息","视频","-","marker","单词","内置","数据","，","自定","定义","方向","诸如","中","像头","交互","镜像","blocks","版本","利用","程序","了","等","本文","这个","个","能够","27","插件","node","2.0","获得","纸糊","获取","旋转","最近"],"title":"hello world","title_tokens":[" ","hello","world"]},{"location":"DynamicTable/hello_world/#hello-world","text":"","text_tokens":[],"title":"hello world","title_tokens":[" ","hello","world"]},{"location":"DynamicTable/hello_world/#_1","text":"DynamicTable 依赖于 Adapter 的内置的 node_physical_blocks 插件。 node_physical_blocks 最近推出了2.0版本: physical blocks 2.0 本文目前基于1.0版本。","text_tokens":["。","的","blocks","版本","目前","physical","了","本文","依赖",":","dynamictable","推出","依赖于","adapter","1.0"," ","赖于","node","插件","基于","_","2.0","内置","最近"],"title":"依赖","title_tokens":["依赖"]},{"location":"DynamicTable/hello_world/#scratch","text":"打开这两个插件: ImageData Physical Blocks ImageData 负责与 Scratch 舞台区数据交互，诸如获取舞台区的截图或者视频数据等。 我们可以将这些数据传递到 Adapter 处理: node_physical_blocks 便是一个能够处理 ImageData 数据的插件，你也可以自定义插件。","text_tokens":["可以","自定","这","定义","或者","诸如","。","便是","处理","区","的","交互","imagedata","你","blocks","与","physical","两个","一个","等","自定义","也",":","舞台","打开","这些","能够","到","scratch","传递","adapter","插件"," ","负责","视频","我们","node","数据","截图","_","将","获取","，"],"title":"Scratch","title_tokens":["scratch"]},{"location":"DynamicTable/hello_world/#marker","text":"首先我们要开启摄像头( 镜像开启 )","text_tokens":[" ","镜像","我们","摄像头","摄像","要","(",")","像头","开启","首先"],"title":"获取视频中的 marker 信息","title_tokens":["视频"," ","marker","中","获取","的","信息"]},{"location":"DynamicTable/hello_world/#marker-id","text":"使用该积木可以获得摄像头里所有的 marker 的 id 列表 可以看到视频里，一共有 4 个 marker，从左到右 id 分别为 28， 27，26，25 利用这个积木，可以构建 单词拼写程序","text_tokens":["可以","拼写","为","该","有","的","像头","从左到右","id","摄像头","利用","4","程序","使用","26","里","看到","这个","个","构建","27","分别","28"," ","视频","marker","一共","单词","摄像","获得","列表","25","积木","所有","，"],"title":"获取 marker id 列表","title_tokens":[" ","id","marker","列表","获取"]},{"location":"DynamicTable/hello_world/#marker_1","text":"使用该积木可以获得摄像头里某个 marker 的旋转角 Scratch-marker-angle-demo.sb3 利用旋转角可以构建纸糊方向盘:","text_tokens":["可以","方向","该","的","像头",".","方向盘","摄像头","利用","使用","某个",":","里","构建","angle","scratch","角"," ","-","marker","demo","sb3","摄像","获得","纸糊","积木","旋转"],"title":"获取 marker 旋转角","title_tokens":[" ","marker","获取","角","旋转"]},{"location":"DynamicTable/hello_world/#marker_2","text":"使用该积木可以获得摄像头里某个 marker 的位置信息","text_tokens":["可以"," ","marker","摄像头","里","的","摄像","该","获得","使用","位置","某个","积木","像头","信息"],"title":"获取 marker 位置","title_tokens":[" ","位置","marker","获取"]},{"location":"Neverland/","text":"介绍 ¶ 这是 社区版 Neverland 相关文档。 解释 CodeLab Neverland 是什么？ ¶ CodeLab Neverland 是一个 可编程空间 。 CodeLab Neverland 核心由 CodeLab Adapter 驱动。它致力于连接万物，无论是软件还是硬件，无论是 AI、开源硬件、现实世界的物体，还是虚拟世界的动画角色，在 CodeLab Adapter 的驱动下，皆可彼此互动。 在 CodeLab Neverland，你可以与万物沟通，你可以让神经网络识别出你的身体部位，进而制作一个体感游戏，或是通过算法让整个空间变得智能。你可以在朋友生日那天，在 Ta 进门的一刻，将手中的魔杖一挥，在空中划一个字母 L 的轨迹，瞬间，点亮房间里五彩的灯光。在这儿，你将轻松做出这样的魔杖。 我们希望将你带入一个魔法世界，一个由编程驱动的世界。 同时，CodeLab Neverland 也致力于去实践约翰·杜威提倡的 Education as life. 本文档致力于帮助大家复现我们 在 Neverland 里做的好玩项目 ，以下是它们的构建和使用文档: 收工，吃饭 读书与思考 乐器演奏 (Teachable Machine)","text_tokens":["¶","虚拟世界","沟通","复现","life","、","还是","可编","让","虚拟","·","？","teachable","智能","算法","去","整个","带入",":","构建","由","(","皆","空中","体感","做","致力","轻松","互动","进门","五彩","本","做出","你","同时","无论","动画","点亮","是","彼此","的",".","神经网络","开源","魔法","as","项目","以下","machine","使用","物体","codelab","它们","实践","致力于","在","它","可","部位","里","这是",")","编程","核心","连接"," ","我们","乐器","角色","将","解释","一挥","魔杖","可以","出","这儿","。","可编程","那天","网络","房间","硬件","与","轨迹","l","大家","读书","帮助","一个","也","世界","下","杜威","adapter","神经网","希望","一刻","识别","社区","划","软件","吃饭","驱动","neverland","空间","ai","通过","，","版","万物","ta","相关","和","education","提倡","思考","现实","好玩","进而","字母","什么","收工","约翰","演奏","身体","或是","制作","瞬间","灯光","文档","无论是","朋友","介绍","变得","这样","手中","神经","生日","游戏"],"title":"介绍(introduction)","title_tokens":["介绍",")","introduction","("]},{"location":"Neverland/#_1","text":"这是 社区版 Neverland 相关文档。 解释","text_tokens":[" ","相关","社区","这是","。","neverland","文档","解释","版"],"title":"介绍","title_tokens":["介绍"]},{"location":"Neverland/#codelab-neverland","text":"CodeLab Neverland 是一个 可编程空间 。 CodeLab Neverland 核心由 CodeLab Adapter 驱动。它致力于连接万物，无论是软件还是硬件，无论是 AI、开源硬件、现实世界的物体，还是虚拟世界的动画角色，在 CodeLab Adapter 的驱动下，皆可彼此互动。 在 CodeLab Neverland，你可以与万物沟通，你可以让神经网络识别出你的身体部位，进而制作一个体感游戏，或是通过算法让整个空间变得智能。你可以在朋友生日那天，在 Ta 进门的一刻，将手中的魔杖一挥，在空中划一个字母 L 的轨迹，瞬间，点亮房间里五彩的灯光。在这儿，你将轻松做出这样的魔杖。 我们希望将你带入一个魔法世界，一个由编程驱动的世界。 同时，CodeLab Neverland 也致力于去实践约翰·杜威提倡的 Education as life. 本文档致力于帮助大家复现我们 在 Neverland 里做的好玩项目 ，以下是它们的构建和使用文档: 收工，吃饭 读书与思考 乐器演奏 (Teachable Machine)","text_tokens":["虚拟世界","沟通","复现","life","、","还是","可编","让","虚拟","·","teachable","智能","算法","去","整个","带入",":","构建","由","(","皆","空中","体感","做","致力","轻松","互动","进门","五彩","本","做出","你","同时","无论","动画","点亮","是","彼此","的",".","神经网络","开源","魔法","as","项目","以下","machine","使用","物体","codelab","它们","实践","致力于","在","它","可","部位","里",")","编程","核心","连接"," ","我们","乐器","角色","将","一挥","魔杖","可以","出","这儿","可编程","。","那天","网络","房间","硬件","与","轨迹","l","大家","读书","帮助","一个","也","世界","下","杜威","adapter","神经网","希望","一刻","识别","划","软件","吃饭","驱动","neverland","空间","ai","通过","，","万物","ta","和","education","提倡","思考","现实","好玩","进而","字母","收工","约翰","演奏","身体","或是","制作","瞬间","灯光","无论是","文档","朋友","变得","这样","手中","神经","生日","游戏"],"title":"CodeLab Neverland 是什么？","title_tokens":[" ","？","什么","是","neverland","codelab"]},{"location":"Neverland/HA/","text":"安装和配置 Home Assistant ¶ Neverland 社区版 Neverland 使用 Home Assistant 驱动家居/联网设备，用户可以使用 CodeLab Scratch、Python，或者 CodeLab Adapter 支持的 其他 34 门编程语言 ，与家居/联网设备交互。 Home Assistant 简介 ¶ Home Assistant 是一个开源家庭自动化软件，将隐私放在首位，由全球各地的志愿者构建。目前支持 1,500+ 智能家居设备。 Home Assistant 采用 Python 构建，可以运行在任何主流操作系统，以及 树莓派 中。 安装在哪里？ ¶ Home Assistant 有 多种安装方法 。如果你打算长期使用它，将其用于家庭自动化，推荐 在树莓派上安装 。 如果你安装它是为了临时使用 Scratch 来对家庭设备进行编程，则直接在你编程的电脑上安装即可。 环境依赖 ¶ Python >= 3.6 开始安装 ¶ pip3 install homeassistant 国内用户可通过更换 pypi 源加速安装过程: pip3 install homeassistant -i https://mirrors.aliyun.com/pypi/simple 启动 Home Assistant ¶ hass --open-ui 第一次启动时，会安装部分依赖项，根据网络情况不同，耗时不等。 一切准备就绪，将自动打开浏览器，进入都 Home Assistant 主页。访问地址是： http://127.0.0.1:8123 第一次使用需要填写基本用户信息，放心，数据都保存在本地。 添加智能设备 ¶ 这里展示如何接入 Yeelight 彩光灯（ 购买链接 ）和米家智能家庭套装（ 购买链接 ）。 如果你有其他智能设备需要接入，可参考 官方文档 。或者 Google 搜索 home assistant + 你想接入的设备 。 接入 Yeelight 彩光灯 ¶ 步骤 1：配网 ¶ 下载 Yeelight 手机客户端 ，按照 App 引导，为彩光灯配网。 配网完成后，你应该能使用 App 控制它。 步骤 2：局域网访问 ¶ 进入设备页，点击右下角按钮。 允许局域网访问。 步骤 3：获取设备 IP ¶ 进入设备页，点击左上角控制器，获取设备 IP。 步骤 4：添加配置信息 ¶ 将 Yeelight 彩光灯配置信息，添加到 Home Assistant 配置文件（configuration.yaml） 里。 配置文件所在路径: macOS ~/.homeassistant Linux ~/.homeassistant Windows %APPDATA%/.homeassistant 添加配置信息: yeelight : devices : 192.168.21.102 : name : Living Room 步骤 5：重启 Home Assistant ¶ 重启之后，你应该可以使用 Home Assistant 控制 Yeelight 彩光灯了！ 提醒 米家智能家庭套装似乎已经不支持局域网通信。 推荐使用兼容 HomeKit 的网关，可以直接接入 Home Assistant 步骤 1：配网 ¶ 下载 米家 手机客户端 ，按照APP引导，首先为 智能网关 配网，之后把其他设备接入进来。 配网完成后，你应该能使用 App 控制它们。 步骤 2：局域网访问 ¶ 进入 智能网关 页，点击右上角，点击 关于 。 进入关于页，猛戳空白处多下（操作听硬核的 :P）， 将出现 局域网通信协议 ， 点击进入，打开它，并记下密码： 步骤 3：添加配置信息 ¶ 将 Yeelight 彩光灯配置信息，添加到 Home Assistant配置文件（configuration.yaml） 里。 配置文件所在路径： macOS ~/.homeassistant Linux ~/.homeassistant Windows %APPDATA%/.homeassistant 添加配置信息： xiaomi_aqara : discovery_retry : 5 gateways : - key : 60n163sp2rduqx4ri 步骤 4：重启 Home Assistant ¶ 重启之后，你应该可以使用 Home Assistant 控制 米家智能家庭套装 里的设备了！ 使用 CodeLab Scratch 连接 Home Assistant ¶ 为了方便用户使用 Scratch 驱动家居设备，我们需要获取 Home Assistant 的访问 token，将其粘贴到 CodeLab Scratch 里的 Home Assistant 拓展积木里。如此一来我们就可以使用 CodeLab Scratch 来为家庭/教室里的设备编程。打个响指，把灯关掉！ 获取 Home Assistant 访问 token ¶ 如图依次按顺序（1、2、3）操作： 由于 token 只出现一次，所以你最好先复制粘贴到记事本里。 使用 CodeLab Scratch 为家庭设备编程！ ¶ 你既可以使用 CodeLab Scratch 在线版 ，也可以使用 离线版 来进行编程。 在线版与离线版打开方式 如果你是要在线版，直接 点击项目链接 即可。 如果你使用离线版，则下载 源码文件 ，使用 Scratch 加载它即可。 加载后填入你之前记下的 token。 提醒 如果你的 Home Assistant 访问地址不是 http://127.0.0.1:8123 (诸如运行在树莓派上)，你就无法在 在线版 中连接它( 浏览器安全策略 )。有两种解决方案: 1. 使用离线版 2. 将 Home Assistant 的访问地址 http://127.0.0.1:8123 映射到 https 上，可以采用以下任何一种方案: * ngrok ：下载并运行 ngrok http 8123 ，你将 Home Assistant 的访问地址暴露到了 https 公网, 形如: https://ff4b68f8.ngrok.io . * 其他办法 提醒 如果想接入 zigbee 设备，请使用 zigbee2mqtt ，目前已支持 以下设备 拓展 ¶ 除了可以使用 CodeLab Scratch 连接 Home Assistant，我们还可以使用 CodeLab Adapter 连接 Home Assistant，这对我们在创客/IoT 实验室里展开教学，以及进行多语言教学（34+ 编程语言）都很有用。 这部分的文档我们将在未来同步过来。 参考 ¶ Installation in Python virtual environment Install Home Assistant","text_tokens":["参考","配置文件","先","树莓","后","in","套装","购买","联网","由","离线","家庭设备","同步","scratch","记事","电脑","_","一来","要","记事本","1","linux","*","只","局域","3","直接","文件","以下","它们","retry","国内","它","里","ngrok","两种","0.1","应该","我们","进来","加载","python","将","积木","点击","i","密码","%","io","不是","如此一来","官方","创客","硬核","操作系统","本地","首位","实验室","并","-","社区","家居","在线","启动","上角","拓展","软件","xiaomi","google","有用","长期","和","教学","60n163sp2rduqx4ri","控制","如果","打个","米家","未来","设备","安装","其","ip","homeassistant","把","iot","等","=","之前","多种","方便","文档","已经","听","放心","按","install","解决","右下","关","目前","智能","展开","方式","情况","形","http","门","准备","展示",":","打开","步骤","开方","3.6","mirrors","浏览器","首先","智能家居","即可","能","hass","配置","开源","不同","策略","解决方案","按照","关掉","由于","映射","保存",">","在","智能网","时","主流","需要","连接"," ","教室","如图","下角","之后","pip3","出现","对","提醒","办法","左上","还","。","推荐","依次","暴露","米","room","p","很","zigbee","操作","记下","数据","版","最好","任何","更换","诸如","猛","500","右上角","下载","响指","：","环境","aliyun","左上角","浏览","编程语言","开始","各地","用户","就绪","方案","志愿者","打算","右上","获取","ff4b68f8","¶","com","aqara","yeelight","源","多","愿者","语言","全球","系统","pypi","！","构建","discovery",",","(","灯配","哪里","会","一次","所在","接入","既","windows","是","的","填写","允许","项目","已","codelab","除了","搜索","可","派","实验","似乎",")","编程","/","放在","家庭","引导","这里","34","app","simple","公网","为了","可以","21.102","这","打开方式","过程","网络","准备就绪","gateways","与","通信","一种","粘贴","所以","协议","一个","用于","下","来","请","adapter","一切","则","living","信息","第一","2","加速","驱动","neverland","通过","空白","如此","临时","devices","中","~","填入","open","了","顺序","按钮","过来","无法","控制器","这部","virtual","客户端","name","复制","网关","局域网","安全策略","或者","127.0","为","如","、","https","不","？","进行","key","地址","家","8123","自动化","放在首位","其他","192.168","完成","复制粘贴","到","zigbee2mqtt","耗时","支持","installation","如何","关于","你","采用","assistant","yaml","configuration","有","部分","兼容",".","戳","environment","4","通信协议","使用","这部分","网","彩光","空白处","简介","homekit","（","appdata%","配网","以及","）","都","隐私","macos","根据","第一次","安全","运行","路径","添加","上","也","想","依赖","源码","自动","灯","方法","手机","主页","项","，","+","交互","token","链接","就","ui","访问","页","5","基本","进入","志愿","右下角","重启","home","客户"],"title":"安装Home Assistant","title_tokens":[" ","安装","home","assistant"]},{"location":"Neverland/HA/#home-assistant","text":"Neverland 社区版 Neverland 使用 Home Assistant 驱动家居/联网设备，用户可以使用 CodeLab Scratch、Python，或者 CodeLab Adapter 支持的 其他 34 门编程语言 ，与家居/联网设备交互。","text_tokens":["可以","assistant","版","或者","。","、","的","交互","设备","语言","与","使用","codelab","门","其他","联网","scratch","编程","adapter"," ","/","支持","编程语言","用户","社区","家居","34","home","neverland","驱动","python","，"],"title":"安装和配置 Home Assistant","title_tokens":[" ","安装","和","assistant","home","配置"]},{"location":"Neverland/HA/#home-assistant_1","text":"Home Assistant 是一个开源家庭自动化软件，将隐私放在首位，由全球各地的志愿者构建。目前支持 1,500+ 智能家居设备。 Home Assistant 采用 Python 构建，可以运行在任何主流操作系统，以及 树莓派 中。","text_tokens":["可以","+","采用","assistant","1","智能家居","任何","。","是","中","500","的","设备","开源","愿者","运行","目前","智能","操作系统","树莓","全球","一个","自动化","在","放在首位","系统","构建","由","主流","派",",","首位","自动"," ","支持","放在","各地","家庭","志愿者","家居","志愿","软件","操作","home","将","python","以及","，","隐私"],"title":"Home Assistant 简介","title_tokens":[" ","简介","home","assistant"]},{"location":"Neverland/HA/#_1","text":"Home Assistant 有 多种安装方法 。如果你打算长期使用它，将其用于家庭自动化，推荐 在树莓派上安装 。 如果你安装它是为了临时使用 Scratch 来对家庭设备进行编程，则直接在你编程的电脑上安装即可。","text_tokens":["长期","assistant","即可","。","如果","临时","有","是","直接","的","你","安装","其","设备","进行","树莓","使用","推荐","自动化","在","上","用于","它","派","多种","家庭设备","scratch","来","编程","电脑","自动","则"," ","家庭","打算","方法","home","将","对","，","为了"],"title":"安装在哪里？","title_tokens":["哪里","安装","？","在"]},{"location":"Neverland/HA/#_2","text":"Python >= 3.6","text_tokens":[" ","3.6","=","python",">"],"title":"环境依赖","title_tokens":["环境","依赖"]},{"location":"Neverland/HA/#_3","text":"pip3 install homeassistant 国内用户可通过更换 pypi 源加速安装过程: pip3 install homeassistant -i https://mirrors.aliyun.com/pypi/simple","text_tokens":["com","更换","install","过程","simple",".","源","https","安装","homeassistant","aliyun","国内",":","pypi","可"," ","-","/","用户","加速","pip3","mirrors","i","通过"],"title":"开始安装","title_tokens":["安装","开始"]},{"location":"Neverland/HA/#home-assistant_2","text":"hass --open-ui 第一次启动时，会安装部分依赖项，根据网络情况不同，耗时不等。 一切准备就绪，将自动打开浏览器，进入都 Home Assistant 主页。访问地址是： http://127.0.0.1:8123 第一次使用需要填写基本用户信息，放心，数据都保存在本地。","text_tokens":["assistant","127.0","。","一次","根据","第一次","网络","是","部分","open","hass","准备就绪",".","不","安装","不同","填写","都","：","使用","地址","情况","保存","等","8123","http","在","准备","ui","依赖","打开",":","访问","时","0.1","耗时","本地","一切","浏览","需要","自动","基本","信息"," ","-","/","就绪","用户","进入","第一","启动","放心","home","会","主页","将","数据","项","，","浏览器"],"title":"启动 Home Assistant","title_tokens":[" ","assistant","home","启动"]},{"location":"Neverland/HA/#_4","text":"这里展示如何接入 Yeelight 彩光灯（ 购买链接 ）和米家智能家庭套装（ 购买链接 ）。 如果你有其他智能设备需要接入，可参考 官方文档 。或者 Google 搜索 home assistant + 你想接入的设备 。","text_tokens":["和","接入","assistant","+","参考","yeelight","或者","。","如果","有","的","官方","设备","智能","彩光","套装","链接","家","购买","其他","展示","想","搜索","可","米","需要","文档"," ","（","灯","家庭","，","这里","如何","home","）","google","你"],"title":"添加智能设备","title_tokens":["设备","添加","智能"]},{"location":"Neverland/HA/#yeelight","text":"","text_tokens":[],"title":"接入 Yeelight 彩光灯","title_tokens":[" ","接入","灯","yeelight","彩光"]},{"location":"Neverland/HA/#1","text":"下载 Yeelight 手机客户端 ，按照 App 引导，为彩光灯配网。 配网完成后，你应该能使用 App 控制它。","text_tokens":["yeelight","为","控制","。","能","下载","按照","使用","后","网","彩光","完成","它","灯配","应该"," ","客户端","，","引导","手机","配网","app","你","客户"],"title":"步骤 1：配网","title_tokens":[" ","1","：","配网","步骤"]},{"location":"Neverland/HA/#2","text":"进入设备页，点击右下角按钮。 允许局域网访问。","text_tokens":["设备"," ","进入","下角","允许","右下角","右下","访问","。","页","局域","局域网","点击","，","按钮"],"title":"步骤 2：局域网访问","title_tokens":[" ","2","访问","：","局域","步骤","局域网"]},{"location":"Neverland/HA/#3-ip","text":"进入设备页，点击左上角控制器，获取设备 IP。","text_tokens":["设备"," ","ip","左上","进入","控制","上角","。","页","左上角","控制器","获取","点击","，"],"title":"步骤 3：获取设备 IP","title_tokens":[" ","设备","ip","：","步骤","3","获取"]},{"location":"Neverland/HA/#4","text":"将 Yeelight 彩光灯配置信息，添加到 Home Assistant 配置文件（configuration.yaml） 里。 配置文件所在路径: macOS ~/.homeassistant Linux ~/.homeassistant Windows %APPDATA%/.homeassistant 添加配置信息: yeelight : devices : 192.168.21.102 : name : Living Room","text_tokens":["assistant","linux","yaml","yeelight","configuration","windows","%","。","devices","macos","~",".","配置","文件","homeassistant","路径","配置文件","添加","彩光","192.168",":","里","到","living","信息"," ","（","/","room","灯","appdata%","name","home","将","）","，","所在","21.102"],"title":"步骤 4：添加配置信息","title_tokens":[" ","添加","：","4","步骤","配置","信息"]},{"location":"Neverland/HA/#5-home-assistant","text":"重启之后，你应该可以使用 Home Assistant 控制 Yeelight 彩光灯了！ 提醒 米家智能家庭套装似乎已经不支持局域网通信。 推荐使用兼容 HomeKit 的网关，可以直接接入 Home Assistant","text_tokens":["可以","接入","assistant","yeelight","控制","局域","。","局域网","米家","直接","兼容","的","你","不","智能","通信","使用","了","推荐","彩光","套装","！","似乎","homekit","应该"," ","支持","已经","灯","家庭","网关","之后","重启","home","提醒","，"],"title":"步骤 5：重启 Home Assistant","title_tokens":[" ","assistant","重启","：","步骤","home","5"]},{"location":"Neverland/HA/#1_1","text":"下载 米家 手机客户端 ，按照APP引导，首先为 智能网关 配网，之后把其他设备接入进来。 配网完成后，你应该能使用 App 控制它们。","text_tokens":["接入","为","控制","关","。","米家","能","设备","你","下载","把","智能","按照","使用","后","它们","其他","智能网","完成","应该"," ","客户端","引导","之后","手机","配网","进来","app","，","首先","客户"],"title":"步骤 1：配网","title_tokens":[" ","1","：","配网","步骤"]},{"location":"Neverland/HA/#2_1","text":"进入 智能网关 页，点击右上角，点击 关于 。 进入关于页，猛戳空白处多下（操作听硬核的 :P）， 将出现 局域网通信协议 ， 点击进入，打开它，并记下密码：","text_tokens":["空白","密码","关","。","局域","局域网","猛","右上角","的","多","戳","智能","硬核","通信","：","通信协议","协议","空白处",":","智能网","下","打开","它","页","并","p"," ","（","进入","右上","听","上角","出现","关于","操作","记下","将","）","点击","，"],"title":"步骤 2：局域网访问","title_tokens":[" ","2","访问","：","局域","步骤","局域网"]},{"location":"Neverland/HA/#3","text":"将 Yeelight 彩光灯配置信息，添加到 Home Assistant配置文件（configuration.yaml） 里。 配置文件所在路径： macOS ~/.homeassistant Linux ~/.homeassistant Windows %APPDATA%/.homeassistant 添加配置信息： xiaomi_aqara : discovery_retry : 5 gateways : - key : 60n163sp2rduqx4ri","text_tokens":["aqara","assistant","linux","yaml","yeelight","configuration","windows","%","。","60n163sp2rduqx4ri","macos","~",".","配置","文件","gateways","xiaomi","homeassistant","路径","配置文件","添加","key","：","彩光","retry",":","里","到","discovery","5","信息"," ","（","/","-","灯","appdata%","_","home","将","）","，","所在"],"title":"步骤 3：添加配置信息","title_tokens":[" ","添加","：","步骤","3","配置","信息"]},{"location":"Neverland/HA/#4-home-assistant","text":"重启之后，你应该可以使用 Home Assistant 控制 米家智能家庭套装 里的设备了！","text_tokens":["可以","assistant","控制","米家","的","设备","你","智能","使用","了","套装","里","！","应该"," ","家庭","之后","重启","home","，"],"title":"步骤 4：重启 Home Assistant","title_tokens":[" ","assistant","重启","：","4","步骤","home"]},{"location":"Neverland/HA/#codelab-scratch-home-assistant","text":"为了方便用户使用 Scratch 驱动家居设备，我们需要获取 Home Assistant 的访问 token，将其粘贴到 CodeLab Scratch 里的 Home Assistant 拓展积木里。如此一来我们就可以使用 CodeLab Scratch 来为家庭/教室里的设备编程。打个响指，把灯关掉！","text_tokens":["可以","assistant","如此","为","。","打个","如此一来","的","设备","其","把","响指","关掉","粘贴","使用","token","codelab","就","里","访问","！","到","scratch","来","方便","编程","需要"," ","/","我们","教室","用户","家庭","灯","家居","拓展","一来","驱动","home","将","获取","积木","，","为了"],"title":"使用 CodeLab Scratch 连接 Home Assistant","title_tokens":[" ","assistant","scratch","使用","home","codelab","连接"]},{"location":"Neverland/HA/#home-assistant-token","text":"如图依次按顺序（1、2、3）操作： 由于 token 只出现一次，所以你最好先复制粘贴到记事本里。","text_tokens":["按","1","只","。","、","一次","3","你","先","：","粘贴","所以","由于","token","顺序","依次","里","复制粘贴","到","）","记事","（"," ","如图","复制","2","操作","出现","，","最好","记事本"],"title":"获取 Home Assistant 访问 token","title_tokens":[" ","assistant","访问","home","token","获取"]},{"location":"Neverland/HA/#codelab-scratch","text":"你既可以使用 CodeLab Scratch 在线版 ，也可以使用 离线版 来进行编程。 在线版与离线版打开方式 如果你是要在线版，直接 点击项目链接 即可。 如果你使用离线版，则下载 源码文件 ，使用 Scratch 加载它即可。 加载后填入你之前记下的 token。 提醒 如果你的 Home Assistant 访问地址不是 http://127.0.0.1:8123 (诸如运行在树莓派上)，你就无法在 在线版 中连接它( 浏览器安全策略 )。有两种解决方案: 1. 使用离线版 2. 将 Home Assistant 的访问地址 http://127.0.0.1:8123 映射到 https 上，可以采用以下任何一种方案: * ngrok ：下载并运行 ngrok http 8123 ，你将 Home Assistant 的访问地址暴露到了 https 公网, 形如: https://ff4b68f8.ngrok.io . * 其他办法 提醒 如果想接入 zigbee 设备，请使用 zigbee2mqtt ，目前已支持 以下设备","text_tokens":["127.0","解决","如","https","进行","目前","树莓","方式","地址","后","形","8123","http","其他",":","打开","离线","(","到","scratch",",","zigbee2mqtt","开方","支持","要","你","浏览器","采用","assistant","1","*","接入","既","即可","有","是","直接","的",".","文件","策略","解决方案","项目","以下","使用","已","codelab","映射","在","它","ngrok","派","两种","0.1",")","编程","连接"," ","/","加载","将","提醒","点击","公网","可以","办法","打开方式","。","io","安全","不是","运行","与","一种","也","上","想","源码","暴露","来","请","则","并","在线","2","zigbee","记下","，","版","任何","如果","诸如","中","填入","设备","下载","：","token","了","链接","就","访问","之前","无法","浏览","方案","home","ff4b68f8","安全策略"],"title":"使用 CodeLab Scratch 为家庭设备编程！","title_tokens":[" ","设备","家庭","为","！","家庭设备","scratch","使用","编程","codelab"]},{"location":"Neverland/HA/#_5","text":"除了可以使用 CodeLab Scratch 连接 Home Assistant，我们还可以使用 CodeLab Adapter 连接 Home Assistant，这对我们在创客/IoT 实验室里展开教学，以及进行多语言教学（34+ 编程语言）都很有用。 这部分的文档我们将在未来同步过来。","text_tokens":["可以","这","+","assistant","教学","还","。","部分","的","未来","创客","多","进行","语言","展开","使用","iot","codelab","这部分","过来","在","除了","里","实验","同步","以及","scratch","）","编程","adapter","实验室","文档","这部","连接"," ","/","我们","（","编程语言","很","34","home","将","对","有用","，","都"],"title":"拓展","title_tokens":["拓展"]},{"location":"Neverland/HA/#_6","text":"Installation in Python virtual environment Install Home Assistant","text_tokens":[" ","assistant","installation","install","environment","home","python","in","virtual"],"title":"参考","title_tokens":["参考"]},{"location":"Neverland/finger-snapping/","text":"收工，吃饭 ¶ Scratch 、 Home Assistant 、 智能家居（smart home） 、 声音检测（Sound） 步骤 1：构建 ¶ 是什么? ¶ 打一个响指，关掉整个办公室的灯，下班回家吃饭！ 它是如何工作的? ¶ 运行 Home Assistant ，接管空间的所有智能设备。 使用 CodeLab Scratch（ 在线版 、 离线版 皆可）的 Home Assistant 扩展，控制智能设备。 使用 Scratch 中的 声音响度积木 监测环境中的声音，当声音响度超过某个值，关灯！ 你需要准备些什么 ¶ 安装和配置 Home Assistant CodeLab Scratch 智能家居设备（以下是 CodeLab 的推荐清单，任选一项即可） 米家智能家庭套装（ 购买链接 ） Yeelight 彩光灯（ 购买链接 ） 如果你是 Home Assistant 用户，则可以任意使用 任何社区接入的套件 步骤 2：编程 ¶ 在线版与离线版打开方式 如果你是要在线版，直接 点击项目链接 即可。 如果你使用离线版，则下载 源码文件 ，使用 Scratch 加载它即可. 加载后填入你之前记下的 token。 步骤 3：发挥想象 ¶ 现在你可以使用 CodeLab Scratch 的 Home Assistant 插件自由的编程啦，试着与 Scratch 里其他有趣的积木互动吧。 如果你想让程序只对响指声作出反应，甚至只对你的响指声作出反应都是可能的，使用 AI 来做到这点！ CodeLab Adapter 已经将 Teachable Machine 接入进来了 ，你可以使用声音、肢体、各种物体与你的房间进行互动！","text_tokens":["¶","yeelight","、","响度","让","进行","teachable","智能","方式","某个","后","套装","一项","购买","准备","整个","套件","其他","打开","！","构建","离线","scratch","步骤","皆","开方","有趣","超过","如何","要","互动","做到","所有","你","接入","assistant","1","智能家居","各种","任选","即可","只","反应","是","3","下班","直接","的",".","想象","配置","文件","检测","自由","值","以下","项目","关掉","machine","使用","物体","sound","codelab","彩光","任意","它","可","里","编程","需要"," ","（","家庭","肢体","进来","加载","将","smart","）","积木","点击","对","都","可能","接管","可以","打","打开方式","。","工作","房间","试着","运行","与","办公室","甚至","推荐","当","一个","?","现在","想","源码","发挥","来","adapter","则","灯","家居","在线","扩展","社区","2","关灯","办公","吃饭","记下","吧","空间","ai","版","，","和","任何","作出","控制","声","如果","中","填入","米家","监测","声音","设备","安装","下载","响指","什么","收工","：","公室","程序","环境","token","了","作出反应","清单","链接","这点","回家","之前","些","插件","啦","用户","已经","home"],"title":"收工吃饭","title_tokens":["吃饭","收工"]},{"location":"Neverland/finger-snapping/#_1","text":"Scratch 、 Home Assistant 、 智能家居（smart home） 、 声音检测（Sound）","text_tokens":[" ","（","assistant","智能家居","智能","家居","检测","、","scratch","home","sound","smart","）","声音"],"title":"收工，吃饭","title_tokens":["吃饭","，","收工"]},{"location":"Neverland/finger-snapping/#1","text":"","text_tokens":[],"title":"步骤 1：构建","title_tokens":[" ","1","构建","：","步骤"]},{"location":"Neverland/finger-snapping/#_2","text":"打一个响指，关掉整个办公室的灯，下班回家吃饭！","text_tokens":["整个","打","灯","响指","！","回家","公室","关掉","办公","办公室","吃饭","下班","的","，","一个"],"title":"是什么?","title_tokens":["是","什么","?"]},{"location":"Neverland/finger-snapping/#_3","text":"运行 Home Assistant ，接管空间的所有智能设备。 使用 CodeLab Scratch（ 在线版 、 离线版 皆可）的 Home Assistant 扩展，控制智能设备。 使用 Scratch 中的 声音响度积木 监测环境中的声音，当声音响度超过某个值，关灯！","text_tokens":["接管","assistant","控制","。","、","中","响度","监测","的","声音","设备","运行","智能","值","使用","环境","codelab","某个","当","可","！","离线","scratch","皆"," ","（","超过","在线","，","扩展","关灯","home","空间","）","积木","所有","版"],"title":"它是如何工作的?","title_tokens":["它","如何","工作","是","的","?"]},{"location":"Neverland/finger-snapping/#_4","text":"安装和配置 Home Assistant CodeLab Scratch 智能家居设备（以下是 CodeLab 的推荐清单，任选一项即可） 米家智能家庭套装（ 购买链接 ） Yeelight 彩光灯（ 购买链接 ） 如果你是 Home Assistant 用户，则可以任意使用 任何社区接入的套件","text_tokens":["可以","和","接入","assistant","智能家居","任何","任选","yeelight","即可","如果","是","米家","的","配置","设备","安装","你","智能","以下","使用","codelab","推荐","清单","彩光","套装","链接","一项","购买","套件","任意","scratch","则"," ","（","用户","家庭","灯","家居","社区","home","）","，"],"title":"你需要准备些什么","title_tokens":["准备","什么","些","需要","你"]},{"location":"Neverland/finger-snapping/#2","text":"在线版与离线版打开方式 如果你是要在线版，直接 点击项目链接 即可。 如果你使用离线版，则下载 源码文件 ，使用 Scratch 加载它即可. 加载后填入你之前记下的 token。","text_tokens":["打开方式","版","即可","如果","。","是","填入","直接",".","的","文件","下载","与","项目","使用","方式","token","后","链接","源码","打开","它","离线","之前","scratch","开方","则"," ","在线","，","要","记下","加载","点击","你"],"title":"步骤 2：编程","title_tokens":[" ","2","：","步骤","编程"]},{"location":"Neverland/finger-snapping/#3","text":"现在你可以使用 CodeLab Scratch 的 Home Assistant 插件自由的编程啦，试着与 Scratch 里其他有趣的积木互动吧。 如果你想让程序只对响指声作出反应，甚至只对你的响指声作出反应都是可能的，使用 AI 来做到这点！ CodeLab Adapter 已经将 Teachable Machine 接入进来了 ，你可以使用声音、肢体、各种物体与你的房间进行互动！","text_tokens":["可以","接入","assistant","ai","各种","作出","声","只","反应","。","如果","、","是","的","声音","让","房间","你","试着","进行","teachable","自由","与","响指","machine","甚至","程序","使用","物体","codelab","了","作出反应","现在","其他","想","里","这点","！","scratch","来","编程","adapter"," ","插件","啦","有趣","已经","肢体","home","互动","做到","吧","将","对","积木","进来","，","都","可能"],"title":"步骤 3：发挥想象","title_tokens":[" ","：","发挥","步骤","3","想象"]},{"location":"Neverland/frp/","text":"frp免费服务 ¶ chuantou.org 可以使用ngrok","text_tokens":[" ","¶","org","可以","免费","ngrok","服务","使用","frp","chuantou","."],"title":"frp免费服务","title_tokens":["服务","frp","免费"]},{"location":"Neverland/frp/#frp","text":"chuantou.org 可以使用ngrok","text_tokens":[" ","可以","org","ngrok","使用","chuantou","."],"title":"frp免费服务","title_tokens":["服务","frp","免费"]},{"location":"Neverland/musical-instrument-tm/","text":"乐器演奏（Teachable Machine） ¶ AI 、 Teachable Machine 、 CodeLab Adapter 、 Scratch 步骤 1：构建 ¶ 是什么? ¶ Tips 国内用户可能需要科学上网，才能访问 Teachable Machine :) 记得避免全局翻墙，否则浏览器可能无法连接到 CodeLab Adapter （我们所面临的困难许多时候是人为的） 使用 Teachable Machine 训练一个 AI 助手，教会它认识不同的乐器卡片（可任选），当看到吉他 （guitar）卡片时，在桌子上播放吉他动画，并使用吉他演奏一段音乐；当看到萨克斯（sax）卡片时，在桌子上播放萨克斯动画，并使用萨克斯演奏一段音乐， 利用投影让虚拟形象和实物在一张桌子上互动！ 它是如何工作的? ¶ 使用 Teachable Machine 中的 Image Project ，训练 AI 来识别看书与合上书的不同状态。 使用 CodeLab Adapter 将 Teachable Machine 的识别结果接入到 CodeLab Scratch 中 使用 CodeLab Scratch（ 在线版 、 离线版 皆可）进行编程，让卡通形象、音乐与实物互动。 你需要准备些什么 ¶ CodeLab Scratch CodeLab Adapter 安装 Chrome 浏览器插件： Tampermonkey 点击安装 Tampermonkey 脚本 Teachablemachine_Result.user.js ，使用它来获取 Teachable Machine 的识别结果 投影仪（我使用的是 LG PH450UG-GL 超短焦投影仪 ） 投影仪是可选的，你也可以让动画显示在电脑屏幕上，而不是投影到桌面。记得在屏幕上将舞台最大化，效果比较好。 步骤 2：编程 ¶ 准备工作 ¶ 安装完 Tampermonkey Chrome 浏览器插件和 Teachablemachine_Result.user.js 脚本后，运行下载到本地的 CodeLab Adapter 。 打开 Image Project ，页面应该会弹出提示： connected! ，表示已经将 Teachable Machine 接入 CodeLab Adapter。 接下来，可以开始你的 Teachable Machine 之旅途。我们来展示一个例子。 训练模型 ¶ 在 Teachable Machine 训练你的 AI 助手，你需要教会它识别不同卡片，如果你对 Teachable Machine 不了解，参考我们的介绍文章 CodeLab Adapter 接入 Teachable Machine 。 建立 3 个分类，分别是 guitar 、 sax 、 none （空桌面） 开始添加你的训练样本，完成训练后在页面右边测试它。 如果不满意，可以添加调整样本数据，重新训练，并再次测试它，直到满意为止。 开始在 CodeLab Scratch 中编程 ¶ 在线版与离线版打开方式 如果你是要在线版，直接 点击项目链接 即可。未来我们会直接发布到社区里。 如果你使用离线版，则下载 源码文件 ，使用 CodeLab Scratch 加载它即可。 点击绿旗开始运行程序，将 Scratch 舞台区最大化。 如果你使用投影仪，在黑暗中效果比较好。 黑暗中如何看得见乐器卡片呢？将乐器卡片放在舞台去右上角，参考演示视频里的做法。 步骤 3：发挥想象 ¶ 这儿的核心想法是，使用摄像头捕获到舞台卡片/物体，接着使用 Teachable Machine 训练好的模型来识别它，最后通过编程让 Scratch 中的虚拟角色与识别出的物体互动！在这个想法下，可以玩的东西非常多。 你可以训练你的 AI 助手识别任何你喜欢的玩具，然后与之互动。 诸如拿出一只老虎玩偶放在舞台中，它的朋友会作何反应呢？它的敌人会如何反应呢？舞台里的一只虚拟小猫可能叫了一声，一下子就蹿远了。 构建你自己的故事吧，让真实世界和虚拟世界互动起来。 你也可以通过接入 Home Assistant ， 将整个家庭纳入到故事创作中，老虎出现时，随着一声虎啸，房间里的灯突然熄灭，预知后续如何？我们等待你的家庭剧本！ 参考 ¶ CodeLab Adapter 接入 Teachable Machine 插件（extensions）文档 - Teachable Machine","text_tokens":["卡片","参考","拿出","喜欢","东西","页面","后","接下来","整个","离线","scratch","皆","分别","电脑","玩","科学","_","要","1","了解","任选","可选","动画","反应","3","直接","文件","物体","旅途","国内","它","里","!","应该","我们","乐器","最后","非常","摄像","加载","将","点击","最大化","可能","tips","样本","表示","播放","工作","黑暗","不是","看得","叫","纳入","看到","本地","上将","并","音乐","-","js","社区","在线","上角","助手","吉他","后续","形象","和","如果","玩偶","右边","未来","像头","模型","安装","记得","例子","自己","大化","投影","小猫","些","文档","作何","已经","介绍","空","训练","脚本","萨克","方式","guitar","准备","展示",":","打开","步骤","调整","开方","一张","开始运行","蹿","浏览器","等待","全局","即可","lg","再次","不同","萨克斯","而","在","时","接着","gl","需要","为止","连接"," ","状态","user","对","出现","桌子","出","。","人为","满意","创作","完","时候","一段","数据","版","任何","上书","诸如","右上角","焦","下载","：","程序","sax","翻墙","发布","玩具","重新","个","浏览","下来","插件","开始","用户","右上","卡通","熄灭","connected","一下子","获取","下子","¶","project","让","多","虚拟","teachable","做法","敌人","然后","演示","！","构建","屏幕","困难","上网","教会","许多","最大","比较","互动","会","接入","否则","是","分类","文章","的","实物","machine","项目","codelab","一下","可",")","编程","呢","/","放在","家庭","看得见","可以","克斯","这儿","打开方式","故事","接下","与","结果","一声","一个","?","下","来","adapter","提示","则","视频","识别","2","extensions","吧","ai","通过","预知","中","什么","利用","了","无法","面临","远","突然","合","之","真实","训练样本","虚拟世界","认识","、","tampermonkey","绿旗","直到","不","好","？","进行","去","超短","完成","到","虎啸","如何","想法","ph450ug","你","assistant","老虎","看书","建立",".","想象","摄像头","使用","所","image","；","桌面","核心","（","角色","剧本","none","）","随着","一只","效果","区","我","会弹","房间","投影仪","运行","添加","当","上","也","世界","舞台","源码","发挥","电脑屏幕","灯","teachablemachine","才能","，","测试","捕获","chrome","避免","显示","起来","演奏","链接","就","访问","这个","真实世界","result","朋友","home"],"title":"乐器演奏 (Teachable Machine)","title_tokens":[" ","teachable","乐器","machine","(",")","演奏"]},{"location":"Neverland/musical-instrument-tm/#teachable-machine","text":"AI 、 Teachable Machine 、 CodeLab Adapter 、 Scratch","text_tokens":[" ","teachable","machine","、","scratch","codelab","adapter","ai"],"title":"乐器演奏（Teachable Machine）","title_tokens":[" ","（","teachable","乐器","machine","）","演奏"]},{"location":"Neverland/musical-instrument-tm/#1","text":"","text_tokens":[],"title":"步骤 1：构建","title_tokens":[" ","1","构建","：","步骤"]},{"location":"Neverland/musical-instrument-tm/#_1","text":"Tips 国内用户可能需要科学上网，才能访问 Teachable Machine :) 记得避免全局翻墙，否则浏览器可能无法连接到 CodeLab Adapter （我们所面临的困难许多时候是人为的） 使用 Teachable Machine 训练一个 AI 助手，教会它认识不同的乐器卡片（可任选），当看到吉他 （guitar）卡片时，在桌子上播放吉他动画，并使用吉他演奏一段音乐；当看到萨克斯（sax）卡片时，在桌子上播放萨克斯动画，并使用萨克斯演奏一段音乐， 利用投影让虚拟形象和实物在一张桌子上互动！","text_tokens":["卡片","认识","让","虚拟","萨克","teachable","guitar",":","！","到","困难","一张","上网","教会","科学","许多","互动","浏览器","全局","任选","否则","动画","是","的","不同","实物","machine","萨克斯","使用","所","codelab","国内","在","它","；","可","时",")","需要","连接"," ","（","我们","乐器","）","桌子","可能","tips","克斯","播放","人为","当","一个","上","时候","看到","adapter","并","音乐","一段","助手","吉他","形象","ai","才能","，","和","记得","避免","利用","sax","翻墙","演奏","访问","无法","面临","投影","浏览","用户","训练"],"title":"是什么?","title_tokens":["是","什么","?"]},{"location":"Neverland/musical-instrument-tm/#_2","text":"使用 Teachable Machine 中的 Image Project ，训练 AI 来识别看书与合上书的不同状态。 使用 CodeLab Adapter 将 Teachable Machine 的识别结果接入到 CodeLab Scratch 中 使用 CodeLab Scratch（ 在线版 、 离线版 皆可）进行编程，让卡通形象、音乐与实物互动。","text_tokens":["接入","project","版","上书","。","、","中","看书","的","让","不同","进行","teachable","实物","与","结果","machine","使用","codelab","image","可","离线","到","）","scratch","来","编程","adapter","皆","音乐"," ","（","识别","状态","在线","卡通","合","形象","互动","将","ai","训练","，"],"title":"它是如何工作的?","title_tokens":["它","如何","工作","是","的","?"]},{"location":"Neverland/musical-instrument-tm/#_3","text":"CodeLab Scratch CodeLab Adapter 安装 Chrome 浏览器插件： Tampermonkey 点击安装 Tampermonkey 脚本 Teachablemachine_Result.user.js ，使用它来获取 Teachable Machine 的识别结果 投影仪（我使用的是 LG PH450UG-GL 超短焦投影仪 ） 投影仪是可选的，你也可以让动画显示在电脑屏幕上，而不是投影到桌面。记得在屏幕上将舞台最大化，效果比较好。","text_tokens":["可以","可选","动画","lg","。","效果","是","tampermonkey","脚本","chrome","我","不是",".","的","焦","让","你","安装","好","记得","teachable","投影仪","结果","显示","machine","：","而","使用","codelab","超短","大化","也","在","上","舞台","它","桌面","到","scratch","来","gl","投影","adapter","浏览","result","电脑","屏幕","上将","电脑屏幕"," ","插件","js","（","-","识别","teachablemachine","最大","user","比较","_","最大化","获取","）","ph450ug","点击","，","浏览器"],"title":"你需要准备些什么","title_tokens":["准备","什么","些","需要","你"]},{"location":"Neverland/musical-instrument-tm/#2","text":"","text_tokens":[],"title":"步骤 2：编程","title_tokens":[" ","2","：","步骤","编程"]},{"location":"Neverland/musical-instrument-tm/#_4","text":"安装完 Tampermonkey Chrome 浏览器插件和 Teachablemachine_Result.user.js 脚本后，运行下载到本地的 CodeLab Adapter 。 打开 Image Project ，页面应该会弹出提示： connected! ，表示已经将 Teachable Machine 接入 CodeLab Adapter。 接下来，可以开始你的 Teachable Machine 之旅途。我们来展示一个例子。","text_tokens":["可以","出","和","接入","project","表示","。","tampermonkey","接下","脚本","chrome","页面",".","的","会弹","你","安装","例子","下载","teachable","运行","machine","：","codelab","后","旅途","接下来","一个","完","image","展示","打开","到","来","本地","adapter","浏览","result","提示","!","应该","下来"," ","插件","js","开始","已经","我们","teachablemachine","user","_","之","将","connected","，","浏览器"],"title":"准备工作","title_tokens":["准备","工作"]},{"location":"Neverland/musical-instrument-tm/#_5","text":"在 Teachable Machine 训练你的 AI 助手，你需要教会它识别不同卡片，如果你对 Teachable Machine 不了解，参考我们的介绍文章 CodeLab Adapter 接入 Teachable Machine 。 建立 3 个分类，分别是 guitar 、 sax 、 none （空桌面） 开始添加你的训练样本，完成训练后在页面右边测试它。 如果不满意，可以添加调整样本数据，重新训练，并再次测试它，直到满意为止。","text_tokens":["可以","卡片","样本","接入","ai","了解","参考","测试","如果","。","、","3","是","建立","分类","训练样本","文章","的","页面","右边","再次","直到","不","你","不同","teachable","添加","machine","满意","codelab","后","sax","guitar","在","重新","完成","它","桌面","个","）","adapter","需要","分别","调整","为止","并"," ","（","我们","教会","开始","识别","介绍","空","助手","none","数据","对","训练","，"],"title":"训练模型","title_tokens":["训练","模型"]},{"location":"Neverland/musical-instrument-tm/#codelab-scratch","text":"在线版与离线版打开方式 如果你是要在线版，直接 点击项目链接 即可。未来我们会直接发布到社区里。 如果你使用离线版，则下载 源码文件 ，使用 CodeLab Scratch 加载它即可。 点击绿旗开始运行程序，将 Scratch 舞台区最大化。 如果你使用投影仪，在黑暗中效果比较好。 黑暗中如何看得见乐器卡片呢？将乐器卡片放在舞台去右上角，参考演示视频里的做法。","text_tokens":["卡片","打开方式","参考","版","即可","如果","。","效果","是","中","黑暗","区","直接","绿旗","右上角","未来","的","文件","好","？","下载","投影仪","运行","与","项目","看得","做法","程序","使用","方式","去","codelab","发布","链接","大化","在","舞台","源码","打开","里","它","演示","离线","到","scratch","投影","呢","开方","则"," ","开始运行","我们","开始","放在","视频","社区","在线","，","看得见","最大","乐器","如何","比较","要","右上","上角","会","加载","将","最大化","点击","你"],"title":"开始在 CodeLab Scratch 中编程","title_tokens":[" ","在","开始","scratch","中","编程","codelab"]},{"location":"Neverland/musical-instrument-tm/#3","text":"这儿的核心想法是，使用摄像头捕获到舞台卡片/物体，接着使用 Teachable Machine 训练好的模型来识别它，最后通过编程让 Scratch 中的虚拟角色与识别出的物体互动！在这个想法下，可以玩的东西非常多。 你可以训练你的 AI 助手识别任何你喜欢的玩具，然后与之互动。 诸如拿出一只老虎玩偶放在舞台中，它的朋友会作何反应呢？它的敌人会如何反应呢？舞台里的一只虚拟小猫可能叫了一声，一下子就蹿远了。 构建你自己的故事吧，让真实世界和虚拟世界互动起来。 你也可以通过接入 Home Assistant ， 将整个家庭纳入到故事创作中，老虎出现时，随着一声虎啸，房间里的灯突然熄灭，预知后续如何？我们等待你的家庭剧本！","text_tokens":["卡片","虚拟世界","拿出","喜欢","东西","让","多","虚拟","好","？","teachable","敌人","然后","整个","！","构建","到","scratch","玩","虎啸","蹿","如何","互动","会","想法","你","等待","接入","assistant","老虎","反应","是","的","摄像头","machine","使用","物体","一下","在","它","里","时","接着","编程","呢","核心"," ","/","放在","我们","家庭","最后","非常","摄像","角色","剧本","将","出现","可能","可以","出","这儿","随着","一只","。","故事","房间","与","一声","叫","纳入","创作","也","世界","舞台","下","来","识别","灯","助手","后续","吧","ai","通过","，","和","任何","预知","捕获","诸如","中","玩偶","像头","模型","自己","了","起来","玩具","就","这个","远","小猫","真实世界","作何","朋友","突然","熄灭","之","home","真实","一下子","训练","下子"],"title":"步骤 3：发挥想象","title_tokens":[" ","：","发挥","步骤","3","想象"]},{"location":"Neverland/musical-instrument-tm/#_6","text":"CodeLab Adapter 接入 Teachable Machine 插件（extensions）文档 - Teachable Machine","text_tokens":[" ","插件","（","接入","-","teachable","machine","extensions","codelab","adapter","）","文档"],"title":"参考","title_tokens":["参考"]},{"location":"Neverland/reading-thinking/","text":"读书与思考 ¶ AI 、 Scratch 、 Home Assistant 、 智能家居（smart home） 、 Teachable Machine 步骤 1：构建 ¶ 是什么? ¶ 训练一个 AI 助手，当你在阅读时，自动帮你打开书房的灯；当你合上书开始思考，自动关闭书房的灯，让你沉浸在黑暗里。 它是如何工作的? ¶ 运行 Home Assistant ，接管空间的所有智能设备。 使用 CodeLab Scratch（ 在线版 、 离线版 皆可）的 Home Assistant 扩展，控制智能设备。 使用 Scratch 中的 图片分类积木 ，训练 AI 来识别看书与合上书的不同状态。 你需要准备些什么 ¶ 安装和配置 Home Assistant CodeLab Scratch 智能家居设备（以下是 CodeLab 的推荐清单，任选一项即可） 米家智能家庭套装（ 购买链接 ） Yeelight 彩光灯（ 购买链接 ） 如果你是 Home Assistant 用户，则可以任意使用 任何社区接入的套件 步骤 2：编程 ¶ 在线版与离线版打开方式 如果你是要在线版，直接 点击项目链接 即可。未来我们会直接发布到社区里。 如果你使用离线版，则下载 源码文件 ，使用 Scratch 加载它即可. 加载后填入你之前记下的 token。 在 home button 角色里设置你的 Home Assistant 访问 token； 点击绿旗开始运行程序； 按下 r 按键，添加 看书 样本。舞台区，你应该看到正在看书的摄像头画面； 按下 t 按键，添加 思考 样本。舞台区，你应该看到正在思考（合上书）的摄像头画面； 按下 n 按键，添加 无 样本，此时你既没在看书，也没在思考，桌子上空空如也； 按下 空格 ，开始识别你的桌面状态； 按下 q 案件，暂时结束识别。 提醒 如果关灯后你的房间完全处于黑暗，那么当你再次翻开书，摄像头将看不到你的这个行为！一般来说只有一些光线，它就能看到。如果你的房间遮光效果真的很好，可以考虑使用红外夜视摄像头。 如果它识别地并不准确，观察是否是光线造成的。重复训练，知道你对这个 AI 感到满意。 当然你也可以使用 Teachable Machine 来制作这个项目，它更加直观！ CodeLab Adapter 已经将 Teachable Machine 接入进来了 ！ 步骤 3：发挥想象 ¶ 这儿的核心想法是，使用摄像头捕获到外部世界的状态（翻开书/合上书），接着使用这些数据训练一个 AI 助手，让它对外部世界状态变化作出反馈！在这个想法下，能做的事情可太多啦。 如果你跟我一样是个懒人，则可以训练一个 AI 助手放在厨房，当摄像头识别到我早上第一次穿着睡衣出现在厨房里时，则自动启动整个早餐程序，由于 Home Assistant 已经把你的整个家庭设备加入进来，所以你可以做的事情非常丰富，把你的生活习惯交给自己训练的 AI 来打理，随着你的训练，它会越来越聪明，只有你最清楚自己的习惯，你或许不想由别人的云大脑来监视和服务你，毕竟你可能正光着膀子。 如果你家里有小孩，则可以将摄像头厨房里，让某些危险设备不对孩子的操作做反应，诸如当小孩按下烧水壶时，AI 助手可以告诉 Home Assistant 切断电源。","text_tokens":["¶","那么","打理","yeelight","一样","可太多","早餐","、","外部","越来","绿旗","让","不","好","teachable","智能","关闭","毕竟","正在","知道","方式","不到","后","q","套装","无","一项","购买","案件","暂时","厨房","准备","套件","整个","清楚","这些","打开","！","构建","离线","光线","到","早上","scratch","步骤","家庭设备","设置","直观","加入","皆","开方","电源","开始运行","按下","做","如何","要","最","会","想法","正光","所有","你","一次","r","接入","assistant","1","智能家居","没","完全","任选","既","不想","即可","反应","真的","有","是","看书","3","画面","它会","分类","直接","结束","再次","的",".","能","配置","文件","想象","不同","摄像头","膀子","machine","以下","项目","观察","使用","由于","codelab","翻开","彩光","图片","是否","在","考虑","生活习惯","任意","里","；","它","时","可","按键","桌面","翻开书","地","接着","编程","空空如也","烧","需要","太多","t","应该","核心"," ","（","我们","/","放在","家庭","状态","非常","摄像","角色","进来","加载","将","smart","）","积木","点击","提醒","对","出现","桌子","或许","接管","可以","样本","监视","可能","来说","打开方式","这儿","随着","。","工作","效果","第一次","黑暗","区","某些","空格","我","告诉","房间","更加","运行","与","添加","交给","只有","服务","满意","红外","水壶","所以","读书","推荐","沉浸","当","一个","?","也","上","世界","舞台","源码","下","看到","一般","准确","发挥","来","空空","adapter","睡衣","小孩","自动","则","并","遮光","当然","一些","灯","识别","家居","在线","扩展","社区","2","关灯","助手","很","跟","第一","启动","记下","着","操作","阅读","书房","空间","ai","数据","懒人","版","，","对外部","和","button","任何","是否是","作出","控制","捕获","上书","如果","感到","大脑","诸如","中","思考","填入","米家","危险","未来","像头","聪明","设备","安装","下载","把","对外","孩子","生活","什么","：","自己","切断","程序","token","了","行为","造成","清单","发布","穿着","链接","云","重复","就","此时","丰富","由","访问","帮","之前","这个","一般来说","制作","个","家里","些","n","习惯","啦","开始","夜视","用户","已经","看不到","别人","合","反馈","事情","home","越来越","变化","训练","处于"],"title":"读书与思考","title_tokens":["与","思考","读书"]},{"location":"Neverland/reading-thinking/#_1","text":"AI 、 Scratch 、 Home Assistant 、 智能家居（smart home） 、 Teachable Machine","text_tokens":[" ","（","assistant","teachable","智能家居","智能","家居","machine","、","scratch","）","home","smart","ai"],"title":"读书与思考","title_tokens":["与","思考","读书"]},{"location":"Neverland/reading-thinking/#1","text":"","text_tokens":[],"title":"步骤 1：构建","title_tokens":[" ","1","构建","：","步骤"]},{"location":"Neverland/reading-thinking/#_2","text":"训练一个 AI 助手，当你在阅读时，自动帮你打开书房的灯；当你合上书开始思考，自动关闭书房的灯，让你沉浸在黑暗里。","text_tokens":["上书","。","思考","黑暗","的","让","关闭","沉浸","当","一个","在","打开","里","；","时","帮","自动"," ","开始","灯","，","助手","合","阅读","书房","ai","训练","你"],"title":"是什么?","title_tokens":["是","什么","?"]},{"location":"Neverland/reading-thinking/#_3","text":"运行 Home Assistant ，接管空间的所有智能设备。 使用 CodeLab Scratch（ 在线版 、 离线版 皆可）的 Home Assistant 扩展，控制智能设备。 使用 Scratch 中的 图片分类积木 ，训练 AI 来识别看书与合上书的不同状态。","text_tokens":["接管","assistant","ai","控制","训练","上书","。","、","中","看书","分类","的","设备","不同","运行","智能","与","使用","codelab","图片","可","离线","scratch","来","皆"," ","（","识别","在线","，","扩展","状态","合","home","空间","）","积木","所有","版"],"title":"它是如何工作的?","title_tokens":["它","如何","工作","是","的","?"]},{"location":"Neverland/reading-thinking/#_4","text":"安装和配置 Home Assistant CodeLab Scratch 智能家居设备（以下是 CodeLab 的推荐清单，任选一项即可） 米家智能家庭套装（ 购买链接 ） Yeelight 彩光灯（ 购买链接 ） 如果你是 Home Assistant 用户，则可以任意使用 任何社区接入的套件","text_tokens":["可以","和","接入","assistant","智能家居","任何","任选","yeelight","即可","如果","是","米家","的","配置","设备","安装","你","智能","以下","使用","codelab","推荐","清单","彩光","套装","链接","一项","购买","套件","任意","scratch","则"," ","（","用户","家庭","灯","家居","社区","home","）","，"],"title":"你需要准备些什么","title_tokens":["准备","什么","些","需要","你"]},{"location":"Neverland/reading-thinking/#2","text":"在线版与离线版打开方式 如果你是要在线版，直接 点击项目链接 即可。未来我们会直接发布到社区里。 如果你使用离线版，则下载 源码文件 ，使用 Scratch 加载它即可. 加载后填入你之前记下的 token。 在 home button 角色里设置你的 Home Assistant 访问 token； 点击绿旗开始运行程序； 按下 r 按键，添加 看书 样本。舞台区，你应该看到正在看书的摄像头画面； 按下 t 按键，添加 思考 样本。舞台区，你应该看到正在思考（合上书）的摄像头画面； 按下 n 按键，添加 无 样本，此时你既没在看书，也没在思考，桌子上空空如也； 按下 空格 ，开始识别你的桌面状态； 按下 q 案件，暂时结束识别。 提醒 如果关灯后你的房间完全处于黑暗，那么当你再次翻开书，摄像头将看不到你的这个行为！一般来说只有一些光线，它就能看到。如果你的房间遮光效果真的很好，可以考虑使用红外夜视摄像头。 如果它识别地并不准确，观察是否是光线造成的。重复训练，知道你对这个 AI 感到满意。 当然你也可以使用 Teachable Machine 来制作这个项目，它更加直观！ CodeLab Adapter 已经将 Teachable Machine 接入进来了 ！","text_tokens":["那么","绿旗","不","好","teachable","正在","知道","方式","不到","后","q","无","暂时","案件","打开","！","离线","光线","到","scratch","设置","直观","开方","开始运行","按下","要","会","你","r","接入","assistant","完全","没","既","即可","真的","是","看书","画面","直接","结束","能","再次",".","的","文件","摄像头","项目","machine","观察","使用","codelab","翻开","是否","在","考虑","按键","里","它","；","桌面","翻开书","地","空空如也","t","应该"," ","（","我们","状态","摄像","角色","进来","加载","将","）","对","点击","提醒","桌子","可以","样本","来说","打开方式","。","效果","黑暗","区","空格","房间","更加","运行","与","添加","只有","满意","红外","当","也","上","舞台","源码","看到","一般","准确","来","空空","adapter","则","并","遮光","当然","一些","识别","很","社区","在线","关灯","记下","ai","版","，","button","是否是","上书","如果","感到","填入","思考","未来","像头","下载","程序","token","了","行为","造成","发布","链接","重复","就","此时","访问","这个","之前","一般来说","制作","n","开始","夜视","已经","看不到","合","home","训练","处于"],"title":"步骤 2：编程","title_tokens":[" ","2","：","步骤","编程"]},{"location":"Neverland/reading-thinking/#3","text":"这儿的核心想法是，使用摄像头捕获到外部世界的状态（翻开书/合上书），接着使用这些数据训练一个 AI 助手，让它对外部世界状态变化作出反馈！在这个想法下，能做的事情可太多啦。 如果你跟我一样是个懒人，则可以训练一个 AI 助手放在厨房，当摄像头识别到我早上第一次穿着睡衣出现在厨房里时，则自动启动整个早餐程序，由于 Home Assistant 已经把你的整个家庭设备加入进来，所以你可以做的事情非常丰富，把你的生活习惯交给自己训练的 AI 来打理，随着你的训练，它会越来越聪明，只有你最清楚自己的习惯，你或许不想由别人的云大脑来监视和服务你，毕竟你可能正光着膀子。 如果你家里有小孩，则可以将摄像头厨房里，让某些危险设备不对孩子的操作做反应，诸如当小孩按下烧水壶时，AI 助手可以告诉 Home Assistant 切断电源。","text_tokens":["打理","一样","可太多","早餐","外部","越来","让","不","毕竟","厨房","清楚","整个","这些","！","由","到","早上","家庭设备","电源","加入","按下","做","最","想法","正光","一次","你","assistant","不想","反应","有","是","它会","能","的","摄像头","膀子","使用","由于","翻开","在","生活习惯","它","里","时","接着","翻开书","烧","太多","核心","（","/"," ","放在","家庭","状态","非常","摄像","进来","将","出现","）","或许","对","可能","可以","监视","这儿","随着","。","第一次","某些","我","告诉","交给","只有","服务","水壶","所以","当","一个","世界","下","来","睡衣","小孩","则","自动","识别","聪明","第一","跟","助手","启动","着","操作","懒人","ai","数据","，","对外部","和","作出","捕获","上书","如果","大脑","诸如","危险","像头","设备","把","对外","孩子","生活","自己","切断","程序","穿着","云","丰富","家里","这个","个","习惯","啦","已经","别人","合","反馈","事情","home","越来越","变化","训练"],"title":"步骤 3：发挥想象","title_tokens":[" ","：","发挥","步骤","3","想象"]},{"location":"Neverland/tpl/","text":"读书与思考 ¶ AI 步骤1: 构建 ¶ 是什么? ¶ 训练一个AI助手，当你在阅读时，自动帮你打开书房的灯; 当你合上书开始思考，自动关闭书房的灯，让你沉浸在黑暗里。 它是如何工作的? ¶ 运行Home Assistant ，接管空间的所有智能设备 使用CodeLab Scratch( 在线版 、 离线版 皆可)的Home Assistant扩展，控制智能设备 使用Scratch中的 声音响度积木 监测环境中的声音，当声音响度超过某个值，关灯！ 你需要准备些什么 ¶ 安装和配置Home Assistant CodeLab Scratch 智能家居设备(以下是CodeLab的推荐清单，任选一项即可) 米家智能家庭套装( 购买链接 ) Yeelight彩光灯( 购买链接 ) 如果你是Home Assistant用户，则可以任意使用 任何社区接入的套件 步骤2: 编程 ¶ 在线版与离线版打开方式 如果你是要在线版，直接 点击项目链接 即可。未来我们会直接发布到社区里。 如果你使用离线版，则下载 源码文件 ,使用Scratch加载它即可. 加载后填入你之前记下的token。 步骤3: 发挥想象 ¶ 现在你可以使用CodeLab Scratch的Home Assistant插件自由的编程啦，试着与Scratch里其他有趣的积木互动吧。 如果你想让程序只对响指声作出反应，甚至只对你的响指声作出反应都是可能的，使用AI来做到这点！ CodeLab Adapter已经将Teachable Machine接入进来了 ，你可以使用声音、肢体、各种物体与你的房间进行互动！","text_tokens":["¶","yeelight","、","响度","让","进行","teachable","智能","关闭","方式","某个","后","套装","一项","购买","准备","套件","其他",":","打开","！","构建","离线","(","到","scratch","步骤",",","皆","开方","有趣","超过","如何","要","互动","会","做到","所有","你","接入","assistant","1","智能家居","各种","任选","即可","只","反应","是","3","直接","的",".","想象","配置","文件","自由","值","以下","项目","machine","使用","物体","codelab","彩光","在","任意","里","它","可","时",")","编程","需要"," ","我们","家庭","肢体","进来","加载","将","对","积木","点击","都","可能","接管","可以","打开方式","。","工作","黑暗","房间","试着","运行","与","甚至","读书","推荐","沉浸","当","一个","?","现在","想","源码","发挥","来",";","adapter","自动","则","灯","家居","在线","扩展","社区","2","关灯","助手","记下","阅读","书房","空间","ai","吧","版","，","和","任何","作出","控制","声","上书","如果","中","思考","填入","米家","监测","未来","声音","设备","安装","下载","响指","什么","程序","环境","token","了","作出反应","清单","发布","链接","这点","帮","之前","些","插件","啦","开始","用户","已经","合","home","训练"],"title":"读书与思考","title_tokens":["与","思考","读书"]},{"location":"Neverland/tpl/#_1","text":"AI","text_tokens":["ai"],"title":"读书与思考","title_tokens":["与","思考","读书"]},{"location":"Neverland/tpl/#1","text":"","text_tokens":[],"title":"步骤1: 构建","title_tokens":[" ","1",":","构建","步骤"]},{"location":"Neverland/tpl/#_2","text":"训练一个AI助手，当你在阅读时，自动帮你打开书房的灯; 当你合上书开始思考，自动关闭书房的灯，让你沉浸在黑暗里。","text_tokens":["上书","。","思考","黑暗","的","让","关闭","沉浸","当","一个","在","打开","里","时","帮",";","自动"," ","开始","灯","，","助手","合","阅读","书房","ai","训练","你"],"title":"是什么?","title_tokens":["是","什么","?"]},{"location":"Neverland/tpl/#_3","text":"运行Home Assistant ，接管空间的所有智能设备 使用CodeLab Scratch( 在线版 、 离线版 皆可)的Home Assistant扩展，控制智能设备 使用Scratch中的 声音响度积木 监测环境中的声音，当声音响度超过某个值，关灯！","text_tokens":["接管","assistant","控制","、","中","响度","监测","的","声音","设备","运行","智能","值","使用","环境","codelab","某个","当","可","！","离线","(","scratch",")","皆"," ","超过","在线","，","扩展","关灯","home","空间","积木","所有","版"],"title":"它是如何工作的?","title_tokens":["它","如何","工作","是","的","?"]},{"location":"Neverland/tpl/#_4","text":"安装和配置Home Assistant CodeLab Scratch 智能家居设备(以下是CodeLab的推荐清单，任选一项即可) 米家智能家庭套装( 购买链接 ) Yeelight彩光灯( 购买链接 ) 如果你是Home Assistant用户，则可以任意使用 任何社区接入的套件","text_tokens":["可以","和","接入","assistant","智能家居","任何","任选","yeelight","即可","如果","是","米家","的","配置","设备","安装","你","智能","以下","使用","codelab","推荐","清单","彩光","套装","链接","一项","购买","套件","任意","(","scratch",")","则"," ","用户","家庭","灯","家居","社区","home","，"],"title":"你需要准备些什么","title_tokens":["准备","什么","些","需要","你"]},{"location":"Neverland/tpl/#2","text":"在线版与离线版打开方式 如果你是要在线版，直接 点击项目链接 即可。未来我们会直接发布到社区里。 如果你使用离线版，则下载 源码文件 ,使用Scratch加载它即可. 加载后填入你之前记下的token。","text_tokens":["打开方式","版","即可","如果","。","是","填入","直接","未来",".","的","文件","下载","与","项目","使用","方式","token","后","发布","链接","源码","打开","里","它","离线","之前","到",",","scratch","开方","则"," ","我们","社区","在线","，","要","记下","会","加载","点击","你"],"title":"步骤2: 编程","title_tokens":[" ",":","2","步骤","编程"]},{"location":"Neverland/tpl/#3","text":"现在你可以使用CodeLab Scratch的Home Assistant插件自由的编程啦，试着与Scratch里其他有趣的积木互动吧。 如果你想让程序只对响指声作出反应，甚至只对你的响指声作出反应都是可能的，使用AI来做到这点！ CodeLab Adapter已经将Teachable Machine接入进来了 ，你可以使用声音、肢体、各种物体与你的房间进行互动！","text_tokens":["可以","接入","assistant","ai","各种","作出","声","只","反应","。","如果","、","是","的","声音","让","房间","你","试着","进行","teachable","自由","与","响指","machine","甚至","程序","使用","物体","codelab","了","作出反应","现在","其他","想","里","这点","！","scratch","来","编程","adapter"," ","插件","啦","有趣","已经","肢体","home","互动","做到","吧","将","对","积木","进来","，","都","可能"],"title":"步骤3: 发挥想象","title_tokens":[" ",":","发挥","步骤","3","想象"]},{"location":"Neverland/yeelight/","text":"","text_tokens":[],"title":"Yeelight","title_tokens":["yeelight"]},{"location":"Python_Projects/I_am_reading/","text":"I am reading! ¶ 依赖 ¶ 依赖 需要身处CodeLab Neverland空间里 项目介绍 ¶ 你在房间里看《权力的游戏》，当房门突然被打开时，屏幕自动切换到阅读界面。 思路 ¶ 在 Neverland 中使用 HANode 基类与空间中的智能家居交互: 当 门窗传感器 感应到门被推开时，将信号报告给电脑，将界面切换到读书 App。 涉及的知识 ¶ 继承 面向对象（OOP） subprocess：从 Python 中调用系统命令 函数调用 CodeLab Adapter Longan 插件 想象空间 ¶ 使用 Python 为整个空间编程！ 示例 ¶ 项目源码 ¶ neverland_i_am_reading.py 使用说明 ¶ 步骤 1：安装 Python ¶ 建议通过搜索引擎，学习如何安装 Python3( >=3.6 ). 或者参考 python.org Python 3 Installation & Setup Guide 步骤 2：安装依赖 ¶ pip install codelab_adapter_client --upgrade 步骤 3：下载源码 ¶ 将 项目源码 复制或下载到本地。 步骤 4：运行 ¶ python neverland_i_am_reading.py 你的创作 ¶ 一些建议： 关上门之后你想触发什么行为？ 看看其他的例子： examples 试试 Neverland 里的其他智能设备","text_tokens":["¶","参考","为","或者","传感器","install","感应","？","智能","切换","系统命令","触发","面向对象","subprocess","门","整个","其他",":","系统","打开","！","到","(","调用","步骤","屏幕","电脑","传感","继承","3.6","installation","给","如何","_","试试","《","你","hanode","索引","1","智能家居","3","&","对象","的","想象",".","项目","4","python3","使用","codelab",">","信号","在","关上门","搜索","里","时","函数",")","编程","!","需要","报告"," ","（","org","am","之后","说明","python","将","app","）","i","基类","关上","py","知识","longan","看看","。","房间","引擎","被","运行","与","setup","读书","当","推开","guide","创作","学习","看","面向","想","依赖","源码","上门","本地","adapter","自动","函数调用","-","一些","家居","2","或","neverland","阅读","感器","门窗","空间","界面","示例","，","通过","examples","reading","从","中","建议","交互","设备","安装","例子","下载","权力","什么","：","行为","身处","pip","涉及","oop","=","思路","upgrade","搜索引擎","插件","》","突然","client","复制","房门","介绍","命令","游戏"],"title":"I am reading!","title_tokens":[" ","reading","am","!","i"]},{"location":"Python_Projects/I_am_reading/#i-am-reading","text":"","text_tokens":[],"title":"I am reading!","title_tokens":[" ","reading","am","!","i"]},{"location":"Python_Projects/I_am_reading/#_1","text":"依赖 需要身处CodeLab Neverland空间里","text_tokens":[" ","依赖","里","neverland","codelab","空间","需要","身处"],"title":"依赖","title_tokens":["依赖"]},{"location":"Python_Projects/I_am_reading/#_2","text":"你在房间里看《权力的游戏》，当房门突然被打开时，屏幕自动切换到阅读界面。","text_tokens":["。","的","房间","你","被","权力","切换","当","在","看","打开","里","时","到","屏幕","自动","》","突然","房门","阅读","界面","游戏","《","，"],"title":"项目介绍","title_tokens":["介绍","项目"]},{"location":"Python_Projects/I_am_reading/#_3","text":"在 Neverland 中使用 HANode 基类与空间中的智能家居交互: 当 门窗传感器 感应到门被推开时，将信号报告给电脑，将界面切换到读书 App。","text_tokens":["app","智能家居","传感器","。","中","感应","的","交互","空间","被","智能","与","切换","使用","读书","当","推开","信号","在","门",":","时","到","电脑","报告"," ","传感","家居","给","neverland","感器","将","门窗","界面","，","基类","hanode"],"title":"思路","title_tokens":["思路"]},{"location":"Python_Projects/I_am_reading/#_4","text":"继承 面向对象（OOP） subprocess：从 Python 中调用系统命令 函数调用 CodeLab Adapter Longan 插件","text_tokens":["longan","从","中","对象","：","系统命令","面向对象","codelab","subprocess","面向","oop","系统","函数","调用","adapter"," ","继承","（","函数调用","插件","命令","python","）"],"title":"涉及的知识","title_tokens":["知识","涉及","的"]},{"location":"Python_Projects/I_am_reading/#_5","text":"使用 Python 为整个空间编程！","text_tokens":[" ","整个","为","！","使用","编程","python","空间"],"title":"想象空间","title_tokens":["想象","空间"]},{"location":"Python_Projects/I_am_reading/#_6","text":"","text_tokens":[],"title":"示例","title_tokens":["示例"]},{"location":"Python_Projects/I_am_reading/#_7","text":"neverland_i_am_reading.py","text_tokens":["reading","am","py","_","neverland","i","."],"title":"项目源码","title_tokens":["项目","源码"]},{"location":"Python_Projects/I_am_reading/#_8","text":"","text_tokens":[],"title":"使用说明","title_tokens":["说明","使用"]},{"location":"Python_Projects/I_am_reading/#1-python","text":"建议通过搜索引擎，学习如何安装 Python3( >=3.6 ). 或者参考 python.org Python 3 Installation & Setup Guide","text_tokens":["参考","或者","3","&","建议","通过",".","引擎","安装","setup","python3","guide",">","学习","=","搜索","(",")","搜索引擎"," ","org","3.6","installation","如何","python","，","索引"],"title":"步骤 1：安装 Python","title_tokens":[" ","安装","1","：","步骤","python"]},{"location":"Python_Projects/I_am_reading/#2","text":"pip install codelab_adapter_client --upgrade","text_tokens":[" ","-","client","install","_","upgrade","codelab","adapter","pip"],"title":"步骤 2：安装依赖","title_tokens":[" ","安装","依赖","2","：","步骤"]},{"location":"Python_Projects/I_am_reading/#3","text":"将 项目源码 复制或下载到本地。","text_tokens":[" ","下载","复制","源码","或","项目","。","到","本地","将"],"title":"步骤 3：下载源码","title_tokens":[" ","下载","源码","：","步骤","3"]},{"location":"Python_Projects/I_am_reading/#4","text":"python neverland_i_am_reading.py","text_tokens":[" ","reading","am","py","_","neverland","python","i","."],"title":"步骤 4：运行","title_tokens":[" ","运行","：","4","步骤"]},{"location":"Python_Projects/I_am_reading/#_9","text":"一些建议： 关上门之后你想触发什么行为？ 看看其他的例子： examples 试试 Neverland 里的其他智能设备","text_tokens":["关上","看看","建议","的","设备","？","例子","智能","什么","：","触发","行为","关上门","想","其他","上门","里"," ","一些","之后","试试","neverland","你","examples"],"title":"你的创作","title_tokens":["的","你","创作"]},{"location":"Python_Projects/install_python/","text":"安装 Python3 ( Install Python3 ) ¶ 提醒开发者 本地即便没有安装 Python3，CodeLab Adapter 也能正常运行( extension )，如果你想使用 Adapter Node (诸如 node_vector ) ，则需要在本地有 Python3 环境。 安装了 Python3 之后， Adapter 将自动与其关联， 第三方公司/开发者能够使用 Python 生态中的所有资源，为用户去构建新的扩展( extension / node )，这样第三方公司能够将各类 AI /硬件/服务 接入进来 。这为 Adapter 带来了几乎无限的可扩展性。值得注意的事，这种方式的时间成本极低，你只需要构建插件业务逻辑，其他的一切都是免费得到的，从跨平台到强大的连接能力，参考 jupyterlab 在 CodeLab Adapter 中，通过点击查看环境，你可以看到本地Python环境是否存在。 你将看到: 如果你看到的信息和上图类似，则说明你本地已经安装了 Python3，请确保 Python3 版本 >= 3.6 。 如果你没有安装过Python3， 本文将引导你安装它。 Windows用户 ¶ !!! Windows10用户，需要到应用商店里安装Python(微软的强制要求)。或者参考 管理应用执行别名 如果之前没有安装过Python3， 推荐下载安装 Python3.7 。下载完成后，点击安装即可。 如果你之前安装过Python3，但版本低于 3.6 , 建议卸载后，再安装。 MacOS用户 ¶ MacOS自带了 Python3，如果你看到系统自带的 Python3 版本低于**3.6**， 推荐下载安装 Python3.7 ， 下载完成后，点击安装即可。 提醒 如果你是开发者，你的本地环境里可能有很多个版本的 Python3 环境，建议使用 pyenv 来管理它。你可以在配置文件里， 指定 Adapter 使用的 Python 版本 。 Linux用户 ¶ Linux 自带了 Python3，如果你看到系统自带的 Python3 版本低于**3.6**， 推荐使用 pyenv 安装新的 Python3 版本。 你可以在配置文件里， 指定 Adapter 使用的 Python3 版本 。 安装完成之后, 点击 刷新环境 再次点击 查看环境，你应该可以看到本地Python环境信息。","text_tokens":["¶","参考","install","为","或者","逻辑","低于","关联","得到","开发","免费","配置文件","类似","去","方式","成本","后","自带","跨平台","其他","新",":","完成","系统","构建","可扩展性","(","到","强大","能力",",","即便","强制","执行","平台","图","3.6","但","_","所有","你","接入","*","linux","只","windows","即可","有","vector","带来","是","能","再次","与其","的","配置","文件","没有","python3","使用","codelab",">","查看","是否","在","几乎","它","里","下载安装",")","!","需要","扩展性","连接"," ","/","应该","引导","之后","三方","说明","注意","进来","管理","将","python","极低","提醒","点击","可能","可以","过","指定","别名","。","存在","macos","pyenv","资源","应用","硬件","运行","服务","推荐","无限","也","展性","一切都是","上","想","看到","卸载","请","来","本地","确保","adapter","一切","则","自动","信息","python3.7","各类","windows10","生态","扩展","开发者","ai","，","通过","很多","和","第三方","业务","如果","正常","诸如","从","中","建议","安装","下载","版本","商店","环境","了","值得注意","extension","第三","公司","=","事","本文","之前","能够","再","个","值得","这为","微软","插件","node","用户","已经","刷新","这种","jupyterlab","这样","时间","要求"],"title":"安装Python.md","title_tokens":["安装","md",".","python"]},{"location":"Python_Projects/install_python/#python3-install-python3","text":"提醒开发者 本地即便没有安装 Python3，CodeLab Adapter 也能正常运行( extension )，如果你想使用 Adapter Node (诸如 node_vector ) ，则需要在本地有 Python3 环境。 安装了 Python3 之后， Adapter 将自动与其关联， 第三方公司/开发者能够使用 Python 生态中的所有资源，为用户去构建新的扩展( extension / node )，这样第三方公司能够将各类 AI /硬件/服务 接入进来 。这为 Adapter 带来了几乎无限的可扩展性。值得注意的事，这种方式的时间成本极低，你只需要构建插件业务逻辑，其他的一切都是免费得到的，从跨平台到强大的连接能力，参考 jupyterlab 在 CodeLab Adapter 中，通过点击查看环境，你可以看到本地Python环境是否存在。 你将看到: 如果你看到的信息和上图类似，则说明你本地已经安装了 Python3，请确保 Python3 版本 >= 3.6 。 如果你没有安装过Python3， 本文将引导你安装它。","text_tokens":["参考","为","逻辑","关联","得到","开发","免费","类似","去","方式","成本","跨平台","其他","新",":","构建","可扩展性","(","到","强大","能力","即便","平台","图","3.6","_","所有","你","接入","只","有","vector","带来","能","与其","的","没有","python3","使用","codelab",">","查看","是否","在","几乎","它",")","需要","扩展性","连接"," ","/","引导","之后","三方","说明","注意","进来","将","python","极低","提醒","点击","可以","过","。","存在","资源","硬件","运行","服务","无限","也","展性","一切都是","上","想","看到","请","本地","确保","adapter","一切","则","自动","信息","各类","生态","扩展","开发者","ai","，","通过","和","第三方","业务","如果","正常","诸如","从","中","安装","版本","环境","了","值得注意","extension","第三","公司","=","事","本文","能够","值得","这为","插件","node","用户","已经","这种","jupyterlab","这样","时间"],"title":"安装 Python3 ( Install Python3 )","title_tokens":[" ","安装","install","(","python3",")"]},{"location":"Python_Projects/install_python/#windows","text":"!!! Windows10用户，需要到应用商店里安装Python(微软的强制要求)。或者参考 管理应用执行别名 如果之前没有安装过Python3， 推荐下载安装 Python3.7 。下载完成后，点击安装即可。 如果你之前安装过Python3，但版本低于 3.6 , 建议卸载后，再安装。","text_tokens":["过","参考","或者","即可","别名","。","如果","低于","建议","的","应用","安装","你","下载","版本","商店","没有","python3","推荐","后","完成","里","之前","卸载","到","(",")","下载安装",",","再","!","需要","微软","强制","执行"," ","python3.7","用户","windows10","3.6","但","管理","python","要求","点击","，"],"title":"Windows用户","title_tokens":["windows","用户"]},{"location":"Python_Projects/install_python/#macos","text":"MacOS自带了 Python3，如果你看到系统自带的 Python3 版本低于**3.6**， 推荐下载安装 Python3.7 ， 下载完成后，点击安装即可。 提醒 如果你是开发者，你的本地环境里可能有很多个版本的 Python3 环境，建议使用 pyenv 来管理它。你可以在配置文件里， 指定 Adapter 使用的 Python 版本 。","text_tokens":["可以","很多","指定","*","即可","如果","。","macos","有","是","低于","建议","pyenv","的","配置","开发","文件","安装","下载","版本","配置文件","python3","环境","使用","了","推荐","自带","后","提醒","在","系统","完成","看到","里","它","个","下载安装","来","本地","adapter","python3.7"," ","3.6","，","开发者","管理","python","点击","你","可能"],"title":"MacOS用户","title_tokens":["macos","用户"]},{"location":"Python_Projects/install_python/#linux","text":"Linux 自带了 Python3，如果你看到系统自带的 Python3 版本低于**3.6**， 推荐使用 pyenv 安装新的 Python3 版本。 你可以在配置文件里， 指定 Adapter 使用的 Python3 版本 。 安装完成之后, 点击 刷新环境 再次点击 查看环境，你应该可以看到本地Python环境信息。","text_tokens":["可以","指定","*","linux","如果","。","低于","pyenv","的","再次","配置","文件","安装","版本","配置文件","python3","使用","环境","了","推荐","自带","查看","在","新","系统","完成","看到","里",",","本地","adapter","应该","信息"," ","3.6","刷新","，","之后","python","点击","你"],"title":"Linux用户","title_tokens":["用户","linux"]},{"location":"Python_Projects/introduction/","text":"介绍 ¶ A computer is an instrument whose music is ideas -- Alan Kay 之所以在面向对象中发明继承机制，是为了让入门者通过继承，在一开始就可以真正玩起来，而无需对细节有太多了解 -- Alan Kay 欢迎来到 Python 项目文档。 围绕《Mindstorms》的 microworld 概念 与《终生幼儿园》的 4P （Projects, Passion, Peers, Play） 理念构建 projects。","text_tokens":["¶","可以","a","来到","passion","了解","alan","music","。","中","whose","是","microworld","an","对象","instrument","通过","玩起来","细节","的","让","play","computer","理念","mindstorms","与","欢迎","有太多","项目","机制","而","所以","4p","面向对象","起来","入门","终生","在","kay","面向","就","玩起","围绕","幼儿园","概念","is","构建","发明",",","）","之所以","文档","太多","ideas","projects"," ","-","继承","开始","》","无需","幼儿","真正","介绍","（","一","python","对","peers","《","入门者","，","为了"],"title":"介绍(introduction)","title_tokens":["介绍",")","introduction","("]},{"location":"Python_Projects/introduction/#_1","text":"A computer is an instrument whose music is ideas -- Alan Kay 之所以在面向对象中发明继承机制，是为了让入门者通过继承，在一开始就可以真正玩起来，而无需对细节有太多了解 -- Alan Kay 欢迎来到 Python 项目文档。 围绕《Mindstorms》的 microworld 概念 与《终生幼儿园》的 4P （Projects, Passion, Peers, Play） 理念构建 projects。","text_tokens":["可以","a","来到","passion","了解","alan","music","。","中","whose","是","microworld","an","对象","instrument","通过","玩起来","细节","的","让","play","computer","理念","mindstorms","与","欢迎","有太多","项目","机制","而","所以","4p","面向对象","起来","入门","终生","在","kay","面向","就","玩起","围绕","幼儿园","概念","is","构建","发明",",","）","之所以","文档","太多","ideas","projects"," ","-","继承","开始","》","无需","幼儿","真正","（","一","python","对","peers","《","入门者","，","为了"],"title":"介绍","title_tokens":["介绍"]},{"location":"Python_Projects/project-list/","text":"项目列表 ¶ Python对象的连接器：EIM 插件 EasyOCR 聊天机器人 codelab_adapter_extensions : 目前所有内置的Adapter插件都是Python项目！","text_tokens":["¶","eim","是","easyocr","对象","的","目前","项目","：","机器人","codelab","连接器",":","！","adapter","连接"," ","插件","机器","聊天","接器","_","列表","extensions","python","内置","所有","都"],"title":"项目列表","title_tokens":["列表","项目"]},{"location":"Python_Projects/project-list/#_1","text":"Python对象的连接器：EIM 插件 EasyOCR 聊天机器人 codelab_adapter_extensions : 目前所有内置的Adapter插件都是Python项目！","text_tokens":["eim","是","easyocr","对象","的","目前","项目","：","机器人","codelab","连接器",":","！","adapter","连接"," ","插件","机器","聊天","接器","_","extensions","python","内置","所有","都"],"title":"项目列表","title_tokens":["列表","项目"]},{"location":"Python_Projects/python_scratch/","text":"Python 与 Scratch ¶ 你可以使用Python来增强Scratch，使用 Python 为 Scratch引入新的能力: python eval kernel python exec kernel 如果遇到问题，可以: 在此讨论","text_tokens":["¶","可以","此","为","如果","的","你","与","使用","eval","在","新",":","scratch","来","能力","exec"," ","增强","引入","python","讨论","遇到","，","问题","kernel"],"title":"Python 与 Scratch","title_tokens":[" ","scratch","与","python"]},{"location":"Python_Projects/python_scratch/#python-scratch","text":"你可以使用Python来增强Scratch，使用 Python 为 Scratch引入新的能力: python eval kernel python exec kernel 如果遇到问题，可以: 在此讨论","text_tokens":["可以","此","为","如果","的","你","使用","eval","在","新",":","scratch","来","能力","exec"," ","增强","引入","python","讨论","遇到","，","问题","kernel"],"title":"Python 与 Scratch","title_tokens":[" ","scratch","与","python"]},{"location":"Scratch_Projects/cube_symphony/","text":"魔方交响乐 ¶ 依赖 ¶ 依赖 需要身处CodeLab Neverland空间里 项目介绍 ¶ 使用 Aqara 魔方控制器进行交互音乐演奏。 思路 ¶ 在 Neverland 中使用 Longan 积木与空间中的智能家居交互：将魔方控制器用作传感器，进行交互式音乐创作。 涉及的知识 ¶ CodeLab Adapter Longan 插件 音乐 积木 乐器 节拍 音符 演奏速度 声音 积木 音量 音调 音效 左右平衡 事件 积木 控制 积木 变量 积木 运算 积木 想象空间 ¶ 与一群朋友一起交互创作 示例 ¶ 项目地址 ¶ 魔方交响乐 使用说明 ¶ 步骤 1：打开 Codelab Adapter ¶ 双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。 打开 extension_longan 插件. 步骤 2：打开项目 ¶ 魔方交响乐 开始使用 ¶ 根据项目注释里的 使用说明 操作。 你的创作 ¶ 一些建议： 挑选你喜欢的乐器组合 尝试不同节奏 试试魔方控制器的多种交互方式 摇晃 敲击两下 翻转 90 度 翻转 180 度 ... 试试 Longan 的其他传感器 将灯光效果也纳入进来！ 最近有朋友生日吗？为 Ta 创作一个生日 party 秀吧！","text_tokens":["¶","aqara","一群","左右","秀","为","传感器","音效","度","音调","喜欢","交互方式","？","进行","智能","音乐演奏","注释","地址","默认","方式","节奏","其他","打开","！","节拍","party","步骤","传感","交响","变量","_","试试","你","浏览器","尝试","1","智能家居","有","的","想象",".","180","两下","不同","项目","敲击","灯光效果","使用","codelab","魔方","吗","在","事件","里","需要","90","摇晃"," ","乐器","之后","一起","说明","进来","...","将","积木","光效","挑选","知识","longan","音符","。","翻转","效果","根据","与","双击","音量","创作","纳入","一个","也","依赖","用作","运算","adapter","音乐","一些","家居","2","启动","操作","neverland","感器","吧","示例","空间","，","ta","控制","速度","中","建议","声音","交互","音乐创作","：","组合","身处","演奏","extension","涉及","交互式","思路","多种","交响乐","控制器","灯光","浏览","插件","平衡","朋友","开始","介绍","生日","最近"],"title":"cube symphony","title_tokens":[" ","cube","symphony"]},{"location":"Scratch_Projects/cube_symphony/#_1","text":"","text_tokens":[],"title":"魔方交响乐","title_tokens":["交响","魔方","交响乐"]},{"location":"Scratch_Projects/cube_symphony/#_2","text":"依赖 需要身处CodeLab Neverland空间里","text_tokens":[" ","依赖","里","neverland","codelab","空间","需要","身处"],"title":"依赖","title_tokens":["依赖"]},{"location":"Scratch_Projects/cube_symphony/#_3","text":"使用 Aqara 魔方控制器进行交互音乐演奏。","text_tokens":[" ","aqara","进行","控制","。","音乐演奏","使用","交互","控制器","演奏","音乐","魔方"],"title":"项目介绍","title_tokens":["介绍","项目"]},{"location":"Scratch_Projects/cube_symphony/#_4","text":"在 Neverland 中使用 Longan 积木与空间中的智能家居交互：将魔方控制器用作传感器，进行交互式音乐创作。","text_tokens":["智能家居","控制","longan","传感器","。","中","的","交互","音乐创作","进行","智能","与","：","使用","创作","魔方","在","交互式","用作","控制器","音乐"," ","传感","家居","neverland","感器","将","空间","积木","，"],"title":"思路","title_tokens":["思路"]},{"location":"Scratch_Projects/cube_symphony/#_5","text":"CodeLab Adapter Longan 插件 音乐 积木 乐器 节拍 音符 演奏速度 声音 积木 音量 音调 音效 左右平衡 事件 积木 控制 积木 变量 积木 运算 积木","text_tokens":["左右","音符","longan","音效","控制","速度","音调","声音","音量","codelab","演奏","事件","节拍","运算","adapter","音乐"," ","插件","平衡","乐器","变量","积木"],"title":"涉及的知识","title_tokens":["知识","涉及","的"]},{"location":"Scratch_Projects/cube_symphony/#_6","text":"与一群朋友一起交互创作","text_tokens":["一群","朋友","与","一起","创作","交互"],"title":"想象空间","title_tokens":["想象","空间"]},{"location":"Scratch_Projects/cube_symphony/#_7","text":"","text_tokens":[],"title":"示例","title_tokens":["示例"]},{"location":"Scratch_Projects/cube_symphony/#_8","text":"魔方交响乐","text_tokens":["交响","魔方","交响乐"],"title":"项目地址","title_tokens":["地址","项目"]},{"location":"Scratch_Projects/cube_symphony/#_9","text":"","text_tokens":[],"title":"使用说明","title_tokens":["说明","使用"]},{"location":"Scratch_Projects/cube_symphony/#1-codelab-adapter","text":"双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。 打开 extension_longan 插件.","text_tokens":[" ","插件",".","浏览","打开","之后","启动","longan","双击","。","_","默认","codelab","adapter","将","extension","，","浏览器"],"title":"步骤 1：打开 Codelab Adapter","title_tokens":[" ","1","打开","：","步骤","codelab","adapter"]},{"location":"Scratch_Projects/cube_symphony/#2","text":"魔方交响乐","text_tokens":["交响","魔方","交响乐"],"title":"步骤 2：打开项目","title_tokens":[" ","打开","2","项目","：","步骤"]},{"location":"Scratch_Projects/cube_symphony/#_10","text":"根据项目注释里的 使用说明 操作。","text_tokens":[" ","里","项目","。","说明","根据","注释","使用","操作","的"],"title":"开始使用","title_tokens":["使用","开始"]},{"location":"Scratch_Projects/cube_symphony/#_11","text":"一些建议： 挑选你喜欢的乐器组合 尝试不同节奏 试试魔方控制器的多种交互方式 摇晃 敲击两下 翻转 90 度 翻转 180 度 ... 试试 Longan 的其他传感器 将灯光效果也纳入进来！ 最近有朋友生日吗？为 Ta 创作一个生日 party 秀吧！","text_tokens":["光效","尝试","挑选","秀","为","控制","翻转","longan","传感器","度","效果","有","喜欢","建议","的","交互","180","交互方式","两下","？","不同","生日","：","组合","敲击","灯光效果","方式","节奏","纳入","创作","魔方","吗","一个","也","其他","！","多种","party","控制器","灯光","90","摇晃"," ","传感","一些","朋友","乐器","试试","进来","...","感器","将","吧","你","最近","ta"],"title":"你的创作","title_tokens":["的","你","创作"]},{"location":"Scratch_Projects/i_am_reading/","text":"I am reading ¶ 项目源码","text_tokens":[" ","¶","reading","am","源码","项目","i"],"title":"正在读书","title_tokens":["正在","读书"]},{"location":"Scratch_Projects/i_am_reading/#i-am-reading","text":"项目源码","text_tokens":["项目","源码"],"title":"I am reading","title_tokens":[" ","reading","i","am"]},{"location":"Scratch_Projects/introduction/","text":"介绍 ¶ real playing -- Alan Kay 欢迎来到 Scratch 项目文档。 围绕《Mindstorms》的 microworld 概念 与 《终生幼儿园》的 4P （Projects, Passion, Peers, Play）理念 构建 projects。","text_tokens":["¶","passion","来到","alan","。","microworld","的","理念","mindstorms","与","欢迎","项目","4p","终生","围绕","kay","幼儿园","概念","构建","real","scratch",",","）","文档","playing","projects"," ","-","幼儿","》","（","介绍","play","peers","《"],"title":"介绍(introduction)","title_tokens":["介绍",")","introduction","("]},{"location":"Scratch_Projects/introduction/#_1","text":"real playing -- Alan Kay 欢迎来到 Scratch 项目文档。 围绕《Mindstorms》的 microworld 概念 与 《终生幼儿园》的 4P （Projects, Passion, Peers, Play）理念 构建 projects。","text_tokens":["passion","来到","alan","。","microworld","的","理念","mindstorms","与","欢迎","项目","4p","终生","围绕","kay","幼儿园","概念","构建","real","scratch",",","）","文档","playing","projects"," ","-","幼儿","》","（","play","peers","《"],"title":"介绍","title_tokens":["介绍"]},{"location":"Scratch_Projects/scratch_ppt/","text":"Scratch PPT ¶ 项目介绍 ¶ 使用 Scratch 来制作 PPT，用于分享和演讲： 介绍自己 介绍自己最喜欢的玩具 介绍最喜欢的小动物 介绍团队成员 分享自己制作项目的经历 …… 思路 ¶ 将舞台背景用作 PPT 载体，绘制若干舞台背景，演讲时进行切换。 Tip 使用 角色 让演讲内容生动起来。 涉及的知识 ¶ 外观 积木 背景切换 制作舞台背景 事件 Scratch EIM 插件 CodeLab Adapter Python Kernel Extension 打开本地文件（目录/视频） 进阶 ¶ 使用 micro:bit 制作翻页笔 制作眼动仪翻页笔，帮助双手不便利的人 想象空间 ¶ 使用 Switch Joy-Con 作为翻页笔 示例 ¶ 项目源码 ¶ CodeLab PPT 使用说明 ¶ 步骤 1：打开 Codelab Adapter ¶ 双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。 打开 extension_python_kernel 插件。 步骤 2：打开 Codelab Scratch3 ¶ 点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常 步骤 3：打开项目文件（.sb3文件） ¶ 将 项目源码 下载到本地。 开始使用 ¶ 根据项目注释里的 使用说明 操作。 你的创作 ¶ ... 参考 ¶ Scratch 入门项目|故事 raspberrypi Scratch Project","text_tokens":["¶","团队","参考","project","或者","绘制","笔","switch","喜欢","页面","让","不","进行","切换","注释","默认","载体",":","打开","图中","tip","成员","到",",","scratch","若干","步骤","人","micro","内容","joy","con","外观","_","最","你","浏览器","kernel","eim","1","…","双手","3","的","想象",".","文件","呈现","项目","使用","codelab","经历","演讲","事件","里","便利","连接"," ","（","/","箭头","小圆点","sb3","翻页","之后","角色","说明","...","将","python","）","积木","点击","这儿","知识","。","根据","故事","分享","小","与","生动","动物","双击","scratch3.0","如下","帮助","创作","上","演讲时","用于","舞台","源码","用作","来","作为","本地","圆点","adapter","视频","-","2","web","启动","操作","scratch3","空间","示例","，","和","raspberrypi","正常","下载","：","自己","|","起来","玩具","extension","入门","链接","涉及","目录","ui","制作","思路","背景","浏览","进阶","绿色","插件","开始","bit","眼动仪","ppt","介绍","所指"],"title":"Scratch PPT","title_tokens":[" ","scratch","ppt"]},{"location":"Scratch_Projects/scratch_ppt/#scratch-ppt","text":"","text_tokens":[],"title":"Scratch PPT","title_tokens":[" ","scratch","ppt"]},{"location":"Scratch_Projects/scratch_ppt/#_1","text":"使用 Scratch 来制作 PPT，用于分享和演讲： 介绍自己 介绍自己最喜欢的玩具 介绍最喜欢的小动物 介绍团队成员 分享自己制作项目的经历 ……","text_tokens":["团队","和","…","喜欢","分享","小","的","项目","：","自己","动物","使用","玩具","经历","演讲","用于","制作","成员","scratch","来"," ","ppt","介绍","最","，"],"title":"项目介绍","title_tokens":["介绍","项目"]},{"location":"Scratch_Projects/scratch_ppt/#_2","text":"将舞台背景用作 PPT 载体，绘制若干舞台背景，演讲时进行切换。 Tip 使用 角色 让演讲内容生动起来。","text_tokens":["绘制","。","让","进行","切换","生动","使用","载体","起来","演讲时","演讲","舞台","用作","tip","若干","背景","内容"," ","ppt","角色","将","，"],"title":"思路","title_tokens":["思路"]},{"location":"Scratch_Projects/scratch_ppt/#_3","text":"外观 积木 背景切换 制作舞台背景 事件 Scratch EIM 插件 CodeLab Adapter Python Kernel Extension 打开本地文件（目录/视频）","text_tokens":["eim","文件","切换","codelab","extension","目录","事件","舞台","打开","制作","scratch","背景","本地","adapter"," ","插件","（","/","视频","外观","python","）","积木","kernel"],"title":"涉及的知识","title_tokens":["知识","涉及","的"]},{"location":"Scratch_Projects/scratch_ppt/#_4","text":"使用 micro:bit 制作翻页笔 制作眼动仪翻页笔，帮助双手不便利的人","text_tokens":[" ","不","bit",":","眼动仪","帮助","翻页","便利","制作","笔","双手","使用","人","micro","的","，"],"title":"进阶","title_tokens":["进阶"]},{"location":"Scratch_Projects/scratch_ppt/#_5","text":"使用 Switch Joy-Con 作为翻页笔","text_tokens":[" ","-","con","翻页","笔","switch","使用","作为","joy"],"title":"想象空间","title_tokens":["想象","空间"]},{"location":"Scratch_Projects/scratch_ppt/#_6","text":"","text_tokens":[],"title":"示例","title_tokens":["示例"]},{"location":"Scratch_Projects/scratch_ppt/#_7","text":"CodeLab PPT","text_tokens":[" ","codelab","ppt"],"title":"项目源码","title_tokens":["项目","源码"]},{"location":"Scratch_Projects/scratch_ppt/#_8","text":"","text_tokens":[],"title":"使用说明","title_tokens":["说明","使用"]},{"location":"Scratch_Projects/scratch_ppt/#1-codelab-adapter","text":"双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。 打开 extension_python_kernel 插件。","text_tokens":[" ","插件","浏览","打开","之后","启动","双击","。","_","默认","codelab","adapter","将","python","extension","，","浏览器","kernel"],"title":"步骤 1：打开 Codelab Adapter","title_tokens":[" ","1","打开","：","步骤","codelab","adapter"]},{"location":"Scratch_Projects/scratch_ppt/#2-codelab-scratch3","text":"点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常","text_tokens":["这儿","或者","正常","页面","的","呈现","与","scratch3.0","如下","codelab","链接","上","ui",":","打开","图中",",","圆点","adapter","绿色","连接"," ","箭头","小圆点","web","所指","说明","scratch3","将","点击"],"title":"步骤 2：打开 Codelab Scratch3","title_tokens":[" ","打开","2","：","步骤","scratch3","codelab"]},{"location":"Scratch_Projects/scratch_ppt/#3sb3","text":"将 项目源码 下载到本地。","text_tokens":[" ","下载","源码","项目","。","到","本地","将"],"title":"步骤 3：打开项目文件（.sb3文件）","title_tokens":[" ","（","sb3","打开","项目","：","步骤","3","）",".","文件"]},{"location":"Scratch_Projects/scratch_ppt/#_9","text":"根据项目注释里的 使用说明 操作。","text_tokens":[" ","里","项目","。","说明","根据","注释","使用","操作","的"],"title":"开始使用","title_tokens":["使用","开始"]},{"location":"Scratch_Projects/scratch_ppt/#_10","text":"...","text_tokens":["..."],"title":"你的创作","title_tokens":["的","你","创作"]},{"location":"Scratch_Projects/scratch_ppt/#_11","text":"Scratch 入门项目|故事 raspberrypi Scratch Project","text_tokens":[" ","raspberrypi","project","项目","scratch","故事","|","入门"],"title":"参考","title_tokens":["参考"]},{"location":"Scratch_Projects/击掌奏乐/","text":"击掌奏乐 ¶ 依赖 ¶ Makey Makey 项目介绍 ¶ 将同伴变为音符，将肢体的接触变为音乐。 思路 ¶ 音符扮演者手握 Makey Makey 导线，演奏者手握地线。当演奏者与音符扮演者肢体接触时，将触发信号，演奏音乐。 涉及的知识 ¶ 音乐 积木 音符 Makey Makey 积木","text_tokens":["¶","音符","知识","。","演奏者","线","的","积木","与","项目","接触","触发","导线","同伴","当","演奏","信号","奏乐","makey","涉及","依赖","扮演者","时","思路","地","手握","音乐"," ","介绍","击掌","肢体","变为","将","扮演","，"],"title":"击掌奏乐","title_tokens":["击掌","奏乐"]},{"location":"Scratch_Projects/击掌奏乐/#_1","text":"","text_tokens":[],"title":"击掌奏乐","title_tokens":["击掌","奏乐"]},{"location":"Scratch_Projects/击掌奏乐/#_2","text":"Makey Makey","text_tokens":[" ","makey"],"title":"依赖","title_tokens":["依赖"]},{"location":"Scratch_Projects/击掌奏乐/#_3","text":"将同伴变为音符，将肢体的接触变为音乐。","text_tokens":["音符","肢体","接触","。","变为","将","同伴","的","，","音乐"],"title":"项目介绍","title_tokens":["介绍","项目"]},{"location":"Scratch_Projects/击掌奏乐/#_4","text":"音符扮演者手握 Makey Makey 导线，演奏者手握地线。当演奏者与音符扮演者肢体接触时，将触发信号，演奏音乐。","text_tokens":["音符","。","演奏者","线","与","接触","触发","导线","当","演奏","信号","makey","扮演者","时","地","手握","音乐"," ","肢体","将","扮演","，"],"title":"思路","title_tokens":["思路"]},{"location":"Scratch_Projects/击掌奏乐/#_5","text":"音乐 积木 音符 Makey Makey 积木","text_tokens":[" ","makey","音符","积木","音乐"],"title":"涉及的知识","title_tokens":["知识","涉及","的"]},{"location":"Scratch_Projects/击灭那盏灯/","text":"击灭那盏灯 ¶","text_tokens":[" ","¶","那","击灭","盏灯"],"title":"击灭那盏灯","title_tokens":["盏灯","那","击灭"]},{"location":"Scratch_Projects/击灭那盏灯/#_1","text":"","text_tokens":[],"title":"击灭那盏灯","title_tokens":["盏灯","那","击灭"]},{"location":"Scratch_Projects/彩虹的旋律/","text":"彩虹 🌈 的旋律 ¶ 项目介绍 ¶ 将彩虹糖用作音符来创作音乐。 思路 ¶ 彩虹糖在桌子上排成一列，使用摄像头对着它们, 彩虹糖被投影到 Scratch 舞台； 一个粉色箭头在屏幕中间，从左向右滑动； 当粉色箭头碰到不同颜色的彩虹糖时，演奏不同旋律的音符。 涉及的知识 ¶ 颜色编程 音乐 积木 音符 视频侦测 积木 动作 积木 控制 积木 运算 积木 侦测 积木 示例 ¶ 参考 彩虹 🌈 的旋律 。","text_tokens":["¶","彩虹","参考","音符","知识","侦测","。","从","一列","控制","旋律","糖","的","像头","不同","被","排成一列","摄像头","项目","使用","碰到","它们","当","创作","一个","演奏","在","上","粉色","糖时","涉及","舞台","🌈","滑动","用作","；","排成","思路","到",",","scratch","来","中间","投影","左向右","编程","屏幕","动作","运算","音乐","颜色"," ","视频","箭头","介绍","左向","着","摄像","将","示例","对","积木","，","桌子"],"title":"彩虹的旋律","title_tokens":["彩虹","的","旋律"]},{"location":"Scratch_Projects/彩虹的旋律/#_1","text":"","text_tokens":[],"title":"彩虹 🌈 的旋律","title_tokens":[" ","彩虹","🌈","旋律","的"]},{"location":"Scratch_Projects/彩虹的旋律/#_2","text":"将彩虹糖用作音符来创作音乐。","text_tokens":["彩虹","用作","音符","。","来","将","糖","创作","音乐"],"title":"项目介绍","title_tokens":["介绍","项目"]},{"location":"Scratch_Projects/彩虹的旋律/#_3","text":"彩虹糖在桌子上排成一列，使用摄像头对着它们, 彩虹糖被投影到 Scratch 舞台； 一个粉色箭头在屏幕中间，从左向右滑动； 当粉色箭头碰到不同颜色的彩虹糖时，演奏不同旋律的音符。","text_tokens":["彩虹","音符","。","从","一列","旋律","糖","像头","的","不同","被","排成一列","摄像头","使用","碰到","它们","当","演奏","一个","上","在","粉色","糖时","舞台","滑动","；","排成","到",",","scratch","左向右","中间","投影","屏幕","颜色"," ","箭头","左向","着","摄像","对","，","桌子"],"title":"思路","title_tokens":["思路"]},{"location":"Scratch_Projects/彩虹的旋律/#_4","text":"颜色编程 音乐 积木 音符 视频侦测 积木 动作 积木 控制 积木 运算 积木 侦测 积木","text_tokens":[" ","视频","音符","侦测","控制","动作","编程","运算","颜色","积木","音乐"],"title":"涉及的知识","title_tokens":["知识","涉及","的"]},{"location":"Scratch_Projects/彩虹的旋律/#_5","text":"参考 彩虹 🌈 的旋律 。","text_tokens":[" ","彩虹","参考","🌈","。","旋律","的"],"title":"示例","title_tokens":["示例"]},{"location":"Scratch_Projects/手势窗帘/","text":"手势窗帘 ¶ 依赖 ¶ 依赖 需要身处CodeLab Neverland空间里","text_tokens":[" ","¶","依赖","里","手势","neverland","窗帘","codelab","需要","身处","空间"],"title":"手势窗帘","title_tokens":["窗帘","手势"]},{"location":"Scratch_Projects/手势窗帘/#_1","text":"","text_tokens":[],"title":"手势窗帘","title_tokens":["窗帘","手势"]},{"location":"Scratch_Projects/手势窗帘/#_2","text":"依赖 需要身处CodeLab Neverland空间里","text_tokens":[" ","依赖","里","neverland","codelab","空间","需要","身处"],"title":"依赖","title_tokens":["依赖"]},{"location":"Scratch_Projects/搜索/","text":"搜索 ¶ 项目源码","text_tokens":[" ","¶","源码","搜索","项目"],"title":"搜索","title_tokens":["搜索"]},{"location":"Scratch_Projects/搜索/#_1","text":"项目源码","text_tokens":["项目","源码"],"title":"搜索","title_tokens":["搜索"]},{"location":"Scratch_Projects/灰袍巫师/","text":"灰袍巫师 ¶","text_tokens":[" ","¶","巫师","灰袍"],"title":"灰袍巫师","title_tokens":["巫师","灰袍"]},{"location":"Scratch_Projects/灰袍巫师/#_1","text":"","text_tokens":[],"title":"灰袍巫师","title_tokens":["巫师","灰袍"]},{"location":"Scratch_Projects/目之所及/","text":"目之所及 ¶ 依赖 ¶ 依赖 需要身处CodeLab Neverland空间里","text_tokens":[" ","¶","所及","依赖","里","目之所及","neverland","codelab","空间","需要","身处"],"title":"目之所及","title_tokens":["目之所及","所及"]},{"location":"Scratch_Projects/目之所及/#_1","text":"","text_tokens":[],"title":"目之所及","title_tokens":["目之所及","所及"]},{"location":"Scratch_Projects/目之所及/#_2","text":"依赖 需要身处CodeLab Neverland空间里","text_tokens":[" ","依赖","里","neverland","codelab","空间","需要","身处"],"title":"依赖","title_tokens":["依赖"]},{"location":"Scratch_Projects/纸做的开关/","text":"纸做的开关 ¶ 依赖 ¶ 依赖 需要身处CodeLab Neverland空间里","text_tokens":[" ","¶","依赖","里","做","身处","neverland","codelab","空间","需要","开关","的","纸"],"title":"纸做的开关","title_tokens":["开关","做","的","纸"]},{"location":"Scratch_Projects/纸做的开关/#_1","text":"","text_tokens":[],"title":"纸做的开关","title_tokens":["开关","做","的","纸"]},{"location":"Scratch_Projects/纸做的开关/#_2","text":"依赖 需要身处CodeLab Neverland空间里","text_tokens":[" ","依赖","里","neverland","codelab","空间","需要","身处"],"title":"依赖","title_tokens":["依赖"]},{"location":"Scratch_Projects/聊天机器人/","text":"聊天机器人 ¶ 将以下代码保存到 eim_monitor.py 文件里(在 Adapter 插件目录 中) # 将聊天服务从图灵机器人切换到腾讯闲聊 import requests import json import time import random import string import hashlib import urllib def monitor ( msg , logger ): ''' handle the message from the eim client(eg: scratch) ''' appId = \"2155753409\" apiKey = \"MyLQpyMr7K6S3kNI\" apiUrl = \"https://api.ai.qq.com/fcgi-bin/nlp/nlp_textchat\" content = { 'app_id' : appId , 'time_stamp' : str ( int ( time . time ())), 'nonce_str' : '' . join ( random . choice ( string . ascii_letters + string . digits ) for x in range ( 16 )), 'session' : '10000' . encode ( 'utf-8' ), 'question' : msg . encode ( 'utf-8' ) } sign_before = '' for key in sorted ( content ): # 键值拼接过程value部分需要URL编码，URL编码算法用大写字母，例如%E8。quote默认大写。 sign_before += '{}={}&' . format ( key , urllib . parse . quote ( content [ key ], safe = '' )) # 将应用密钥以app_key为键名，拼接到字符串sign_before末尾 sign_before += 'app_key={}' . format ( apiKey ) # 对字符串sign_before进行MD5运算，得到接口请求签名 sign = hashlib . md5 ( sign_before . encode ( 'UTF-8' )) . hexdigest () . upper () content [ 'sign' ] = sign stime = time . time () r = requests . post ( apiUrl , data = content ) . json () qtime = time . time () dt = qtime - stime print ( dt ) return r [ 'data' ][ 'answer' ] 之后可以在Scratch中使用它： 聊天机器人源码","text_tokens":["¶","com","为","键名","得到","before","json","https","8","id","进行","ascii","键值","key","切换","算法","默认","[","in","letters","requests","choice",":","session","到","(",",","scratch","字符","16","upper","appid","}","string","签名","_","nlp","mylqpymr7k6s3kni","for","r","eim","md5","10000","代码","&","部分",".","文件","encode","写字","大写","以下","使用","编码","机器人","sign","保存","logger","#","apikey","在","以","print","里","它","monitor","textchat",")","需要","safe","post"," ","/","answer","机器","之后","urllib","末尾","将","app","对","大写字母","可以","fcgi","接口","py","str","%","过程","'","。","return","quote","def","应用","stime","x","from","服务","sorted","parse","range","dt","qq","hexdigest","用","int","源码","content","nonce","eg","random","运算","adapter","msg","join","-","拼接","import","value","图灵","the","ai","\"","time","，","format","+","question","digits","字符串","从","中","bin","utf","message","例如","请求","腾讯","]","e8","qtime","字母","：","api","闲聊","stamp","handle","目录","=","2155753409","url","data","密钥","hashlib","插件","apiurl","{","client","聊天"],"title":"聊天机器人","title_tokens":["聊天","机器人","机器"]},{"location":"Scratch_Projects/聊天机器人/#_1","text":"将以下代码保存到 eim_monitor.py 文件里(在 Adapter 插件目录 中) # 将聊天服务从图灵机器人切换到腾讯闲聊 import requests import json import time import random import string import hashlib import urllib def monitor ( msg , logger ): ''' handle the message from the eim client(eg: scratch) ''' appId = \"2155753409\" apiKey = \"MyLQpyMr7K6S3kNI\" apiUrl = \"https://api.ai.qq.com/fcgi-bin/nlp/nlp_textchat\" content = { 'app_id' : appId , 'time_stamp' : str ( int ( time . time ())), 'nonce_str' : '' . join ( random . choice ( string . ascii_letters + string . digits ) for x in range ( 16 )), 'session' : '10000' . encode ( 'utf-8' ), 'question' : msg . encode ( 'utf-8' ) } sign_before = '' for key in sorted ( content ): # 键值拼接过程value部分需要URL编码，URL编码算法用大写字母，例如%E8。quote默认大写。 sign_before += '{}={}&' . format ( key , urllib . parse . quote ( content [ key ], safe = '' )) # 将应用密钥以app_key为键名，拼接到字符串sign_before末尾 sign_before += 'app_key={}' . format ( apiKey ) # 对字符串sign_before进行MD5运算，得到接口请求签名 sign = hashlib . md5 ( sign_before . encode ( 'UTF-8' )) . hexdigest () . upper () content [ 'sign' ] = sign stime = time . time () r = requests . post ( apiUrl , data = content ) . json () qtime = time . time () dt = qtime - stime print ( dt ) return r [ 'data' ][ 'answer' ] 之后可以在Scratch中使用它： 聊天机器人源码","text_tokens":["com","为","键名","得到","before","json","https","8","id","进行","ascii","键值","key","切换","算法","默认","[","in","letters","requests","choice",":","session","到","(",",","scratch","字符","16","upper","appid","}","string","签名","_","nlp","mylqpymr7k6s3kni","for","r","eim","md5","10000","代码","&","部分",".","文件","encode","写字","大写","以下","使用","编码","机器人","sign","保存","logger","#","apikey","在","以","print","里","它","monitor","textchat",")","需要","safe","post"," ","/","answer","机器","之后","urllib","末尾","将","app","对","大写字母","可以","fcgi","接口","py","str","%","过程","'","。","return","quote","def","应用","stime","x","from","服务","sorted","parse","range","dt","qq","hexdigest","用","int","源码","content","nonce","eg","random","运算","adapter","msg","join","-","拼接","import","value","图灵","the","ai","\"","time","，","format","+","question","digits","字符串","从","中","bin","utf","message","例如","请求","腾讯","]","e8","qtime","字母","：","api","闲聊","stamp","handle","目录","=","2155753409","url","data","密钥","hashlib","插件","apiurl","{","client","聊天"],"title":"聊天机器人","title_tokens":["聊天","机器人","机器"]},{"location":"Scratch_Projects/自制门禁系统/","text":"自制门禁系统 ¶ 依赖 ¶ 依赖 需要身处CodeLab Neverland空间里","text_tokens":[" ","¶","门禁系统","依赖","系统","里","门禁","neverland","codelab","空间","需要","身处","自制"],"title":"自制门禁系统","title_tokens":["门禁","门禁系统","系统","自制"]},{"location":"Scratch_Projects/自制门禁系统/#_1","text":"","text_tokens":[],"title":"自制门禁系统","title_tokens":["门禁","门禁系统","系统","自制"]},{"location":"Scratch_Projects/自制门禁系统/#_2","text":"依赖 需要身处CodeLab Neverland空间里","text_tokens":[" ","依赖","里","neverland","codelab","空间","需要","身处"],"title":"依赖","title_tokens":["依赖"]},{"location":"Scratch_Projects/芝麻开门/","text":"芝麻开门 ¶ 依赖 ¶ 依赖 需要身处CodeLab Neverland空间里","text_tokens":[" ","¶","依赖","里","芝麻","neverland","codelab","空间","需要","身处","开门","芝麻开门"],"title":"芝麻开门","title_tokens":["开门","芝麻开门","芝麻"]},{"location":"Scratch_Projects/芝麻开门/#_1","text":"","text_tokens":[],"title":"芝麻开门","title_tokens":["开门","芝麻开门","芝麻"]},{"location":"Scratch_Projects/芝麻开门/#_2","text":"依赖 需要身处CodeLab Neverland空间里","text_tokens":[" ","依赖","里","neverland","codelab","空间","需要","身处"],"title":"依赖","title_tokens":["依赖"]},{"location":"Scratch_Projects/闭眼请熄灯/","text":"闭眼请熄灯 ¶ 依赖 ¶ 依赖 需要身处CodeLab Neverland空间里 项目介绍 ¶","text_tokens":[" ","¶","依赖","介绍","里","项目","请","neverland","闭眼","熄灯","codelab","需要","身处","空间"],"title":"闭眼请熄灯","title_tokens":["请","闭眼","熄灯"]},{"location":"Scratch_Projects/闭眼请熄灯/#_1","text":"","text_tokens":[],"title":"闭眼请熄灯","title_tokens":["请","闭眼","熄灯"]},{"location":"Scratch_Projects/闭眼请熄灯/#_2","text":"依赖 需要身处CodeLab Neverland空间里","text_tokens":[" ","依赖","里","neverland","codelab","空间","需要","身处"],"title":"依赖","title_tokens":["依赖"]},{"location":"Scratch_Projects/闭眼请熄灯/#_3","text":"","text_tokens":[],"title":"项目介绍","title_tokens":["介绍","项目"]},{"location":"Scratch_Projects/霍格沃兹/","text":"霍格沃兹 ¶ 依赖 ¶ 依赖 需要身处CodeLab Neverland空间里 项目介绍 ¶ 使用魔杖操控空间里的设备。 思路 ¶ 使用 姿态神经网络 分析手部的运行，根据运动模式/位置，触发指令，控制设备。 涉及的知识 ¶ 声音 积木 控制 积木 姿态神经网络 坐标系统 CodeLab Adapter Longan 插件 示例 ¶ ……","text_tokens":["¶","霍","控制","知识","longan","格沃兹","。","模式","…","根据","网络","姿态","位置","的","手部","声音","操控","设备","神经网络","示例","运行","项目","使用","触发","codelab","运动","身处","涉及","依赖","系统","里","思路","adapter","需要","神经网"," ","分析","/","插件","介绍","指令","neverland","坐标","神经","空间","积木","，","魔杖"],"title":"霍格沃兹","title_tokens":["霍","格沃兹"]},{"location":"Scratch_Projects/霍格沃兹/#_1","text":"","text_tokens":[],"title":"霍格沃兹","title_tokens":["霍","格沃兹"]},{"location":"Scratch_Projects/霍格沃兹/#_2","text":"依赖 需要身处CodeLab Neverland空间里","text_tokens":[" ","依赖","里","neverland","codelab","空间","需要","身处"],"title":"依赖","title_tokens":["依赖"]},{"location":"Scratch_Projects/霍格沃兹/#_3","text":"使用魔杖操控空间里的设备。","text_tokens":["设备","里","。","使用","魔杖","空间","的","操控"],"title":"项目介绍","title_tokens":["介绍","项目"]},{"location":"Scratch_Projects/霍格沃兹/#_4","text":"使用 姿态神经网络 分析手部的运行，根据运动模式/位置，触发指令，控制设备。","text_tokens":["控制","。","模式","根据","网络","姿态","位置","的","手部","神经网络","设备","运行","使用","触发","运动","神经网"," ","分析","/","指令","神经","，"],"title":"思路","title_tokens":["思路"]},{"location":"Scratch_Projects/霍格沃兹/#_5","text":"声音 积木 控制 积木 姿态神经网络 坐标系统 CodeLab Adapter Longan 插件","text_tokens":[" ","插件","系统","控制","longan","网络","姿态","坐标","神经","codelab","神经网","积木","声音","adapter","神经网络"],"title":"涉及的知识","title_tokens":["知识","涉及","的"]},{"location":"Scratch_Projects/霍格沃兹/#_6","text":"……","text_tokens":["…"],"title":"示例","title_tokens":["示例"]},{"location":"Scratch_Projects/音乐主题活动/","text":"音乐主题活动 ¶ projects passion peers play programming 环境依赖 ¶ Chrome/Firefox： 打开 CodeLab Scratch CodeLab Adapter micro:bit 活动流程 ¶ 活动介绍 介绍 CodeLab 传递编程的乐趣，帮助孩子成为数字时代的创作者 展示视频案例（with CodeLab Adapter） 现场演示、体验（Projects） 即兴创作、协作（孩子＋父母＋志愿者） Scratch Card 开始编程 志愿者辅导 自由创作（体验区） 孩子＋父母＋志愿者 作品分享、分享感受 体验 ¶ 魔方交响乐 使用智能家居的魔方积木创建交响乐 使用 toio 自制乐器 使用 Scratch 和 toio 小方块构建自己的乐器，演奏者通过移动 toio 小方块，将空间位置信息映射为音符和节拍 demo2 乐高距离传感器演奏 使用乐高距离传感器将距离信息映射为音符，进而构建出交互式演奏乐器 micro:bit 运动音乐 利用 micro:bit 的陀螺仪演奏音乐，将运动转化为音乐 声控灯 制作日常生活中的声控灯 手掌演奏 使用 makey makey 将活动参与者的手掌变为钢琴按键，进行交互式演奏 入门 ¶ Scratch Cards（纸质卡片） 更多好玩项目（Microworld） ¶ DJ Scratch Cat Piano Remix this Dance Starfish Choir Sound Flower","text_tokens":["¶","即兴","卡片","为","传感器","更","演奏者","、","＋","纸质","创建","多","remix","进行","愿者","智能","主题","方块","运动","cat","陀螺","自制","展示",":","演示","programming","打开","构建","节拍","scratch","传递","micro","传感","流程","交响","toio","协作","成为","变为","数字","firefox","passion","智能家居","感受","位置","创作者","陀螺仪","的","作者","日常生活","自由","demo2","项目","使用","codelab","映射","sound","魔方","父母","按键","小方","编程","projects","choir"," ","/","（","乐趣","乐器","将","）","积木","piano","出","音符","小方块","区","分享","辅导","移动","参与","案例","距离","作品","日常","手掌","帮助","创作","依赖","转化","adapter","音乐","信息","视频","flower","灯","家居","感器","空间","this","starfish","，","通过","和","card","钢琴","体验","中","microworld","chrome","好玩","进而","交互","孩子","生活","时代","：","自己","利用","环境","乐高","演奏","入门","with","声控","makey","dj","交互式","常生","制作","交响乐","现场","开始","bit","志愿者","介绍","志愿","活动","cards","dance","play","peers","参与者"],"title":"音乐主题活动","title_tokens":["主题","音乐","活动"]},{"location":"Scratch_Projects/音乐主题活动/#_1","text":"projects passion peers play programming","text_tokens":[" ","passion","programming","play","peers","projects"],"title":"音乐主题活动","title_tokens":["主题","音乐","活动"]},{"location":"Scratch_Projects/音乐主题活动/#_2","text":"Chrome/Firefox： 打开 CodeLab Scratch CodeLab Adapter micro:bit","text_tokens":[" ","/","bit",":","打开","：","scratch","codelab","chrome","micro","firefox","adapter"],"title":"环境依赖","title_tokens":["环境","依赖"]},{"location":"Scratch_Projects/音乐主题活动/#_3","text":"活动介绍 介绍 CodeLab 传递编程的乐趣，帮助孩子成为数字时代的创作者 展示视频案例（with CodeLab Adapter） 现场演示、体验（Projects） 即兴创作、协作（孩子＋父母＋志愿者） Scratch Card 开始编程 志愿者辅导 自由创作（体验区） 孩子＋父母＋志愿者 作品分享、分享感受","text_tokens":["即兴","card","体验","、","感受","＋","创作者","辅导","区","分享","的","作者","愿者","孩子","自由","时代","案例","作品","codelab","帮助","创作","父母","展示","演示","scratch","编程","传递","adapter","projects"," ","视频","（","现场","乐趣","开始","志愿者","介绍","志愿","活动","协作","成为","数字","）","with","，"],"title":"活动流程","title_tokens":["流程","活动"]},{"location":"Scratch_Projects/音乐主题活动/#_4","text":"魔方交响乐 使用智能家居的魔方积木创建交响乐 使用 toio 自制乐器 使用 Scratch 和 toio 小方块构建自己的乐器，演奏者通过移动 toio 小方块，将空间位置信息映射为音符和节拍 demo2 乐高距离传感器演奏 使用乐高距离传感器将距离信息映射为音符，进而构建出交互式演奏乐器 micro:bit 运动音乐 利用 micro:bit 的陀螺仪演奏音乐，将运动转化为音乐 声控灯 制作日常生活中的声控灯 手掌演奏 使用 makey makey 将活动参与者的手掌变为钢琴按键，进行交互式演奏","text_tokens":["出","和","智能家居","钢琴","为","音符","传感器","演奏者","位置","小方块","中","通过","陀螺仪","的","创建","进而","交互","日常生活","进行","移动","智能","demo2","参与","生活","自己","距离","利用","使用","乐高","方块","映射","运动","日常","手掌","演奏","陀螺","魔方","自制","声控","makey","交互式",":","常生","按键","转化","构建","制作","小方","交响乐","节拍","scratch","micro","音乐","信息"," ","传感","bit","灯","家居","乐器","交响","toio","活动","变为","感器","将","空间","积木","参与者","，"],"title":"体验","title_tokens":["体验"]},{"location":"Scratch_Projects/音乐主题活动/#_5","text":"Scratch Cards（纸质卡片）","text_tokens":[" ","（","卡片","scratch","cards","纸质","）"],"title":"入门","title_tokens":["入门"]},{"location":"Scratch_Projects/音乐主题活动/#microworld","text":"DJ Scratch Cat Piano Remix this Dance Starfish Choir Sound Flower","text_tokens":[" ","flower","dj","remix","scratch","this","dance","sound","cat","piano","starfish","choir"],"title":"更多好玩项目（Microworld）","title_tokens":["（","项目","更","）","microworld","好玩","多"]},{"location":"Scratch_Projects/鼻梁上的老花镜/","text":"鼻梁上的老花镜（增强现实） ¶","text_tokens":["老花镜","上","花镜","（"," ","¶","鼻梁","老花","增强","现实","）","的"],"title":"鼻梁上的老花镜","title_tokens":["老花镜","上","花镜","鼻梁","老花","的"]},{"location":"Scratch_Projects/鼻梁上的老花镜/#_1","text":"","text_tokens":[],"title":"鼻梁上的老花镜（增强现实）","title_tokens":["老花镜","上","花镜","（","鼻梁","老花","增强","现实","）","的"]},{"location":"about/License/","text":"证书（License） ¶ 您可以免费将 CodeLab Adapter 用于研究与学习；如果您需要将其用于商业项目，请联系： wuwenjie@codelab.club ； You are free to use CodeLab Adapter for research and learning. If you are ready to use it for commercial purposes, please contact me: wuwenjie@codelab.club .","text_tokens":["¶","可以","ready","research","it","me","purposes","如果","contact",".","其","to","免费","与","项目","：","club","证书","you","codelab","learning","学习","are","and","please","用于",":","您","；","商业","@",",","请","adapter","需要","commercial","研究","（"," ","free","license","use","if","将","联系","）","for","wuwenjie","，"],"title":"证书(license)","title_tokens":[")","证书","license","("]},{"location":"about/License/#license","text":"您可以免费将 CodeLab Adapter 用于研究与学习；如果您需要将其用于商业项目，请联系： wuwenjie@codelab.club ； You are free to use CodeLab Adapter for research and learning. If you are ready to use it for commercial purposes, please contact me: wuwenjie@codelab.club .","text_tokens":["可以","ready","research","it","me","purposes","如果","contact",".","其","to","免费","与","项目","：","club","you","codelab","learning","学习","are","and","please","用于",":","您","；","商业","@",",","请","adapter","需要","commercial","研究"," ","free","use","if","将","联系","for","wuwenjie","，"],"title":"证书（License）","title_tokens":["（","证书","）","license"]},{"location":"about/contact/","text":"联系我们（Contact us） ¶ 如果你： 希望建立合作 想吐槽 CodeLab Adapter，打击一下开发团队 在写 CodeLab Adapter 插件时遇到一些困难，影响到胃口 觉得人生苦短，想与我们一起折腾些有趣的事 我们热爱开源文化和社区，写代码之余也写写打油诗 简历最好附上 GitHub 和 Blog 想提点建议，教开发团队做人，当面提的话，最好能蹭个饭 有好玩的主意，想撩一撩开发团队 喜欢创作故事、剧本，有插画的技能，想把故事搬到 Scratch 3.0 上 我们将让你的虚拟人物与现实交融在一起，供你差遣各种好玩的物联网设备和 AI 喜欢柏拉图和罗素，想找个雨夜聊聊人生 欢迎来信啦： wuwenjie718@gmail.com 闲敲棋子落灯花","text_tokens":["¶","团队","com","us","、","饭","contact","喜欢","blog","让","开发","虚拟","附上","胃口","罗素","欢迎","github","棋子","搬","gmail","人物","能蹭个","联网","到","scratch","困难","有趣","提","3.0","简历","人生","找个","插画","遇到","你","各种","代码","有","热爱","建立","的",".","当面","wuwenjie718","开源","codelab","闲","一下","之余","在","的话","做人","时","@","（"," ","我们","一起","剧本","将","）","折腾","来信","撩","柏拉","故事","与","影响","灯花","打油","敲","创作","苦短","也","上","想","供","差遣","落","adapter","希望","交融","聊聊","一些","社区","一","技能","ai","，","最好","合作","和","主意","打击","如果","建议","现实","好玩","写写","想吐槽","教","物","设备","把","：","柏拉图","打油诗","事","些","插件","啦","提点","觉得","文化","联系","拉图","雨夜","写"],"title":"联系我们(contact us)","title_tokens":[" ","我们","(","us",")","contact","联系"]},{"location":"about/contact/#contact-us","text":"如果你： 希望建立合作 想吐槽 CodeLab Adapter，打击一下开发团队 在写 CodeLab Adapter 插件时遇到一些困难，影响到胃口 觉得人生苦短，想与我们一起折腾些有趣的事 我们热爱开源文化和社区，写代码之余也写写打油诗 简历最好附上 GitHub 和 Blog 想提点建议，教开发团队做人，当面提的话，最好能蹭个饭 有好玩的主意，想撩一撩开发团队 喜欢创作故事、剧本，有插画的技能，想把故事搬到 Scratch 3.0 上 我们将让你的虚拟人物与现实交融在一起，供你差遣各种好玩的物联网设备和 AI 喜欢柏拉图和罗素，想找个雨夜聊聊人生 欢迎来信啦： wuwenjie718@gmail.com 闲敲棋子落灯花","text_tokens":["com","团队","、","饭","喜欢","blog","让","开发","虚拟","附上","胃口","罗素","欢迎","github","棋子","搬","gmail","人物","能蹭个","联网","到","scratch","困难","有趣","提","3.0","简历","人生","找个","插画","遇到","你","各种","代码","有","热爱","建立","的",".","当面","wuwenjie718","开源","codelab","闲","一下","之余","在","的话","做人","时","@"," ","我们","一起","剧本","将","折腾","来信","撩","柏拉","故事","与","影响","灯花","打油","敲","创作","苦短","也","上","想","供","差遣","落","adapter","希望","交融","聊聊","一些","社区","一","技能","ai","，","最好","合作","和","主意","打击","如果","建议","现实","好玩","写写","想吐槽","教","物","设备","把","：","柏拉图","打油诗","事","些","插件","啦","提点","觉得","文化","拉图","雨夜","写"],"title":"联系我们（Contact us）","title_tokens":["（"," ","我们","us","contact","联系","）"]},{"location":"about/roadmap/","text":"路线图（Roadmap） ¶ 2.0 (end) ¶ 移动端支持 已完成： codelab-adapter 的移动端解决方案 允许在 GUI 面板上启停插件 已完成 本地 SSL 安全证书 已完成 引入 json-rpc 已完成 替代 Scratch Link，实现 Scratch Link 的蓝牙代理服务 分析 scratch 3.0 与 micro:bit 的通信 故事与课程 使用物联网和 AI 增强表现力 重构插件系统，使用协程 发布不同平台的安装包 接入 openBCI 接入眼动仪 已完成 接入 Parrot pyparrot 已完成 在前端启停软件 json-rpc 异步实现 提供更好用的通信机制（包装 zeromq 到 utils），作为最佳实践 3.0 ¶","text_tokens":["¶","重构","解决","表现","json","pyparrot","机制",":","完成","系统","安装包","联网","(","到","scratch","micro","表现力","代理","端","支持","平台","3.0","zeromq","前端","gui","接入","rpc","上启停","的","不同","允许","解决方案","roadmap","证书","使用","已","codelab","实践","在","代理服务",")","课程","（"," ","增强","）","link","parrot","启停","故事","安全","移动","与","服务","通信","线图","面板","最佳","用","包装","end","协程","作为","本地","adapter","路线","-","分析","引入","软件","ai","，","路线图","openbci","和","ssl","物","安装","：","utils","发布","替代","异步","插件","方案","bit","眼动仪","蓝牙","实现","提供","2.0","更好"],"title":"路线图(Roadmap)","title_tokens":["(",")","roadmap","线图","路线图","路线"]},{"location":"about/roadmap/#roadmap","text":"","text_tokens":[],"title":"路线图（Roadmap）","title_tokens":["（","roadmap","线图","）","路线图","路线"]},{"location":"about/roadmap/#20-end","text":"移动端支持 已完成： codelab-adapter 的移动端解决方案 允许在 GUI 面板上启停插件 已完成 本地 SSL 安全证书 已完成 引入 json-rpc 已完成 替代 Scratch Link，实现 Scratch Link 的蓝牙代理服务 分析 scratch 3.0 与 micro:bit 的通信 故事与课程 使用物联网和 AI 增强表现力 重构插件系统，使用协程 发布不同平台的安装包 接入 openBCI 接入眼动仪 已完成 接入 Parrot pyparrot 已完成 在前端启停软件 json-rpc 异步实现 提供更好用的通信机制（包装 zeromq 到 utils），作为最佳实践","text_tokens":["重构","解决","表现","json","pyparrot","机制",":","完成","系统","安装包","联网","到","scratch","micro","表现力","代理","端","支持","平台","3.0","zeromq","前端","gui","接入","rpc","上启停","的","不同","允许","解决方案","使用","证书","已","codelab","实践","在","代理服务","课程","（"," ","增强","）","link","parrot","启停","故事","安全","移动","与","服务","通信","面板","最佳","用","包装","协程","作为","本地","adapter","-","分析","引入","软件","ai","，","openbci","和","ssl","物","安装","：","utils","发布","替代","异步","插件","方案","bit","眼动仪","蓝牙","实现","提供","更好"],"title":"2.0 (end)","title_tokens":[" ","end","(","2.0",")"]},{"location":"about/roadmap/#30","text":"","text_tokens":[],"title":"3.0","title_tokens":["3.0"]},{"location":"about/value/","text":"我们的价值观 ( English ) ¶ 如果你想走得快，一个人走; 如果你想走得远，一群人走 我们不想做一个封闭的系统，为某一款或几款硬件，做一个定制化的解决方案，然后去兜售它，并宣称我们是最好的解决方案。 我们相信创意来自广泛的连接和分享。如果某一天在这个领域出现了一些振奋人心的东西，我相信它会首先出现在社区。 我们喜欢Scratch积木化的界面，喜欢它的口号 Imagine, Program, Share 我们喜欢media lab提出的4P方法: 项目（Projects）、同伴（Peers）、热情（Passion）、玩耍（Play） 我们想让Scratch3.0能连接到更广阔的世界,以便让参与项目的你也能与这个现实世界建立广泛的连接，而不只是生活在虚拟的空间中。我们希望你将编程创造的东西，用到日常中，给大家带来欢乐和惊喜。我们想把任何有趣的东西接入进来，以便打造 更宽的围墙和更高的天花板 ，当然，也包括接入你童年的那辆玩具四驱车 我们想为你打造一个\"绿洲\"，我们想 创造出一个不可思议的、美丽的、夺人心魄的场所,在那里人们可以漫步,可以梦想,历经很多世纪生生不息 但遗憾的是我们没有这个能力，我们最终只是打造一个通用的插件系统，而把更多的可能性留给了你自己，我们希望你能参与进来一起来改进它。这意味着如果你想连接你喜欢的东西，你不能坐着等我们来帮你。不过我们将尽最大努力给你提供一个好用的工具 学习是必须亲力亲为的，教育则是外界加诸你身上的 你需要自己动起手来,去创造你所向往的东西。 这和生活不是很像么？ 世界如果存在什么边界的话，可能只有想象力 有趣的东西现在还不多，在这个领域，除了富有远见的Jean Piaget、Alan Curtis Kay、Seymour Papert和Mitchel Resnick曾做过令人振奋的探索。当前的很多项目，说实话，让人有点瞌睡 我们想与你，以及广阔的社区(我们正在构建它)，一起动起手来做些真正令人振奋的东西 Just for fun :) Our Values ¶ If you want to go quickly, go alone. If you want to go far, go together. We don't want to do something like this: build a closed system, make it customized for a couple of hardware, then peddle it and declare it as our best solution. We believe creativity comes from broad connections and sharing. If something truly exciting comes out, we believe it must appear in our community at first place. We are fond of Scratch's block-like interface and its idea: Imagine, Program, Share We also like the vision of Media Lab for learning: Projects, Passion, Peers, and Play. We are trying to make Scratch 3.0 connect to a bigger world, which would make it easier for the creators(that's you!) to connect with our real world, not just within the virtual space. We hope the things you create will bring a ton of surprise and joy to your family and friends. To build a broader wall and a higher ceiling, we want to bring in every interesting things we found, which includes your Mini-4WD from childhood for sure. We want to create a oasis for you, That one day, somewhere, somehow, we shall build one building which is wonderful, beautiful, breathtaking, a place where people can walk and dream for centuries. Unfortunately, we don't have that power yet. We will eventually build a general plug-in system, and leave more space and possibility for you. We hope you to join us and improve it. This means, if you want the system connect to something you like, you cannot just sit around wait for us to help build it. Instead, we will try out best to provide you some great tools and utilities. Education is what people do to you. Learning is what you do to yourself. To create something promising, you have to get your hands dirty. Isn't it just like our life? The only boundary that our world might have, is our imagination. Except those exceptional work from visionary Jean Piaget, Alan Curtis Kay, Seymour Papert and Mitchel Resnick, there're not many interesting things in this area yet. To be honest, a lot of current projects are kind of boring. That's why we want you, along with the promising community that we are building, to do some great things together. Just for fun!","text_tokens":["尽","a","life","childhood","isn","us","喜欢","价值","东西","那辆","be","unfortunately","in","宣称","思议","scratch","connections","easier","有趣","四驱车","like","给","place","build","人心","高","for","broad","building","欢乐","不可思议","兜售","教育","lab","out","探索","to","as","provide","you","broader","创意","help","kay","它","real","!","projects","values","我们","of","eventually","if","留给","来自","进来","将","积木","work","可能","quickly","说实话","'","场所","坐","不是","imagine","beautiful","want","honest","media","那里","from","日常","用到","同伴","封闭","打造",";","leave","并","希望","-","某","一些","社区","像","connect","community","found","加诸","空间","界面","\"","很多","和","education","如果","closed","includes","would","把","wonderful","自己","learning","every","夺人","等","imagination","great","promising","梦想","space","peers","遗憾","解决","必须","somehow","围墙","ceiling","around","fun","best","做些",":","boring","边界","must","能力","人","绿洲","3.0","但","people","首先","at","it","wall","定制","带来","能","几款","just","解决方案","many","而","人们","general","在","where","current","idea","visionary","make","需要","连接"," ","不过","相信","mitchel","try","declare","出现","出","还","trying","。","分享","more","oasis","宽","possibility","world","当前","曾","first","学习","higher","creativity","not","wait","很","真正","通用","不息","着","truly","the","最好","except","外界","一款","任何","block","bring","sure","we","玩具","area","and","only","papert","热情","插件","方案","program","领域","its","创造","with","振奋人心","¶","一群","有点","更","让","多","虚拟","there","also","one","正在","然后","family","instead","系统","构建","(",",","jean","centuries","english","富有","joy","day","share","最大","something","令人振奋","生生不息","瞌睡","customized","passion","接入","不想","somewhere","是","它会","的","生生","lot","振奋","项目","得","are","除了","exciting","bigger","的话",")","编程","your","solution","t","fond","resnick","亲力亲为","可以","这","ton","包括","走得快","far","硬件","惊喜","与","参与","只有","意味","提出","re","一个","?","along","dream","来","vision","join","则","当然","hope","get","create","system","一","exceptional","动起","go","curtis","改进","心魄","工具","中","boundary","口号","手来","creators","意味着","生活","什么","了","our","what","远","power","surprise","想象力","virtual","美丽","一天","shall","历经","世纪","身上","为","things","、","those","couple","can","不","？","玩耍","漫步","kind","去","天花","远见","is","utilities","到","令人","化","mini","广泛","within","then","做","comes","只是","have","你","努力","最终","alan","do","建立","means","想象",".","dirty","没有","所","plug","which","可能性","（","improve","实话","appear","一起","4wd","）","以及","广阔","不能","过","好用","that","s","yet","tools","will","存在","价值观","我","sit","interface","驱车","interesting","breathtaking","hardware","scratch3.0","大家","seymour","也","世界","以便","想","现在","cannot","么","don","believe","或","方法","hands","天花板","this","yourself","，","piaget","peddle","童年","friends","some","向往","现实","alone","might","walk","4p","why","起来","走","这个","帮","不可","sharing","提供","play","together"],"title":"价值观(value)","title_tokens":["value","(",")","价值","价值观"]},{"location":"about/value/#english","text":"如果你想走得快，一个人走; 如果你想走得远，一群人走 我们不想做一个封闭的系统，为某一款或几款硬件，做一个定制化的解决方案，然后去兜售它，并宣称我们是最好的解决方案。 我们相信创意来自广泛的连接和分享。如果某一天在这个领域出现了一些振奋人心的东西，我相信它会首先出现在社区。 我们喜欢Scratch积木化的界面，喜欢它的口号 Imagine, Program, Share 我们喜欢media lab提出的4P方法: 项目（Projects）、同伴（Peers）、热情（Passion）、玩耍（Play） 我们想让Scratch3.0能连接到更广阔的世界,以便让参与项目的你也能与这个现实世界建立广泛的连接，而不只是生活在虚拟的空间中。我们希望你将编程创造的东西，用到日常中，给大家带来欢乐和惊喜。我们想把任何有趣的东西接入进来，以便打造 更宽的围墙和更高的天花板 ，当然，也包括接入你童年的那辆玩具四驱车 我们想为你打造一个\"绿洲\"，我们想 创造出一个不可思议的、美丽的、夺人心魄的场所,在那里人们可以漫步,可以梦想,历经很多世纪生生不息 但遗憾的是我们没有这个能力，我们最终只是打造一个通用的插件系统，而把更多的可能性留给了你自己，我们希望你能参与进来一起来改进它。这意味着如果你想连接你喜欢的东西，你不能坐着等我们来帮你。不过我们将尽最大努力给你提供一个好用的工具 学习是必须亲力亲为的，教育则是外界加诸你身上的 你需要自己动起手来,去创造你所向往的东西。 这和生活不是很像么？ 世界如果存在什么边界的话，可能只有想象力 有趣的东西现在还不多，在这个领域，除了富有远见的Jean Piaget、Alan Curtis Kay、Seymour Papert和Mitchel Resnick曾做过令人振奋的探索。当前的很多项目，说实话，让人有点瞌睡 我们想与你，以及广阔的社区(我们正在构建它)，一起动起手来做些真正令人振奋的东西 Just for fun :)","text_tokens":["一群","尽","身上","为","解决","有点","更","必须","、","喜欢","东西","那辆","让","多","不","虚拟","？","围墙","玩耍","漫步","正在","去","天花","远见","fun","然后","宣称","思议","做些",":","系统","构建","边界","到",",","scratch","能力","jean","令人","人","绿洲","(","富有","化","share","广泛","有趣","四驱车","给","但","做","最大","人心","只是","令人振奋","高","for","生生不息","瞌睡","你","首先","努力","passion","接入","最终","不想","alan","是","定制","兜售","它会","建立","带来","能","欢乐","不可思议","的","几款","lab","教育","想象","探索","生生","just","解决方案","没有","振奋","项目","而","所","得","创意","人们","在","kay","除了","它","的话",")","编程","需要","可能性","连接","projects"," ","（","我们","不过","相信","世纪","mitchel","实话","一起","留给","来自","进来","resnick","将","出现","积木","）","以及","亲力亲为","广阔","可能","可以","出","这","不能","好用","过","包括","还","。","存在","走得快","说实话","场所","分享","坐","我","imagine","不是","media","硬件","惊喜","宽","驱车","与","参与","那里","只有","当前","scratch3.0","曾","大家","日常","用到","同伴","提出","意味","一个","学习","seymour","也","封闭","世界","想","以便","打造","现在","么","来",";","则","并","希望","当然","某","一些","很","社区","通用","或","像","不息","方法","着","真正","天花板","一","动起","加诸","空间","界面","\"","，","最好","curtis","很多","和","改进","外界","一款","任何","心魄","piaget","如果","工具","童年","中","向往","现实","口号","手来","把","意味着","生活","什么","自己","4p","了","起来","玩具","夺人","等","走","papert","这个","帮","远","不可","想象力","热情","插件","美丽","方案","program","领域","一天","提供","梦想","创造","play","peers","历经","振奋人心","遗憾"],"title":"我们的价值观 (English)","title_tokens":[" ","我们","(","english",")","价值","价值观","的"]},{"location":"about/value/#our-values","text":"If you want to go quickly, go alone. If you want to go far, go together. We don't want to do something like this: build a closed system, make it customized for a couple of hardware, then peddle it and declare it as our best solution. We believe creativity comes from broad connections and sharing. If something truly exciting comes out, we believe it must appear in our community at first place. We are fond of Scratch's block-like interface and its idea: Imagine, Program, Share We also like the vision of Media Lab for learning: Projects, Passion, Peers, and Play. We are trying to make Scratch 3.0 connect to a bigger world, which would make it easier for the creators(that's you!) to connect with our real world, not just within the virtual space. We hope the things you create will bring a ton of surprise and joy to your family and friends. To build a broader wall and a higher ceiling, we want to bring in every interesting things we found, which includes your Mini-4WD from childhood for sure. We want to create a oasis for you, That one day, somewhere, somehow, we shall build one building which is wonderful, beautiful, breathtaking, a place where people can walk and dream for centuries. Unfortunately, we don't have that power yet. We will eventually build a general plug-in system, and leave more space and possibility for you. We hope you to join us and improve it. This means, if you want the system connect to something you like, you cannot just sit around wait for us to help build it. Instead, we will try out best to provide you some great tools and utilities. Education is what people do to you. Learning is what you do to yourself. To create something promising, you have to get your hands dirty. Isn't it just like our life? The only boundary that our world might have, is our imagination. Except those exceptional work from visionary Jean Piaget, Alan Curtis Kay, Seymour Papert and Mitchel Resnick, there're not many interesting things in this area yet. To be honest, a lot of current projects are kind of boring. That's why we want you, along with the promising community that we are building, to do some great things together. Just for fun!","text_tokens":["a","life","childhood","isn","things","us","those","couple","can","there","somehow","also","ceiling","one","around","be","kind","unfortunately","fun","in","best","family",":","instead","boring","is","utilities","(",",","must","scratch","jean","connections","easier","centuries","joy","day","mini","share","within","3.0","like","then","place","build","something","comes","for","have","people","customized","at","broad","building","passion","it","alan","do","wall","somewhere","means",".","out","lab","dirty","to","just","as","lot","many","provide","you","broader","are","general","help","kay","exciting","bigger","plug","which","where","real",")","current","idea","visionary","your","make","!","solution","t","fond","projects"," ","of","improve","mitchel","eventually","appear","if","try","4wd","resnick","declare","work","that","ton","s","yet","tools","quickly","'","trying","will","far","imagine","beautiful","interface","sit","more","want","oasis","honest","media","interesting","possibility","world","from","breathtaking","hardware","first","re","?","seymour","higher","cannot","creativity","along","dream","don","believe","not","wait","vision","leave","join","-","hope","get","hands","truly","connect","system","create","community","found","exceptional","go","the","this","yourself","curtis","except","piaget","peddle","education","block","friends","some","boundary","closed","alone","bring","creators","includes","might","would","wonderful","sure","walk","why","we","learning","every","area","with","and","only","imagination","our","what","papert","great","promising","power","surprise","virtual","program","sharing","shall","its","space","play","peers","together"],"title":"Our Values","title_tokens":["our"," ","values"]},{"location":"about/why/","text":"Why ¶ Just for fun :) 以及： 如果我们不去做，这些值得去做的事情，短期内似乎不会发生。 如果没有你的加入，我们成功的机会便很渺茫。","text_tokens":["¶","如果","。","短期","短期内","渺茫","发生","的","期内","你","just","没有","：","why","去","fun","便",":","这些","不去","似乎",")","值得","加入","成功"," ","我们","很","机会","做","事情","不会","for","以及","，"],"title":"why","title_tokens":["why"]},{"location":"about/why/#why","text":"Just for fun :) 以及： 如果我们不去做，这些值得去做的事情，短期内似乎不会发生。 如果没有你的加入，我们成功的机会便很渺茫。","text_tokens":["如果","。","短期","短期内","渺茫","发生","的","期内","你","just","没有","：","去","fun","便",":","这些","不去","似乎",")","值得","加入","成功"," ","我们","很","机会","做","事情","不会","for","以及","，"],"title":"Why","title_tokens":["why"]},{"location":"dev_guide/Adapter-Node/","text":"Adapter Node ¶ 在上一节： hello world(Adapter Extension) 中我们学会了如何自定义一个 extension。 extension 有如下的限制： 必须放置在插件目录中（ ~/codelab_adapter/extensions ）。 只能使用 CodeLab Adapter 已打包的第三方库 。 如果你想使用 Python 社区海量的第三方库：诸如 Pygame 、 PyQt 、 PyTorch 、 flask ... extension 就办不到了，但 Adapter Node 可以！ ps: 如果你只是想把外部系统接入Adapter，也可以参考更为简单的: 与外部系统通信 提醒 实际上 Adapter Extension 是 AdapterNode 的子类. 我们希望 CodeLab Adapter 专注于连接万物，所以构建了 Adapter Node，允许你在任何地方创建 CodeLab Adapter 的扩展，允许你使用任何 Python 库，无论你准备构建游戏、构建网站、构建深度学习应用还是构建一个机器人！ Adapter Node 是什么 ¶ Adapter Node 只是普通的 Python 程序，继承自 AdapterNode 。 第一个 Adapter Node ¶ 我们开始写第一个 Adapter Node。 你需要完成这些前置工作： 安装了 Python3( >=3.6 ) pip3 install codelab_adapter_client --upgrade 接着可以随便在什么地方创建一个 Python 文件，随便给它起个名字，诸如 my_first_adapter_node.py ： 我们让这个 Node 的功能与 hello world 里我们自定义的插件功能相同：反转字符串 import time from loguru import logger from codelab_adapter_client import AdapterNode class EIMNode ( AdapterNode ): NODE_ID = \"eim\" DESCRIPTION = \"Everything Is a Message\" HELP_URL = \"https://adapter.codelab.club/extension_guide/eim/\" def __init__ ( self ): super () . __init__ () def send_message_to_scratch ( self , content ): message = self . message_template () message [ \"payload\" ][ \"content\" ] = content self . publish ( message ) def extension_message_handle ( self , topic , payload ): self . logger . info ( f 'the message payload from scratch: {payload}' ) content = payload [ \"content\" ] if type ( content ) == str : content_send_to_scratch = content [:: - 1 ] # 反转字符串 self . send_message_to_scratch ( content_send_to_scratch ) def run ( self ): while self . _running : time . sleep ( 1 ) if __name__ == \"__main__\" : try : node = EIMNode () node . receive_loop_as_thread () node . run () except KeyboardInterrupt : node . terminate () # Clean up before exiting. 运行 ¶ 打开 CodeLab Adapter（不需要选择插件），将 CodeLab Adapter 作为消息中心。 运行 my_first_adapter_node.py： python3 my_first_adapter_node.py 让我们在 CodeLab Scratch3 中尝试一下反转字符串： 成功！ 它只是普通的 Python 程序，使用你本地的 Python 环境，所以你现在可以任何你偏爱的Python库来增强 Scratch3 啦！ GUI ¶ 有开发者在邮件中提到： tkinter、PyQt 都有一个主循环，Adapter Node 也有一个主循环，怎么才能共存呢？ Adapter Node 可以与任何 GUI 框架共存 if __name__ == \"__main__\": try: node = EIMNode() node.receive_loop_as_thread() node.run() except KeyboardInterrupt: node.terminate() # Clean up before exiting. 其中 node.run() 不是必要的，只是为了阻塞程序，使其不立刻结束，如果 GUI 框架本身已经有主循环，则可以移除 node.run() ， node.receive_loop_as_thread() 是非阻塞的。 以下是示范例子： from tkinter import * # AdapterNode from loguru import logger from codelab_adapter_client import AdapterNode class EIMNode ( AdapterNode ): NODE_ID = \"eim\" def __init__ ( self ): super () . __init__ () def send_message_to_scratch ( self , content ): message = self . message_template () message [ \"payload\" ][ \"content\" ] = content self . publish ( message ) def extension_message_handle ( self , topic , payload ): self . logger . info ( f 'the message payload from scratch: {payload}' ) content = payload [ \"content\" ] if type ( content ) == str : content_send_to_scratch = content [:: - 1 ] # 反转字符串 self . send_message_to_scratch ( content_send_to_scratch ) node = EIMNode () node . receive_loop_as_thread () # tkinter window = Tk () window . title ( \"Adapter Node & tkinter\" ) window . geometry ( '300x100' ) lbl = Label ( window , text = \"click to send message\" ) lbl . grid ( column = 0 , row = 0 ) i = 1 def clicked (): global i message = node . message_template () message [ \"payload\" ][ \"content\" ] = \"click_{}\" . format ( i ) node . publish ( message ) i += 1 btn = Button ( window , text = \"emit\" , command = clicked ) btn . grid ( column = 1 , row = 0 ) window . mainloop () 该 node 接收来自 Scratch EIM 的消息，并逆转字符串；当用户点击按钮时，给 Scratch 发送消息： click_<NUMBER> 想象空间 ¶ 如果你希望构建分布式的应用，诸如构建密室逃脱中的各种机关。只需要 做一下配置就行 ，让 CodeLab Adapter 接受分布式的请求。 你可以将 Adapter Node 跑在任何地方，来增强 CodeLab Adapter 的能力，无论是本地、云端还是分布式节点。 我们也正在构建其他语言的 client，你不会被限制在 Python 中，而是可以在任何编程语言任何平台上构建 Adapter Node。 参考： 编程语言支持 更多例子 ¶ blender ：这是个实际的案例，演示如何使用 AdapterNode 基础类粘合不同软件，将其变为 Adapter Node。 examples node_v3","text_tokens":["a","云端","参考","消息","还是","id","init","不到","[","info","普通","scratch","}","给","_","eim","gui","各种","1","*","只","文件","geometry","to","as","tkinter","更为","以下","打包","column","help","它","海量","里","我们","机器","if","增强","来自","...","python","将","点击","i","逃脱","机关","'","工作","不是","from","payload","pygame","学会","自","怎么","作为","本地","btn","并","希望","blender","-","社区","import","软件","空间","\"","examples","button","分布式","如果","深度","阻塞","]","安装","其","例子","把","up","club","row","extension","目录","=","url","upgrade","循环","loop","client","已经","相同","grid","text","install","lbl","必须","外部","eimnode","创建","开发","准备",":","这些","打开","其中","能力","库来","继承","平台","3.6","但","不会","变为","mainloop","尝试","于","库","结束","配置","不同",">","而是","在","时","接着","receive","需要","连接"," ","clicked","一节","地方","密室","try","pip3","名字","提醒","str","接受","。","<","ps","共存","def","world","案例","first","topic","自定义","学习","起个","节点","content","flask","实际","sleep","开发者","the","running","time","except","任何","thread","诸如","message","请求","：","程序","环境","handle","global","window","个","放置","description","无论是","插件","啦","node","开始","用户","编程语言","写","¶","hello","更","选择","让","邮件","多","语言","emit","正在","前置","keyboardinterrupt","number","run","系统","演示","子类","！","构建","(",",","示范","接入","是","就行","的","允许","移除","粘合","已","codelab","一下","send","command",")","跑","编程","呢","/","三方","为了","可以","这","everything","与","通信","title","所以","如下","guide","一个","来","adapter","则","300x100","扩展","专注","第一","terminate","偏爱","0","extensions","scratch3","format","第三方","只能","是非","中","~","逆转","分布","什么","了","框架","第三","按钮","tk","{","my","name","main","使","限制","功能","类","、","基础","before","type","https","不","？","简单","立刻","其他","loguru","完成","label","is","随便","字符","f","publish","支持","主","做","如何","只是","你","无论","本身","有","&",".","__","想象","adapternode","办不到","python3","使用","机器人","logger","#","template","；","clean","成功","（","提到","self","exiting","）","都","py","该","super","应用","被","运行","当","有主","上","也","现在","想","pytorch","布式","中心","才能","，","click","万物","自定","反转","+","定义","字符串","第一个","v3","实际上","就","这个","pyqt","发送","网站","游戏","接收","必要","while","class"],"title":"Adapter Node","title_tokens":[" ","node","adapter"]},{"location":"dev_guide/Adapter-Node/#adapter-node","text":"在上一节： hello world(Adapter Extension) 中我们学会了如何自定义一个 extension。 extension 有如下的限制： 必须放置在插件目录中（ ~/codelab_adapter/extensions ）。 只能使用 CodeLab Adapter 已打包的第三方库 。 如果你想使用 Python 社区海量的第三方库：诸如 Pygame 、 PyQt 、 PyTorch 、 flask ... extension 就办不到了，但 Adapter Node 可以！ ps: 如果你只是想把外部系统接入Adapter，也可以参考更为简单的: 与外部系统通信 提醒 实际上 Adapter Extension 是 AdapterNode 的子类. 我们希望 CodeLab Adapter 专注于连接万物，所以构建了 Adapter Node，允许你在任何地方创建 CodeLab Adapter 的扩展，允许你使用任何 Python 库，无论你准备构建游戏、构建网站、构建深度学习应用还是构建一个机器人！","text_tokens":["hello","参考","必须","、","外部","还是","创建","简单","不到","准备",":","系统","子类","！","构建","(","但","如何","_","只是","你","接入","无论","于","有","是","库","的",".","adapternode","允许","更为","办不到","打包","使用","已","codelab","机器人","在","海量",")","连接"," ","（","我们","/","机器","一节","三方","地方","...","python","）","提醒","可以","。","ps","应用","world","与","通信","所以","如下","自定义","一个","pygame","学习","上","学会","也","想","adapter","希望","flask","实际","pytorch","社区","扩展","专注","extensions","，","万物","自定","定义","第三方","任何","只能","如果","诸如","深度","中","~","把","：","实际上","了","extension","第三","目录","就","pyqt","放置","网站","插件","node","游戏","限制"],"title":"Adapter Node","title_tokens":[" ","node","adapter"]},{"location":"dev_guide/Adapter-Node/#adapter-node_1","text":"Adapter Node 只是普通的 Python 程序，继承自 AdapterNode 。","text_tokens":[" ","继承","node","自","。","只是","普通","程序","python","adapter","的","，","adapternode"],"title":"Adapter Node 是什么","title_tokens":[" ","node","什么","是","adapter"]},{"location":"dev_guide/Adapter-Node/#adapter-node_2","text":"我们开始写第一个 Adapter Node。 你需要完成这些前置工作： 安装了 Python3( >=3.6 ) pip3 install codelab_adapter_client --upgrade 接着可以随便在什么地方创建一个 Python 文件，随便给它起个名字，诸如 my_first_adapter_node.py ： 我们让这个 Node 的功能与 hello world 里我们自定义的插件功能相同：反转字符串 import time from loguru import logger from codelab_adapter_client import AdapterNode class EIMNode ( AdapterNode ): NODE_ID = \"eim\" DESCRIPTION = \"Everything Is a Message\" HELP_URL = \"https://adapter.codelab.club/extension_guide/eim/\" def __init__ ( self ): super () . __init__ () def send_message_to_scratch ( self , content ): message = self . message_template () message [ \"payload\" ][ \"content\" ] = content self . publish ( message ) def extension_message_handle ( self , topic , payload ): self . logger . info ( f 'the message payload from scratch: {payload}' ) content = payload [ \"content\" ] if type ( content ) == str : content_send_to_scratch = content [:: - 1 ] # 反转字符串 self . send_message_to_scratch ( content_send_to_scratch ) def run ( self ): while self . _running : time . sleep ( 1 ) if __name__ == \"__main__\" : try : node = EIMNode () node . receive_loop_as_thread () node . run () except KeyboardInterrupt : node . terminate () # Clean up before exiting.","text_tokens":["a","hello","install","eimnode","创建","让","type","https","before","id","init","前置","[","keyboardinterrupt","info","run","loguru","完成","这些",":","is","随便","(",",","scratch","字符","f","publish","}","3.6","给","_","你","eim","1",".","的","__","文件","adapternode","to","as","python3","codelab","logger","#",">","template","help","在","send","它","里","接着",")","receive","clean","需要"," ","/","我们","self","地方","if","exiting","try","pip3","python","名字","可以","py","str","'","。","工作","super","def","world","everything","与","from","payload","first","guide","topic","一个","自定义","起个","content","adapter","-","第一","import","terminate","sleep","the","\"","running","time","，","自定","反转","except","定义","字符串","thread","诸如","第一个","message","]","安装","up","什么","：","club","了","extension","handle","=","url","这个","upgrade","description","插件","{","开始","node","client","my","name","loop","main","while","class","相同","写","功能"],"title":"第一个 Adapter Node","title_tokens":[" ","node","第一","第一个","adapter","一个"]},{"location":"dev_guide/Adapter-Node/#_1","text":"打开 CodeLab Adapter（不需要选择插件），将 CodeLab Adapter 作为消息中心。 运行 my_first_adapter_node.py： python3 my_first_adapter_node.py 让我们在 CodeLab Scratch3 中尝试一下反转字符串： 成功！ 它只是普通的 Python 程序，使用你本地的 Python 环境，所以你现在可以任何你偏爱的Python库来增强 Scratch3 啦！","text_tokens":["可以","反转","尝试","字符串","任何","消息","py","。","中",".","选择","的","让","不","你","运行","：","python3","程序","使用","环境","所以","codelab","first","一下","在","现在","打开","它","！","普通","作为","字符","本地","adapter","需要","库来","成功"," ","（","插件","node","my","我们","啦","偏爱","增强","_","中心","只是","scratch3","将","python","）","，"],"title":"运行","title_tokens":["运行"]},{"location":"dev_guide/Adapter-Node/#gui","text":"有开发者在邮件中提到： tkinter、PyQt 都有一个主循环，Adapter Node 也有一个主循环，怎么才能共存呢？ Adapter Node 可以与任何 GUI 框架共存 if __name__ == \"__main__\": try: node = EIMNode() node.receive_loop_as_thread() node.run() except KeyboardInterrupt: node.terminate() # Clean up before exiting. 其中 node.run() 不是必要的，只是为了阻塞程序，使其不立刻结束，如果 GUI 框架本身已经有主循环，则可以移除 node.run() ， node.receive_loop_as_thread() 是非阻塞的。 以下是示范例子： from tkinter import * # AdapterNode from loguru import logger from codelab_adapter_client import AdapterNode class EIMNode ( AdapterNode ): NODE_ID = \"eim\" def __init__ ( self ): super () . __init__ () def send_message_to_scratch ( self , content ): message = self . message_template () message [ \"payload\" ][ \"content\" ] = content self . publish ( message ) def extension_message_handle ( self , topic , payload ): self . logger . info ( f 'the message payload from scratch: {payload}' ) content = payload [ \"content\" ] if type ( content ) == str : content_send_to_scratch = content [:: - 1 ] # 反转字符串 self . send_message_to_scratch ( content_send_to_scratch ) node = EIMNode () node . receive_loop_as_thread () # tkinter window = Tk () window . title ( \"Adapter Node & tkinter\" ) window . geometry ( '300x100' ) lbl = Label ( window , text = \"click to send message\" ) lbl . grid ( column = 0 , row = 0 ) i = 1 def clicked (): global i message = node . message_template () message [ \"payload\" ][ \"content\" ] = \"click_{}\" . format ( i ) node . publish ( message ) i += 1 btn = Button ( window , text = \"emit\" , command = clicked ) btn . grid ( column = 1 , row = 0 ) window . mainloop () 该 node 接收来自 Scratch EIM 的消息，并逆转字符串；当用户点击按钮时，给 Scratch 发送消息： click_<NUMBER>","text_tokens":["text","消息","lbl","、","eimnode","邮件","开发","before","不","？","type","id","init","emit","立刻","[","keyboardinterrupt","info","number","run",":","loguru","label","其中","(",",","scratch","字符","示范","f","publish","}","给","主","_","只是","mainloop","eim","gui","*","1","本身","有","是","&","结束","__",".","的","adapternode","geometry","to","as","tkinter","移除","以下","column","codelab","logger","#",">","template","在","send","command","；","时",")","receive","clean","呢","提到"," ","clicked","self","if","exiting","try","来自","点击","i","都","为了","可以","str","'","。","<","该","super","不是","共存","def","与","from","title","payload","当","有主","topic","一个","也","content","怎么","adapter","btn","则","并","-","300x100","terminate","import","0","开发者","the","才能","\"","，","click","format","except","反转","+","button","字符串","任何","thread","如果","是非","中","message","逆转","阻塞","]","其","例子","up","：","程序","row","框架","extension","handle","按钮","=","global","window","tk","pyqt","发送","循环","接收","{","loop","node","client","已经","name","用户","main","必要","使","class","grid"],"title":"GUI","title_tokens":["gui"]},{"location":"dev_guide/Adapter-Node/#_2","text":"如果你希望构建分布式的应用，诸如构建密室逃脱中的各种机关。只需要 做一下配置就行 ，让 CodeLab Adapter 接受分布式的请求。 你可以将 Adapter Node 跑在任何地方，来增强 CodeLab Adapter 的能力，无论是本地、云端还是分布式节点。 我们也正在构建其他语言的 client，你不会被限制在 Python 中，而是可以在任何编程语言任何平台上构建 Adapter Node。 参考： 编程语言支持","text_tokens":["可以","云端","逃脱","分布式","各种","机关","任何","无论","参考","只","接受","如果","诸如","。","、","中","就行","还是","请求","的","配置","让","应用","你","被","分布","语言","正在","：","codelab","而是","一下","在","也","上","其他","节点","构建","能力","跑","来","本地","编程","adapter","需要","无论是","希望"," ","编程语言","node","我们","client","平台","支持","做","地方","布式","密室","增强","不会","将","python","限制","，"],"title":"想象空间","title_tokens":["想象","空间"]},{"location":"dev_guide/Adapter-Node/#_3","text":"blender ：这是个实际的案例，演示如何使用 AdapterNode 基础类粘合不同软件，将其变为 Adapter Node。 examples node_v3","text_tokens":["这","类","。","是","v3","基础","的","adapternode","其","不同","粘合","案例","：","使用","演示","个","adapter","blender"," ","实际","node","如何","_","变为","软件","将","，","examples"],"title":"更多例子","title_tokens":["例子","更","多"]},{"location":"dev_guide/Architecture/","text":"Architecture ¶ 更多架构细节参考： 为 Scratch 3.0 设计的插件系统（下篇）","text_tokens":["¶","参考","architecture","为","更","的","细节","多","：","下篇","系统","设计","scratch"," ","插件","（","3.0","）","架构"],"title":"架构(Architecture)","title_tokens":[")","architecture","架构","("]},{"location":"dev_guide/Architecture/#architecture","text":"更多架构细节参考： 为 Scratch 3.0 设计的插件系统（下篇）","text_tokens":[" ","插件","（","3.0","参考","系统","为","的","：","更","设计","下篇","scratch","）","架构","细节","多"],"title":"Architecture","title_tokens":["architecture"]},{"location":"dev_guide/FAQ/","text":"FAQ for Developer ¶ 编辑文档 ¶ 欢迎大家来协同编辑文档： codelab-adapter-docs 。 讨论组 ¶ 陆续有开发者建议我构建论坛（discourse）和微信群方便大家讨论技术问题。 微信群无法沉淀有价值的内容，搜索功能太烂了，对富文本/markdown 的支持几近于无，微信不是好的办公工具。 与 CodeLab Adapter 相关技术问题，大家可以在 issue 里讨论。 也可以在 CodeLab Adapter 讨论组 里讨论。 插件启停 ¶ 目前，插件启动为线程。Python 线程需要 手动管理 ，这部分的代码目前还比较粗糙。为了允许用户在 UI 中通过勾选来启停插件。建议插件作者使用 while self._running: ，参考 extension_eim 。 在 1.0 版本发布之前，插件部分我们将迁往协程，如此一来我们就能轻易管理插件的启停。目前 Python 社区很多库还不支持协程，所以我们不打算立刻迁移。 引入第三方 Python 库 ¶ 内置的第三方库参考： wiki 。 如果你需要引入新的第三方库（如OpenCV），需要在本地安装有 Python3，可以参考： servers_v2 。 关于这个话题，我们日后会给出教程。 Python 与 Scratch 的双向通信 ¶ 参考 json message Python 与 Scratch 的双向通信 大多数情况下，你只需要发送和接受字符串就够了，这种风格与 Scratch 内置的广播极为相近。是典型的事件驱动风格。 这篇教程主要针对那些希望去拓展 Scratch 的人。当你需要将一些复杂的程序接入 Scratch（例如接入 AI 或者接入微信，如我们制作的例子），它会对你有帮助。 如何接入 Arduino ¶ 陆续有开发者问到，如何使用 CodeLab Adapter 将 Arduino 接入到 Scratch 3.0 中。 有许多种方法，但我比较偏好在 Arduino 中烧入 Firmata 固件。之后以固件交互，我在 两种硬件编程风格的比较 论述了这样做的好处。 之后使用 Firmata python client 与 Arduino 交互。 细节可以参考 Arduino 与 Scratch 3.0 。 支持哪些平台 ¶ 首先区分 CodeLab Adapter 和 CodeLab Adapter Node。 CodeLab Adapter 既是消息中心，又是UI程序，CodeLab Adapter 可以运行在： Windows（win7/win8/win10） Mac linux Ubuntu Raspbian Android CodeLab Adapter Node 可以运行在任何平台上，包括单片机。 覆盖配置文件 ¶ 为了方便开发者将 CodeLab Adapter 整合到其他软件中，作为服务使用，诸如整合到 Scratch Desktop ，或者整合到 docker 容器内，作为局域网消息服务…… CodeLab Adapter 允许以 命令行方式启动（没有GUI） 。 为了方便软件的二次分发和自定义，CodeLab Adapter 允许开发者覆盖用户配置文件( user_settings.py )，进而对 CodeLab Adapter 做初始化配置。 只需要将自定义的 user_settings.py 放在 CodeLab Adapter 同级目录中即可。 如何集成到 Electron ¶ 只需要集成 scratch3_eim 即可。 如果你想使用 socketio client 连接与 Adapter 沟通，参考 此处源码 。 Scratch里的小绿点是怎么实现的？ ¶ Scratch里的小绿点用于反应网页与Adapter的连通性, 小绿点的状态由 AdapterBaseClient connected 属性 决定。它属于 scratch-gui，而不属于scratch extension，这部分你需要自己实现。","text_tokens":["主要","参考","消息","价值","issue","配置文件","android","无","新","由","scratch","陆续","_","一来","初始化","for","eim","gui","linux","反应","只","discourse","局域","命令行","网页","文件","win7","以","settings","事件","里","它","两种","我们","针对","python","将","迁往","不是","如此一来","ubuntu","怎么","作为","本地","希望","-","一些","广播","社区","启动","拓展","软件","问题","很多","和","固件","事件驱动","如果","例如","安装","例子","自己","风格","extension","属性","目录","之前","多种","方便","文档","同级","微信群","client","大多数","沉淀","内","opencv","开发","目前","欢迎","方式","情况","二次",":","人","相近","平台","3.0","但","容器","首先","代码","即可","…","论坛","库","能","作者","配置","极为","而","在","需要","连接"," ","近于","状态","之后","user","对","servers","还","接受","。","单片","arduino","单片机","自定义","win8","问","firmata","开发者","running","多数","相关","双向","任何","诸如","建议","message","其他软件","细节","mac","又","进而","：","程序","这篇","发布","faq","插件","node","用户","那些","这种","打算","实现","docs","connected","¶","docker","属于","raspbian","adapterbaseclient","覆盖","线程","对富","构建","(",",","内容","许多","developer","比较","话题","会","接入","既","勾选来","windows","是","它会","的","连通","允许","codelab","搜索","教程",")","编程","/","放在","三方","为了","可以","粗糙","分发","启停","包括","硬件","论述","与","就够","通信","所以","用于","下","协程","来","adapter","手动","1.0","驱动","scratch3","内置","ai","通过","轻易","技术","如此","第三方","工具","中","v2","决定","版本","了","第三","整合","无法","这部","几近","日后","文本","局域网","功能","沟通","为","如","或者","json","不","好","？","立刻","讨论组","去","其他","到","字符","win10","协同","支持","做","如何","关于","你","中烧入","典型","有","部分","._",".","没有","python3","使用","这部分","编辑","迁移","好处","微信","electron","初始","socketio","（","self","小绿点","管理","给出","）","讨论","wiki","py","哪些","集成","我","复杂","运行","服务","大家","当","区分","帮助","也","上","想","源码","许多种","几近于","方法","办公","引入","中心","，","自定","定义","字符串","交互","markdown","通性","就","ui","连通性","这个","制作","此处","发送","大多","desktop","偏好","while","这样","太烂","双向通信","命令","编辑文档"],"title":"FAQ","title_tokens":["faq"]},{"location":"dev_guide/FAQ/#faq-for-developer","text":"","text_tokens":[],"title":"FAQ for Developer","title_tokens":[" ","faq","developer","for"]},{"location":"dev_guide/FAQ/#_1","text":"欢迎大家来协同编辑文档： codelab-adapter-docs 。","text_tokens":[" ","-","欢迎","：","。","docs","来","大家","codelab","adapter","编辑","文档","协同","编辑文档"],"title":"编辑文档","title_tokens":["编辑","文档","编辑文档"]},{"location":"dev_guide/FAQ/#_2","text":"陆续有开发者建议我构建论坛（discourse）和微信群方便大家讨论技术问题。 微信群无法沉淀有价值的内容，搜索功能太烂了，对富文本/markdown 的支持几近于无，微信不是好的办公工具。 与 CodeLab Adapter 相关技术问题，大家可以在 issue 里讨论。 也可以在 CodeLab Adapter 讨论组 里讨论。","text_tokens":["可以","相关","和","技术","discourse","。","论坛","有","工具","价值","建议","我","不是","的","开发","issue","好","markdown","与","讨论组","大家","了","codelab","无","对富","微信","在","也","搜索","里","构建","无法","方便","adapter","内容","陆续","微信群","（"," ","/","支持","几近","近于","几近于","沉淀","文本","办公","开发者","太烂","）","讨论","，","问题","功能"],"title":"讨论组","title_tokens":["讨论组","讨论"]},{"location":"dev_guide/FAQ/#_3","text":"目前，插件启动为线程。Python 线程需要 手动管理 ，这部分的代码目前还比较粗糙。为了允许用户在 UI 中通过勾选来启停插件。建议插件作者使用 while self._running: ，参考 extension_eim 。 在 1.0 版本发布之前，插件部分我们将迁往协程，如此一来我们就能轻易管理插件的启停。目前 Python 社区很多库还不支持协程，所以我们不打算立刻迁移。","text_tokens":["eim","粗糙","很多","如此","启停","参考","代码","为","还","勾选来","迁往","。","中","库","建议","部分","通过","._","的","如此一来","作者","能","不","目前","允许","版本","立刻","使用","所以","这部分","线程","迁移","发布","extension","在","就","ui",":","协程","之前","手动","需要","1.0","这部","插件"," ","我们","支持","用户","self","轻易","社区","打算","启动","比较","_","一来","管理","while","python","将","running","，","为了"],"title":"插件启停","title_tokens":["插件","启停"]},{"location":"dev_guide/FAQ/#python","text":"内置的第三方库参考： wiki 。 如果你需要引入新的第三方库（如OpenCV），需要在本地安装有 Python3，可以参考： servers_v2 。 关于这个话题，我们日后会给出教程。","text_tokens":["可以","wiki","servers","第三方","参考","opencv","如","。","如果","有","库","v2","的","安装","：","python3","第三","在","新","这个","教程","本地","需要"," ","（","我们","，","日后","三方","_","引入","关于","话题","会","内置","给出","）","你"],"title":"引入第三方 Python 库","title_tokens":[" ","第三方","三方","引入","库","python","第三"]},{"location":"dev_guide/FAQ/#python-scratch","text":"参考 json message Python 与 Scratch 的双向通信 大多数情况下，你只需要发送和接受字符串就够了，这种风格与 Scratch 内置的广播极为相近。是典型的事件驱动风格。 这篇教程主要针对那些希望去拓展 Scratch 的人。当你需要将一些复杂的程序接入 Scratch（例如接入 AI 或者接入微信，如我们制作的例子），它会对你有帮助。","text_tokens":["和","主要","接入","ai","参考","字符串","双向","典型","事件驱动","或者","只","接受","。","如","有","是","它会","message","例如","的","复杂","json","例子","极为","与","就够","通信","对","程序","这篇","去","情况","了","风格","当","帮助","微信","事件","下","制作","教程","）","scratch","发送","字符","人","大多","相近","需要","希望"," ","（","一些","我们","那些","广播","这种","，","大多数","拓展","针对","驱动","双向通信","python","内置","将","你","多数"],"title":"Python 与 Scratch 的双向通信","title_tokens":[" ","与","双向","通信","scratch","双向通信","python","的"]},{"location":"dev_guide/FAQ/#arduino","text":"陆续有开发者问到，如何使用 CodeLab Adapter 将 Arduino 接入到 Scratch 3.0 中。 有许多种方法，但我比较偏好在 Arduino 中烧入 Firmata 固件。之后以固件交互，我在 两种硬件编程风格的比较 论述了这样做的好处。 之后使用 Firmata python client 与 Arduino 交互。 细节可以参考 Arduino 与 Scratch 3.0 。","text_tokens":["可以","接入","参考","固件","。","有","中","我","的","arduino","细节","交互","开发","硬件","论述","与","使用","codelab","了","风格","好处","在","以","多种","到","两种","scratch","编程","问","adapter","许多种","陆续"," ","firmata","client","3.0","但","许多","之后","方法","如何","比较","开发者","做","偏好","这样","将","python","，","中烧入"],"title":"如何接入 Arduino","title_tokens":[" ","接入","arduino","如何"]},{"location":"dev_guide/FAQ/#_4","text":"首先区分 CodeLab Adapter 和 CodeLab Adapter Node。 CodeLab Adapter 既是消息中心，又是UI程序，CodeLab Adapter 可以运行在： Windows（win7/win8/win10） Mac linux Ubuntu Raspbian Android CodeLab Adapter Node 可以运行在任何平台上，包括单片机。","text_tokens":["可以","和","linux","包括","任何","消息","既","windows","。","单片","是","mac","又","win7","ubuntu","运行","：","raspbian","android","程序","codelab","单片机","区分","在","上","ui","win8","adapter","win10"," ","（","node","/","平台","中心","）","，","首先"],"title":"支持哪些平台","title_tokens":["支持","平台","哪些"]},{"location":"dev_guide/FAQ/#_5","text":"为了方便开发者将 CodeLab Adapter 整合到其他软件中，作为服务使用，诸如整合到 Scratch Desktop ，或者整合到 docker 容器内，作为局域网消息服务…… CodeLab Adapter 允许以 命令行方式启动（没有GUI） 。 为了方便软件的二次分发和自定义，CodeLab Adapter 允许开发者覆盖用户配置文件( user_settings.py )，进而对 CodeLab Adapter 做初始化配置。 只需要将自定义的 user_settings.py 放在 CodeLab Adapter 同级目录中即可。","text_tokens":["自定","gui","分发","和","docker","内","定义","消息","或者","py","只","即可","诸如","局域","…","。","中","其他软件","的","命令行",".","配置","开发","文件","进而","允许","配置文件","没有","服务","对","使用","方式","codelab","覆盖","二次","自定义","以","目录","其他","settings","初始","整合","到","(","scratch",")","方便","作为","adapter","需要","同级"," ","（","放在","用户","做","desktop","启动","user","开发者","_","软件","容器","初始化","命令","将","）","局域网","，","为了"],"title":"覆盖配置文件","title_tokens":["文件","配置文件","配置","覆盖"]},{"location":"dev_guide/FAQ/#electron","text":"只需要集成 scratch3_eim 即可。 如果你想使用 socketio client 连接与 Adapter 沟通，参考 此处源码 。","text_tokens":["eim","参考","沟通","只","即可","。","如果","集成","与","使用","想","源码","此处","socketio","adapter","需要","连接"," ","client","，","_","scratch3","你"],"title":"如何集成到 Electron","title_tokens":[" ","electron","如何","到","集成"]},{"location":"dev_guide/FAQ/#scratch","text":"Scratch里的小绿点用于反应网页与Adapter的连通性, 小绿点的状态由 AdapterBaseClient connected 属性 决定。它属于 scratch-gui，而不属于scratch extension，这部分你需要自己实现。","text_tokens":["gui","反应","。","部分","的","网页","不","决定","属于","你","连通","与","自己","adapterbaseclient","而","这部分","extension","属性","通性","用于","连通性","里","它","由",",","scratch","adapter","需要","这部"," ","-","小绿点","状态","实现","connected","，"],"title":"Scratch里的小绿点是怎么实现的？","title_tokens":["？","小绿点","里","实现","怎么","scratch","是","的"]},{"location":"dev_guide/REST-API/","text":"REST API ¶ CodeLab Adapter 内置 REST API。 出于安全考虑，该服务默认是关闭的。 你可以在 用户配置文件（ ~/codelab_adapter/user_settings.py ） 中将其开启 OPEN_REST_API = True 。 出于安全考虑，你需要使用 token 与 REST API 通信（你可以从 WebUI 中复制 token ），具体使用方式参考下边例子。 测试工具 ¶ 你可以使用 curl 、 httpie 、 postman 、AJAX 等与它交互。 我最喜欢 httpie ，安装 httpie 很简单： pip install httpie 设计思路 ¶ 在设计上，CodeLab Adapter REST API 受到 Home Assistant REST API 影响，它被设计为消息入口，从 REST API 进入的消息，将全部转化为 ZeroMQ 消息，REST API 就像一个透明的消息通道。 在 CodeLab Adapter 中消息有很多入口，gateway 负责将来自不同入口的消息，转化为统一的 ZeroMQ 消息，这种设计风格在 CodeLab Adapter 中很常见。 无论是 MQTT、HTTP、websocket……都被统一转化为 ZeroMQ 消息。 准备工作 ¶ 开始与 REST API 交互之前，确保已经打开了 CodeLab Adapter，确保用户配置文件中 OPEN_REST_API = True 。 发送消息到 Scratch3 ¶ 使用 httpie 给 Scratch3 发送 hello 消息，对应的命令为： http POST https://codelab-adapter.codelab.club:12358/api/message?token = 86d6d93124c341ae topic = \"adapter/nodes/data\" payload: = '{\"node_id\":\"eim\", \"content\":\"hello\"}' 记得将其中的 token 替换你自己的。 值得注意的是 payload 是 json 数据，发送 json 数据语法为 := ，详情参考 httpie 文档。 CodeLab Scratch3 将成功接受消息： 上述任务，对应的 curl 命令为： curl -X POST -H \"Content-Type: application/json\" \\ -d '{\"topic\": \"adapter/nodes/data\",\"payload\":{\"node_id\":\"eim\", \"content\":\"hello\"}}' \\ https://codelab-adapter.codelab.club:12358/api/message?token = 86d6d93124c341ae 可以看出 httpie 更加清晰简易。接下来的内容，我们都使用 httpie ，你可以使用 curl2httpie 将其转化为 curl 命令。 发送消息到 CodeLab Adapter Extension ¶ 运行命令之前，先运行 extension_eim 插件。 extension_eim 插件的 这行代码 将打印出它收到的消息。 使用 httpie 给 CodeLab Adapter Extension 发送 hello 消息，对应的命令为： http POST https://codelab-adapter.codelab.club:12358/api/message?token = 86d6d93124c341ae topic = \"scratch/extensions/command\" payload: = '{\"node_id\":\"eim\", \"content\":\"hello\"}' 启停插件 ¶ 由于我们已经将 CodeLab Adapter 内部 API 服务化了，所以使用 REST API 可以对 CodeLab Adapter 做任何粒度的控制（依然是受到 Home Assistant 的启发）。 提醒 启停extension 开启 extension_eim 插件： http POST https://codelab-adapter.codelab.club:12358/api/message?token = 86d6d93124c341ae topic = \"core/exts/operate\" payload: = '{ \"content\": \"start\", \"node_name\": \"extension_eim\"}' 在命令运行的瞬间，Web UI 会同步更新。 关闭插件 ¶ 关闭 extension_eim 插件： http POST https://codelab-adapter.codelab.club:12358/api/message?token = 86d6d93124c341ae topic = \"core/exts/operate\" payload: = '{ \"content\": \"stop\", \"node_name\": \"extension_eim\" }' 提醒 如果你要启停 node ，topic 为 core/nodes/operate 恶作剧 ¶ 如果你愿意，你可以搞个恶作剧，欺骗 Web UI 说 extension_eim 插件已经开启，但实际上并未开启，恶作剧的命令为： http POST https://codelab-adapter.codelab.club:12358/api/message?token = 86d6d93124c341ae topic = \"core/node/statu/change\" payload: = '{ \"content\": \"start\", \"node_name\": \"extension_eim\"}' 可以看到 Web UI 成功被你骗过去了:) 更多例子 ¶ 开灯/关灯 ¶ 如果你在 CodeLab Neverland 空间里，你可以使用 REST API 与空间里的所有事物互动。 开灯： http POST https://rpi.codelab.club:12358/api/message?token = 86d6d93124c341ae topic = \"to_HA\" payload: = '{ \"content\":{\"type\":\"call_service\",\"domain\":\"light\",\"service\":\"turn_on\",\"service_data\":{\"entity_id\":\"light.yeelight1\"}},\"node_id\": \"eim\"}' 关灯： http POST https://rpi.codelab.club:12358/api/message?token = 86d6d93124c341ae topic = \"to_HA\" payload: = '{ \"content\":{\"type\":\"call_service\",\"domain\":\"light\",\"service\":\"turn_off\",\"service_data\":{\"entity_id\":\"light.yeelight1\"}},\"node_id\": \"eim\"}' 升降窗帘 ¶ 降下窗帘： http POST https://rpi.codelab.club:12358/api/message?token = 86d6d93124c341ae topic = \"to_HA\" payload: = '{ \"content\":{\"type\":\"call_service\",\"domain\":\"cover\",\"service\":\"close_cover\",\"service_data\":{\"entity_id\":\"cover.0x00158d00034f6a69_cover\"}},\"node_id\": \"eim\"}' 升起窗帘： http POST https://rpi.codelab.club:12358/api/message?token = 86d6d93124c341ae topic = \"to_HA\" payload: = '{ \"content\":{\"type\":\"call_service\",\"domain\":\"cover\",\"service\":\"open_cover\",\"service_data\":{\"entity_id\":\"cover.0x00158d00034f6a69_cover\"}},\"node_id\": \"eim\"}' 想象空间 ¶ 你可以在浏览器中为 CodeLab Adapter 构建新的图形界面。 或者使用不同语言中写自动化脚本。 它也很适合用来教学 http 相关的内容。 黑客精神 ¶ CodeLab Adapter 的所有功能都已经被服务化，所以你可以使用 REST API 来做 CodeLab Adapter 所能做到的任何事情，无论是控制内部功能，还是发送消息（everything is a message）。唯一需要的知识是有关消息的结构，你可以使用 codelab-message-monitor 来观察消息结构。","text_tokens":["¶","a","参考","hello","搞个","消息","install","为","或者","更","、","喜欢","脚本","gateway","还是","具体","清晰","json","https","type","start","简单","id","愿意","多","语言","配置文件","关闭","先","webui","方式","默认","接下来","http","cover.0","自动化","准备","看出","入口",":","打开","其中","说","新","构建","设计","同步","到",",","上述","\\","scratch","骗","light","有关","内容","rpi","服务化","负责","}","domain","给","zeromq","但","中写","做","升起","语法","_","要","并未","统一","最","会","statu","互动","黑客","做到","所有","出于","你","浏览器","eim","内部","assistant","无论","代码","结构","依然","…","有","是","h","能","的",".","想象","配置","文件","core","中将","不同","受到","to","简易","yeelight1","观察","使用","由于","所","codelab","收到","开启","用来","考虑","在","settings","它","command","里","monitor","operate",")","需要","成功","rest","post"," ","（","/","我们","nodes","off","user","12358","来自","注意","将","窗帘","）","对","提醒","mqtt","都","任务","行","可以","出","这","更新","恶作剧","ajax","启停","py","知识","打印","'","。","工作","该","对应","详情","接受","安全","接下","curl2httpie","cover","我","websocket","更加","欺骗","x","被","运行","everything","与","服务","通信","ha","所以","影响","payload","精神","topic","降下","一个","?","上","也","测试工具","下边","事物","看到","转化","content","change","通道","升降","来","确保","adapter","自动","唯一","postman","-","实际","很","像","web","替换","关灯","neverland","scratch3","内置","数据","extensions","\"","空间","界面","，","启发","很多","86d6d93124c341ae","相关","测试","教学","任何","图形界面","控制","如果","从","工具","httpie","~","中","透明","常见","d","message","service","open","交互","安装","其","例子","记得","true","粒度","适合","close","：","自己","club","实际上","api","token","了","值得注意","全部","风格","extension","pip","on","等","图形","就","=","试工","ui","中为","data","思路","之前","exts","x00158d00034f6a69","发送","值得","瞬间","浏览","无论是","文档","turn","下来","{","插件","开始","node","用户","复制","已经","进入","这种","application","name","stop","开灯","call","事情","is","home","命令","entity","curl","过去","功能"],"title":"REST API","title_tokens":[" ","api","rest"]},{"location":"dev_guide/REST-API/#rest-api","text":"CodeLab Adapter 内置 REST API。 出于安全考虑，该服务默认是关闭的。 你可以在 用户配置文件（ ~/codelab_adapter/user_settings.py ） 中将其开启 OPEN_REST_API = True 。 出于安全考虑，你需要使用 token 与 REST API 通信（你可以从 WebUI 中复制 token ），具体使用方式参考下边例子。","text_tokens":["可以","参考","py","。","从","该","是","~","安全","中","的",".","open","配置","文件","具体","其","中将","例子","true","配置文件","关闭","与","服务","通信","webui","出于","使用","api","默认","token","codelab","方式","开启","考虑","在","settings","=","下边","adapter","需要","rest"," ","（","/","用户","复制","，","user","_","内置","）","你"],"title":"REST API","title_tokens":[" ","api","rest"]},{"location":"dev_guide/REST-API/#_1","text":"你可以使用 curl 、 httpie 、 postman 、AJAX 等与它交互。 我最喜欢 httpie ，安装 httpie 很简单： pip install httpie","text_tokens":["可以","ajax","install","。","、","httpie","喜欢","我","交互","你","安装","简单","与","：","使用","pip","等","它","postman"," ","很","最","curl","，"],"title":"测试工具","title_tokens":["工具","测试工具","测试","试工"]},{"location":"dev_guide/REST-API/#_2","text":"在设计上，CodeLab Adapter REST API 受到 Home Assistant REST API 影响，它被设计为消息入口，从 REST API 进入的消息，将全部转化为 ZeroMQ 消息，REST API 就像一个透明的消息通道。 在 CodeLab Adapter 中消息有很多入口，gateway 负责将来自不同入口的消息，转化为统一的 ZeroMQ 消息，这种设计风格在 CodeLab Adapter 中很常见。 无论是 MQTT、HTTP、websocket……都被统一转化为 ZeroMQ 消息。","text_tokens":["很多","assistant","无论","消息","为","。","从","常见","有","中","、","透明","…","gateway","的","websocket","不同","受到","被","api","影响","codelab","全部","风格","一个","http","上","在","就","入口","它","转化","设计","通道","mqtt","adapter","无论是","rest"," ","负责","很","进入","zeromq","像","这种","来自","home","统一","将","，","都"],"title":"设计思路","title_tokens":["思路","设计"]},{"location":"dev_guide/REST-API/#_3","text":"开始与 REST API 交互之前，确保已经打开了 CodeLab Adapter，确保用户配置文件中 OPEN_REST_API = True 。","text_tokens":["。","中","open","配置","交互","文件","true","与","配置文件","api","了","codelab","=","打开","之前","确保","adapter","rest"," ","开始","已经","用户","_","，"],"title":"准备工作","title_tokens":["准备","工作"]},{"location":"dev_guide/REST-API/#scratch3","text":"使用 httpie 给 Scratch3 发送 hello 消息，对应的命令为： http POST https://codelab-adapter.codelab.club:12358/api/message?token = 86d6d93124c341ae topic = \"adapter/nodes/data\" payload: = '{\"node_id\":\"eim\", \"content\":\"hello\"}' 记得将其中的 token 替换你自己的。 值得注意的是 payload 是 json 数据，发送 json 数据语法为 := ，详情参考 httpie 文档。 CodeLab Scratch3 将成功接受消息： 上述任务，对应的 curl 命令为： curl -X POST -H \"Content-Type: application/json\" \\ -d '{\"topic\": \"adapter/nodes/data\",\"payload\":{\"node_id\":\"eim\", \"content\":\"hello\"}}' \\ https://codelab-adapter.codelab.club:12358/api/message?token = 86d6d93124c341ae 可以看出 httpie 更加清晰简易。接下来的内容，我们都使用 httpie ，你可以使用 curl2httpie 将其转化为 curl 命令。","text_tokens":["hello","参考","消息","为","清晰","json","https","type","id","接下来","http","看出",":","其中","\\",",","上述","内容","}","给","语法","_","你","eim","h","是","的",".","简易","使用","codelab","成功","post"," ","/","我们","nodes","12358","注意","将","任务","都","可以","'","。","详情","对应","接受","curl2httpie","接下","更加","x","payload","topic","?","content","转化","adapter","-","替换","scratch3","数据","\"","，","86d6d93124c341ae","httpie","d","message","其","记得","：","自己","club","api","token","值得注意","=","data","发送","值得","文档","下来","{","node","application","命令","curl"],"title":"发送消息到 Scratch3","title_tokens":[" ","消息","到","发送","scratch3"]},{"location":"dev_guide/REST-API/#codelab-adapter-extension","text":"运行命令之前，先运行 extension_eim 插件。 extension_eim 插件的 这行代码 将打印出它收到的消息。 使用 httpie 给 CodeLab Adapter Extension 发送 hello 消息，对应的命令为： http POST https://codelab-adapter.codelab.club:12358/api/message?token = 86d6d93124c341ae topic = \"scratch/extensions/command\" payload: = '{\"node_id\":\"eim\", \"content\":\"hello\"}'","text_tokens":["eim","出","这","86d6d93124c341ae","hello","代码","消息","为","打印","'","。","httpie","对应","message","的",".","https","id","运行","先","：","club","使用","api","token","codelab","收到","payload","extension","topic","?","http","=",":","它","command","content","之前",",","发送","scratch","adapter","post"," ","插件","/","-","{","node","}","给","_","12358","命令","extensions","将","\"","，","行"],"title":"发送消息到 CodeLab Adapter Extension","title_tokens":[" ","消息","到","发送","codelab","adapter","extension"]},{"location":"dev_guide/REST-API/#_4","text":"由于我们已经将 CodeLab Adapter 内部 API 服务化了，所以使用 REST API 可以对 CodeLab Adapter 做任何粒度的控制（依然是受到 Home Assistant 的启发）。 提醒 启停extension 开启 extension_eim 插件： http POST https://codelab-adapter.codelab.club:12358/api/message?token = 86d6d93124c341ae topic = \"core/exts/operate\" payload: = '{ \"content\": \"start\", \"node_name\": \"extension_eim\"}' 在命令运行的瞬间，Web UI 会同步更新。","text_tokens":["https","start","http",":","同步",",","服务化","}","做","_","会","eim","内部","assistant","依然","是","的",".","core","受到","使用","由于","codelab","开启","在","operate","rest","post"," ","（","我们","/","12358","将","）","对","提醒","可以","更新","启停","'","。","运行","服务","所以","payload","topic","?","content","adapter","-","web","\"","启发","，","86d6d93124c341ae","任何","控制","message","粒度","：","club","api","token","了","extension","=","ui","exts","瞬间","插件","{","node","已经","name","home","命令"],"title":"启停插件","title_tokens":["插件","启停"]},{"location":"dev_guide/REST-API/#_5","text":"关闭 extension_eim 插件： http POST https://codelab-adapter.codelab.club:12358/api/message?token = 86d6d93124c341ae topic = \"core/exts/operate\" payload: = '{ \"content\": \"stop\", \"node_name\": \"extension_eim\" }' 提醒 如果你要启停 node ，topic 为 core/nodes/operate","text_tokens":["eim","86d6d93124c341ae","启停","为","'","如果","message",".","https","core","关闭","：","club","api","token","codelab","payload","extension","topic","?","http","=",":","content","exts",",","operate","adapter","post"," ","插件","/","-","{","node","name","}","，","stop","nodes","_","12358","要","\"","提醒","你"],"title":"关闭插件","title_tokens":["插件","关闭"]},{"location":"dev_guide/REST-API/#_6","text":"如果你愿意，你可以搞个恶作剧，欺骗 Web UI 说 extension_eim 插件已经开启，但实际上并未开启，恶作剧的命令为： http POST https://codelab-adapter.codelab.club:12358/api/message?token = 86d6d93124c341ae topic = \"core/node/statu/change\" payload: = '{ \"content\": \"start\", \"node_name\": \"extension_eim\"}' 可以看到 Web UI 成功被你骗过去了:)","text_tokens":["可以","eim","86d6d93124c341ae","恶作剧","搞个","为","'","如果","{","message","的",".","愿意","https","core","start","欺骗","被","：","实际上","club","api","token","codelab","了","payload","开启","extension","topic","?","http","=","ui","说",":","看到","content","change",",",")","骗","adapter","成功","post"," ","插件","实际","/","已经","-","node","但","web","，","name","}","_","并未","12358","statu","命令","\"","你","过去"],"title":"恶作剧","title_tokens":["恶作剧"]},{"location":"dev_guide/REST-API/#_7","text":"","text_tokens":[],"title":"更多例子","title_tokens":["例子","更","多"]},{"location":"dev_guide/REST-API/#_8","text":"如果你在 CodeLab Neverland 空间里，你可以使用 REST API 与空间里的所有事物互动。 开灯： http POST https://rpi.codelab.club:12358/api/message?token = 86d6d93124c341ae topic = \"to_HA\" payload: = '{ \"content\":{\"type\":\"call_service\",\"domain\":\"light\",\"service\":\"turn_on\",\"service_data\":{\"entity_id\":\"light.yeelight1\"}},\"node_id\": \"eim\"}' 关灯： http POST https://rpi.codelab.club:12358/api/message?token = 86d6d93124c341ae topic = \"to_HA\" payload: = '{ \"content\":{\"type\":\"call_service\",\"domain\":\"light\",\"service\":\"turn_off\",\"service_data\":{\"entity_id\":\"light.yeelight1\"}},\"node_id\": \"eim\"}'","text_tokens":["可以","eim","86d6d93124c341ae","'","如果","。","service","message","的",".","type","你","https","to","id","与","：","ha","yeelight1","club","使用","api","token","codelab","payload","on","topic","?","http","在","事物","=",":","里","content","data","light",",","turn","rpi","rest","post"," ","/","{","开灯","}","domain","node","call","off","关灯","_","12358","互动","neverland","entity","空间","\"","所有","，"],"title":"开灯/关灯","title_tokens":["/","开灯","关灯"]},{"location":"dev_guide/REST-API/#_9","text":"降下窗帘： http POST https://rpi.codelab.club:12358/api/message?token = 86d6d93124c341ae topic = \"to_HA\" payload: = '{ \"content\":{\"type\":\"call_service\",\"domain\":\"cover\",\"service\":\"close_cover\",\"service_data\":{\"entity_id\":\"cover.0x00158d00034f6a69_cover\"}},\"node_id\": \"eim\"}' 升起窗帘： http POST https://rpi.codelab.club:12358/api/message?token = 86d6d93124c341ae topic = \"to_HA\" payload: = '{ \"content\":{\"type\":\"call_service\",\"domain\":\"cover\",\"service\":\"open_cover\",\"service_data\":{\"entity_id\":\"cover.0x00158d00034f6a69_cover\"}},\"node_id\": \"eim\"}'","text_tokens":["eim","86d6d93124c341ae","'","cover","service","message",".","open","type","https","to","id","close","：","ha","club","api","token","codelab","payload","topic","降下","?","http","=",":","content","data","x00158d00034f6a69",",","rpi","post"," ","/","{","cover.0","}","domain","node","call","升起","_","12358","entity","窗帘","\""],"title":"升降窗帘","title_tokens":["升降","窗帘"]},{"location":"dev_guide/REST-API/#_10","text":"你可以在浏览器中为 CodeLab Adapter 构建新的图形界面。 或者使用不同语言中写自动化脚本。 它也很适合用来教学 http 相关的内容。","text_tokens":["可以","相关","教学","图形界面","或者","适合","。","脚本","的","不同","语言","使用","codelab","图形","用来","http","在","自动化","也","新","中为","它","构建","adapter","浏览","内容","自动"," ","很","中写","界面","你","浏览器"],"title":"想象空间","title_tokens":["想象","空间"]},{"location":"dev_guide/REST-API/#_11","text":"CodeLab Adapter 的所有功能都已经被服务化，所以你可以使用 REST API 来做 CodeLab Adapter 所能做到的任何事情，无论是控制内部功能，还是发送消息（everything is a message）。唯一需要的知识是有关消息的结构，你可以使用 codelab-message-monitor 来观察消息结构。","text_tokens":["可以","内部","a","无论","任何","消息","控制","知识","结构","。","是","message","能","还是","的","被","everything","服务","观察","所以","使用","api","所","codelab","is","有关","monitor","发送","来","adapter","需要","无论是","唯一","rest","服务化"," ","（","-","已经","，","做","事情","做到","）","所有","你","都","功能"],"title":"黑客精神","title_tokens":["精神","黑客"]},{"location":"dev_guide/debug/","text":"Debug ¶ 3 种 debug 方式 ¶ Adapter 本质是个消息系统，调试的关键是观察往来的消息。 目前有 3 种 debug 方式： 基于命令行的调试（只能看到消息） 基于日志的调试 (可以看到 log 信息) 我自己最偏好第一种： 基于命令行的调试 。如果你希望看到logger信息，则使用第2种方式(基于日志的调试)。 下边逐一陈述。 基于命令行的调试 ¶ 需要本地有 Python 环境（ Python >= 3.6 ） 安装 pip install codelab_adapter_client --upgrade codelab_adapter_client 会为你装上 2 个命令行调试工具： codelab-message-monitor codelab-message-trigger codelab-message-pub 运行 codelab-message-monitor ，你将看到在 CodeLab Adapter 中所有往来的消息。这是我目前最依赖的工具。 你也可以自行构建更适合自己的调试脚手架，推荐使用 sh ，这样你可以方便把 linux 工具箱里的工具都用上，同时又可以在 Python 语言中工作。 # pip install sh codelab_adapter_client # http://amoffat.github.io/sh/sections/asynchronous_execution.html#incremental-iteration import sh for line in sh . codelab_message_monitor ( _iter = True ): try : print ( sh . ack ( \"10\" , _in = line )) except : pass 基于日志的调试 ¶ 我们在 hello world #调试技巧 中提到了基于日志的调试。 在插件中打上日志： self.logger.info ，之后使用 tail -f ~/codelab_adapter/debug.log tail -f ~/codelab_adapter/info.log tail -f ~/codelab_adapter/error.log 便可实时查看日志。 Tip Windows 用户 ¶ Windows 缺少调试 unix/linux 工具集，调试起来可能有诸多不便，推荐使用 cmder ，如此一来你就能得到一大包好用的命令行工具。 log 过滤 ¶ 如果你觉得 log 输出的信息太多，可以使用 grep 观察你关注的信息，诸如我只关心 extension_hello_world.py 插件输出的信息： tail -f ~/codelab_adapter/info.log | grep extension_hello_world","text_tokens":["¶","过滤","hello","消息","install","更","陈述","iteration","得到","多","cmder","语言","目前","error","github","方式","info","unix","in","实时","trigger","http","技巧","sections","日志",":","系统","tip","构建","工具集","(",",","输出","本质","f","基于","3.6","10","_","一来","最","for","所有","你","debug","log","同时","linux","种","windows","只","有","3","是","ack","能","不便","的","命令行","调试",".","关心","大包","观察","使用","codelab","logger","自行","#",">","关键","查看","在","execution","print","里","可","monitor",")","需要"," ","（","/","我们","提到","self","之后","try","python","逐一","）","将","html","都","可能","可以","这","好用","脚手","打","py","适合","。","工作","io","我","如此一来","运行","world","一种","会为","推荐","sh","缺少","用","line","太","也","上","下边","依赖","看到","第","诸多不便","本地","adapter","则","希望","信息","-","第一","2","import","诸多","脚手架","一","amoffat","\"","，","except","关注","如此","只能","如果","诸如","工具","中","tail","~","message","又","往来","第一种","安装","把","true","：","自己","pub","环境","|","了","起来","grep","便","pip","asynchronous","extension","就","=","pass","个","upgrade","装上","方便","iter","incremental","插件","client","用户","觉得","工具箱","偏好","这样","命令"],"title":"debug","title_tokens":["debug"]},{"location":"dev_guide/debug/#debug","text":"","text_tokens":[],"title":"Debug","title_tokens":["debug"]},{"location":"dev_guide/debug/#3-debug","text":"Adapter 本质是个消息系统，调试的关键是观察往来的消息。 目前有 3 种 debug 方式： 基于命令行的调试（只能看到消息） 基于日志的调试 (可以看到 log 信息) 我自己最偏好第一种： 基于命令行的调试 。如果你希望看到logger信息，则使用第2种方式(基于日志的调试)。 下边逐一陈述。","text_tokens":["debug","可以","log","种","消息","只能","。","如果","有","是","3","陈述","我","的","命令行","调试","往来","第一种","你","目前","：","自己","一种","观察","使用","方式","logger","关键","下边","日志","系统","看到","第","个","(",")","adapter","本质","则","希望","信息"," ","（","基于","第一","2","偏好","最","命令","逐一","）","，"],"title":"3 种 debug 方式","title_tokens":[" ","debug","种","3","方式"]},{"location":"dev_guide/debug/#_1","text":"需要本地有 Python 环境（ Python >= 3.6 ） 安装 pip install codelab_adapter_client --upgrade codelab_adapter_client 会为你装上 2 个命令行调试工具： codelab-message-monitor codelab-message-trigger codelab-message-pub 运行 codelab-message-monitor ，你将看到在 CodeLab Adapter 中所有往来的消息。这是我目前最依赖的工具。 你也可以自行构建更适合自己的调试脚手架，推荐使用 sh ，这样你可以方便把 linux 工具箱里的工具都用上，同时又可以在 Python 语言中工作。 # pip install sh codelab_adapter_client # http://amoffat.github.io/sh/sections/asynchronous_execution.html#incremental-iteration import sh for line in sh . codelab_message_monitor ( _iter = True ): try : print ( sh . ack ( \"10\" , _in = line )) except : pass","text_tokens":["消息","install","更","iteration","语言","目前","github","in","trigger","http","sections",":","构建","(",",","3.6","10","_","最","for","所有","你","同时","linux","有","是","ack","的","命令行","调试",".","使用","codelab","自行","#",">","在","execution","print","里","monitor",")","需要"," ","（","/","try","python","将","）","html","都","可以","这","脚手","适合","。","工作","io","我","运行","会为","推荐","sh","用","line","也","上","依赖","看到","本地","adapter","-","2","import","脚手架","amoffat","\"","，","except","工具","中","message","又","往来","安装","把","true","：","自己","pub","环境","pip","asynchronous","=","pass","个","upgrade","装上","方便","iter","incremental","client","工具箱","这样","命令"],"title":"基于命令行的调试","title_tokens":["基于","命令","的","命令行","调试"]},{"location":"dev_guide/debug/#_2","text":"我们在 hello world #调试技巧 中提到了基于日志的调试。 在插件中打上日志： self.logger.info ，之后使用 tail -f ~/codelab_adapter/debug.log tail -f ~/codelab_adapter/info.log tail -f ~/codelab_adapter/error.log 便可实时查看日志。 Tip","text_tokens":["debug","log","打","hello","。","中","tail","~","的",".","调试","world","error","：","使用","了","logger","info","codelab","#","便","实时","查看","在","技巧","上","日志","可","tip","adapter","f"," ","提到","我们","基于","插件","self","-","/","之后","_","，"],"title":"基于日志的调试","title_tokens":["基于","的","日志","调试"]},{"location":"dev_guide/debug/#windows","text":"Windows 缺少调试 unix/linux 工具集，调试起来可能有诸多不便，推荐使用 cmder ，如此一来你就能得到一大包好用的命令行工具。","text_tokens":["好用","如此","linux","windows","。","工具","有","能","不便","如此一来","的","命令行","调试","得到","你","cmder","大包","使用","推荐","unix","起来","缺少","就","诸多不便","工具集"," ","/","诸多","一来","一","命令","，","可能"],"title":"Windows 用户","title_tokens":[" ","windows","用户"]},{"location":"dev_guide/debug/#log","text":"如果你觉得 log 输出的信息太多，可以使用 grep 观察你关注的信息，诸如我只关心 extension_hello_world.py 插件输出的信息： tail -f ~/codelab_adapter/info.log | grep extension_hello_world","text_tokens":["可以","log","关注","hello","py","只","如果","诸如","tail","~","我","的",".","多","你","关心","world","：","观察","使用","|","codelab","info","grep","extension","太","输出","adapter","f","信息"," ","插件","-","/","觉得","_","，"],"title":"log 过滤","title_tokens":[" ","log","过滤"]},{"location":"dev_guide/dev_articles/","text":"开发文章列表 ¶ 开发 ¶ 创建你的第一个 Scratch 3.0 Extension 如何开发一个 CodeLab Adapter 插件 构建并发布一个 CodeLab Adapter 插件(旧版本，不推荐) 将CodeLab Adapter用作Python解释器 Python 与 Scratch 的双向通信 使用 Python 拓展 Scratch 的能力 scratch3-adapter 支持第三方平台 CodeLab Adapter 增加REST API CodeLab Adapter支持在web页面启停插件 Arduino 与 Scratch 3.0 codelab.club ❤️ Vector 使用 Scratch 3.0 制作幻灯片 积木化编程与智能家居 CodeLab ❤️ Blender CodeLab Adapter 接入blender 架构设计 ¶ 为 Scratch 3.0 设计的插件系统（上篇） 为 Scratch 3.0 设计的插件系统（下篇）","text_tokens":["¶","为","页面","创建","开发","不","智能","释器","篇","系统","增加","构建","设计","(","scratch","能力","化","支持","平台","3.0","如何","列表","你","接入","智能家居","旧版本","vector","文章","的",".","下篇","使用","codelab","在",")","编程","rest"," ","（","三方","幻灯","将","python","）","积木","解释","幻灯片","启停","arduino","与","通信","旧版","推荐","一个","上","用作","adapter","并","blender","-","家居","第一","web","解释器","拓展","scratch3","，","第三方","双向","第一个","版本","club","api","架构设计","发布","extension","第三","️","构设","制作","插件","双向通信","❤","架构"],"title":"dev articles","title_tokens":[" ","articles","dev"]},{"location":"dev_guide/dev_articles/#_1","text":"","text_tokens":[],"title":"开发文章列表","title_tokens":["列表","文章","开发"]},{"location":"dev_guide/dev_articles/#_2","text":"创建你的第一个 Scratch 3.0 Extension 如何开发一个 CodeLab Adapter 插件 构建并发布一个 CodeLab Adapter 插件(旧版本，不推荐) 将CodeLab Adapter用作Python解释器 Python 与 Scratch 的双向通信 使用 Python 拓展 Scratch 的能力 scratch3-adapter 支持第三方平台 CodeLab Adapter 增加REST API CodeLab Adapter支持在web页面启停插件 Arduino 与 Scratch 3.0 codelab.club ❤️ Vector 使用 Scratch 3.0 制作幻灯片 积木化编程与智能家居 CodeLab ❤️ Blender CodeLab Adapter 接入blender","text_tokens":["接入","第三方","启停","智能家居","双向","旧版本","vector","第一个","页面","的","arduino","创建",".","开发","不","版本","与","智能","通信","释器","旧版","club","使用","api","codelab","推荐","发布","extension","第三","一个","在","️","用作","增加","构建","制作","(","scratch",")","能力","❤","编程","adapter","并","rest","化"," ","插件","-","支持","3.0","平台","blender","家居","第一","，","web","解释器","拓展","如何","三方","幻灯","双向通信","scratch3","将","python","积木","解释","你","幻灯片"],"title":"开发","title_tokens":["开发"]},{"location":"dev_guide/dev_articles/#_3","text":"为 Scratch 3.0 设计的插件系统（上篇） 为 Scratch 3.0 设计的插件系统（下篇）","text_tokens":[" ","插件","（","上","3.0","系统","为","设计","下篇","scratch","）","的","篇"],"title":"架构设计","title_tokens":["架构设计","架构","设计","构设"]},{"location":"dev_guide/helloworld/","text":"hello world(Adapter Extension) ¶ 我们来写一个自定义插件（extension），实现 hello world 。 一些唠叨 ¶ 如果你不爱听唠叨，这部分可以跳过：） 在 架构图 中，可以看到一个完整的插件包含两个部分： Scratch 3.0 网页中的插件（内应） 在 CodeLab Adapter 中写一个插件，代理硬件设备、AI 或其他程序 关于第一部分，尽管 Scratch3 官方的 extensions 机制已经可用了，我们也在 Scratch 3.0 中写了很多插件，但社区里文档不多，不大建议大家来踩坑，如果愿意折腾，可以参考 创建你的第一个 Scratch 3.0 Extension 。 我们在 CodeLab Scratch3 中构建了一些通用的消息积木（EIM），我们尽量将它做的通用，让开发者只需在 CodeLab Adapter 自定义插件，即可在 Scratch3 中使用。 这块的核心概念很简单，如 EIM 所代表的含义： Everything Is a Message ，消息是一种极其强大的概念，如 Alan Kay 说的： The big idea is messaging. 如果你用过 Smalltalk / ZeroMQ / Erlang 大概深有体会。 自定义插件 ¶ 我们来实现一个自定义插件： helloworld extension 我们构建这样一个自定义插件，它的功能为： 将 Scratch 发过来的字符串逆转，如果 Scratch 发过来的字符串为 hello world ，我们则向Scratch发送： dlrow olleh 该插件的源码为： import time from codelab_adapter.core_extension import Extension class HelloWorldExtension ( Extension ): NODE_ID = \"eim\" def __init__ ( self ): super () . __init__ () def send_message_to_scratch ( self , content ): message = self . message_template () message [ \"payload\" ][ \"content\" ] = content self . publish ( message ) def extension_message_handle ( self , topic , payload ): self . logger . info ( f 'the message payload from scratch: {payload}' ) content = payload [ \"content\" ] if type ( content ) == str : content_send_to_scratch = content [:: - 1 ] # 反转字符串 self . send_message_to_scratch ( content_send_to_scratch ) def run ( self ): while self . _running : time . sleep ( 1 ) export = HelloWorldExtension 代码很简单，而且大部分是样板代码，有几点值得注意： NODE_ID 默认为 eim ，可以不写。 extension_message_handle 是个回调函数，处理从 Scratch 过来的消息（一般由积木触发） run 是插件的主体代码，当你在 Web UI 中选择插件时，发生的事情是： 首先实例化插件类（在此是 export = EIMExtension ） 之后将 run 运行为线程。run 方法一般使用 while self._running 来阻塞， run 方法一旦结束，该插件的生命周期就结束了。 至于你要在 extension_message_handle 和 run 中写什么 Python 代码则是完全自由的。 将插件命名为 extension_hello_world.py ，将其放到插件目录里，Mac/Linux 用户的插件目录在： ~/codelab_adapter/extensions ，如果找不到插件目录（如 Windows 用户），可以通过 CodeLab Adapter 菜单栏上的 插件->查看目录 打开它。 刷新 Web UI，点击运行 extension_hello_world.py ，接着你就可以在 Scratch 中与你的插件交互了。 恭喜你，已经能够让 Scratch 与 Python 对话了，你现在可以用你的 Python 技能来为 Scratch 写拓展啦！ 提醒 你可以将自定义插件发布到 插件市场 , 用户点击即可下载使用。 调试技巧 ¶ 建议你在写 Python 插件的时候，先做好单元测试，然后再作为插件放到插件目录里运行。 如果你喜欢在真实环境里开发，可以使用 self.logger.info 来打日志（就像前头的代码里做的），你可以实时查看日志： tail -f ~/codelab_adapter/info.log ，日志目录可以通过菜单里的 日志->目录 打开。 更多 ¶ 你可以在插件中引用哪些 Python 库呢？ 所有的 Python 内置库（json/re/math/……）以及这些第三方库： 第三方模块 。 如果你对 EIM 在 Scratch3 一侧的源码感兴趣，我们也开源出来了，可以自行阅读： scratch3_eim 。 提醒 第三方模块 中有几个采用异步模式(async): aiohttp、hbmqtt、pymata-express。 自定义插件默认以线程运行 run 方法, 配合异步库使用的时候需要注意. 参考 extension_mqtt_broker.py 和 extension_arduino_uno.py 小结 ¶ 从这个例子中，可以看出写一个自定义的插件是很简单的。而 CodeLab Adapter 对插件要做的事几乎没有任何限制，只要 Python 能做的事，插件系统都能做！就是说你可以自己写一个插件，让 Scratch3 来控制你的蓝牙设备、你的 ROS 机器人、你那跑着 OpenCV 的树莓派或者你童年那辆心爱的玩具四驱车。 enjoy it～","text_tokens":["a","参考","消息","处理","喜欢","uno","那辆","id","菜单栏","先","init","smalltalk","树莓","向","[","不到","info","技巧","由","市场","scratch","}","四驱车","_","要","eim","生命","1","linux","只","网页","调试","core","to","kay","以","里","它","兴趣","我们","尽管","机器","enjoy","if","注意","将","python","积木","点击","打","'","官方","from","payload","用","看到","dlrow","作为","-","一些","菜单","就是","社区","像","import","拓展","\"","几个","很多","和","一侧","控制","如果","阻塞","]","设备","其","深有体会","例子","自己","extension","目录","=","事","ros","值得","文档","构图","已经","刷新","听","蓝牙","事情","找","opencv","唠叨","创建","愿意","开发","而且","机制","发过","触发","大","含义","看出",":","这些","打开","代理","3.0","可用","但","export","首先","log","it","代码","即可","express","…","模式","库","结束","能","开源","aiohttp","自由","而","自行",">","查看","发过来","在","时","函数","接着","idea","需要","坑"," ","之后","对","提醒","str","。","发生","arduino","def","world","topic","自定义","时候","content","一般","很","通用","web","着","几点","开发者","sleep","技能","the","running","time","此","任何","从","tail","建议","message","完整","mac","下载","踩","：","程序","环境","发布","玩具","handle","个","内应","插件","啦","node","用户","做好","实现","helloworld","大部分","写","¶","hello","更","单元","选择","让","多","默认","线程","实时","两个","心爱","然后","run","系统","概念","！","构建","(","强大",",","需","所有","感兴","架构图","windows","是","的","恭喜","引用","就是说","回调","codelab","send","派",")","跑","呢","/","感兴趣","erlang","三方","大概","折腾","实例","mqtt","可以","配合","命名","体会","包含","硬件","everything","与","一种","math","跳过","出来","re","一个","至于","不写","async","来","adapter","单元测试","则","第一","scratch3","extensions","内置","ai","阅读","通过","主体","eimextension","第三方","尽量","中","~","逆转","什么","了","值得注意","第三","过来","再","pymata","这部","{","big","真实","限制","功能","只要","为","如","或者","类","、","type","不","json","？","简单","对话","其他","日志","说","小结","is","中有","到","hbmqtt","字符","f","化","publish","zeromq","中写","做","关于","你","采用","完全","alan","有","部分","样板","._",".","messaging","helloworldextension","__","周期","没有","使用","所","一旦","这部分","logger","机器人","#","template","～","几乎","核心","生命周期","（","self","）","以及","都","过","那","py","大部","模块","该","哪些","super","驱车","运行","大家","当","爱","也","上","现在","源码","broker","或","方法","，","自定","反转","定义","测试","字符串","olleh","童年","第一个","交互","前头","代表","极其","这块","就","ui","放到","这个","能够","发送","异步","这样","while","class","架构"],"title":"hello world(Adapter Extension)","title_tokens":[" ","hello","world","(",")","adapter","extension"]},{"location":"dev_guide/helloworld/#hello-worldadapter-extension","text":"我们来写一个自定义插件（extension），实现 hello world 。","text_tokens":["自定","插件","我们","定义","（"," ","hello","world","自定义","实现","。","来","）","extension","，","一个","写"],"title":"hello world(Adapter Extension)","title_tokens":[" ","hello","world","(",")","adapter","extension"]},{"location":"dev_guide/helloworld/#_1","text":"如果你不爱听唠叨，这部分可以跳过：） 在 架构图 中，可以看到一个完整的插件包含两个部分： Scratch 3.0 网页中的插件（内应） 在 CodeLab Adapter 中写一个插件，代理硬件设备、AI 或其他程序 关于第一部分，尽管 Scratch3 官方的 extensions 机制已经可用了，我们也在 Scratch 3.0 中写了很多插件，但社区里文档不多，不大建议大家来踩坑，如果愿意折腾，可以参考 创建你的第一个 Scratch 3.0 Extension 。 我们在 CodeLab Scratch3 中构建了一些通用的消息积木（EIM），我们尽量将它做的通用，让开发者只需在 CodeLab Adapter 自定义插件，即可在 Scratch3 中使用。 这块的核心概念很简单，如 EIM 所代表的含义： Everything Is a Message ，消息是一种极其强大的概念，如 Alan Kay 说的： The big idea is messaging. 如果你用过 Smalltalk / ZeroMQ / Erlang 大概深有体会。","text_tokens":["a","参考","消息","如","唠叨","、","创建","让","多","不","愿意","开发","简单","smalltalk","机制","大","两个","含义","其他","说","概念","构建","is","强大","scratch","代理","需","3.0","可用","但","zeromq","中写","做","关于","你","eim","架构图","alan","只","即可","是","部分","的","网页","messaging",".","使用","所","codelab","这部分","在","kay","里","它","idea","核心","坑"," ","（","尽管","我们","/","erlang","将","）","积木","大概","折腾","可以","过","。","体会","包含","官方","硬件","everything","一种","大家","跳过","爱","一个","自定义","用","也","看到","来","adapter","一些","很","社区","第一","或","通用","开发者","scratch3","extensions","the","ai","，","自定","很多","定义","尽量","如果","中","第一个","建议","message","完整","设备","深有体会","代表","踩","：","程序","了","极其","extension","这块","文档","这部","构图","内应","插件","已经","big","听","架构"],"title":"一些唠叨","title_tokens":["一些","唠叨"]},{"location":"dev_guide/helloworld/#_2","text":"我们来实现一个自定义插件： helloworld extension 我们构建这样一个自定义插件，它的功能为： 将 Scratch 发过来的字符串逆转，如果 Scratch 发过来的字符串为 hello world ，我们则向Scratch发送： dlrow olleh 该插件的源码为： import time from codelab_adapter.core_extension import Extension class HelloWorldExtension ( Extension ): NODE_ID = \"eim\" def __init__ ( self ): super () . __init__ () def send_message_to_scratch ( self , content ): message = self . message_template () message [ \"payload\" ][ \"content\" ] = content self . publish ( message ) def extension_message_handle ( self , topic , payload ): self . logger . info ( f 'the message payload from scratch: {payload}' ) content = payload [ \"content\" ] if type ( content ) == str : content_send_to_scratch = content [:: - 1 ] # 反转字符串 self . send_message_to_scratch ( content_send_to_scratch ) def run ( self ): while self . _running : time . sleep ( 1 ) export = HelloWorldExtension 代码很简单，而且大部分是样板代码，有几点值得注意： NODE_ID 默认为 eim ，可以不写。 extension_message_handle 是个回调函数，处理从 Scratch 过来的消息（一般由积木触发） run 是插件的主体代码，当你在 Web UI 中选择插件时，发生的事情是： 首先实例化插件类（在此是 export = EIMExtension ） 之后将 run 运行为线程。run 方法一般使用 while self._running 来阻塞， run 方法一旦结束，该插件的生命周期就结束了。 至于你要在 extension_message_handle 和 run 中写什么 Python 代码则是完全自由的。 将插件命名为 extension_hello_world.py ，将其放到插件目录里，Mac/Linux 用户的插件目录在： ~/codelab_adapter/extensions ，如果找不到插件目录（如 Windows 用户），可以通过 CodeLab Adapter 菜单栏上的 插件->查看目录 打开它。 刷新 Web UI，点击运行 extension_hello_world.py ，接着你就可以在 Scratch 中与你的插件交互了。 恭喜你，已经能够让 Scratch 与 Python 对话了，你现在可以用你的 Python 技能来为 Scratch 写拓展啦！ 提醒 你可以将自定义插件发布到 插件市场 , 用户点击即可下载使用。","text_tokens":["hello","消息","为","如","类","处理","选择","让","type","而且","简单","id","菜单栏","init","向","发过","触发","[","默认","不到","info","线程","对话","run",":","打开","！","构建","由","市场","(",",","scratch","到","字符","f","化","publish","}","中写","export","_","要","你","首先","eim","生命","1","完全","linux","代码","windows","即可","有","是","部分","样板","._","的",".","helloworldextension","__","结束","core","恭喜","to","自由","周期","使用","回调","一旦","codelab","logger","#",">","template","查看","发过来","在","send","它","里","时","函数","接着",")","生命周期"," ","（","我们","/","self","之后","if","注意","将","python","）","积木","点击","提醒","实例","可以","str","py","大部","'","。","该","super","命名","发生","def","world","运行","与","from","payload","当","topic","自定义","一个","用","至于","上","现在","源码","不写","content","一般","dlrow","来","adapter","则","-","菜单","找","很","web","import","方法","几点","拓展","sleep","技能","extensions","the","\"","running","time","，","通过","自定","反转","和","定义","主体","此","eimextension","字符串","olleh","如果","从","中","~","逆转","message","阻塞","]","mac","交互","其","下载","什么","：","了","值得注意","发布","extension","handle","过来","目录","就","=","ui","放到","个","能够","发送","值得","插件","{","node","啦","用户","已经","刷新","实现","事情","这样","while","helloworld","class","大部分","写","功能"],"title":"自定义插件","title_tokens":["自定","定义","自定义","插件"]},{"location":"dev_guide/helloworld/#_3","text":"建议你在写 Python 插件的时候，先做好单元测试，然后再作为插件放到插件目录里运行。 如果你喜欢在真实环境里开发，可以使用 self.logger.info 来打日志（就像前头的代码里做的），你可以实时查看日志： tail -f ~/codelab_adapter/info.log ，日志目录可以通过菜单里的 日志->目录 打开。","text_tokens":["可以","log","测试","打","代码","。","如果","tail","喜欢","~","建议","单元","通过","的",".","开发","你","前头","运行","先","：","环境","使用","codelab","logger","info","实时","查看",">","然后","在","目录","就","日志","打开","时候","放到","里","再","来","作为","adapter","单元测试","f"," ","插件","（","-","做好","self","/","像","菜单","做","_","真实","python","）","，","写"],"title":"调试技巧","title_tokens":["技巧","调试"]},{"location":"dev_guide/helloworld/#_4","text":"你可以在插件中引用哪些 Python 库呢？ 所有的 Python 内置库（json/re/math/……）以及这些第三方库： 第三方模块 。 如果你对 EIM 在 Scratch3 一侧的源码感兴趣，我们也开源出来了，可以自行阅读： scratch3_eim 。 提醒 第三方模块 中有几个采用异步模式(async): aiohttp、hbmqtt、pymata-express。 自定义插件默认以线程运行 run 方法, 配合异步库使用的时候需要注意. 参考 extension_mqtt_broker.py 和 extension_arduino_uno.py","text_tokens":["参考","、","uno","json","？","默认","线程","run",":","这些","中有","(","hbmqtt",",","_","感兴","所有","你","eim","采用","express","…","模式","库","的",".","开源","引用","aiohttp","使用","自行","在","以",")","呢","需要","兴趣"," ","（","/","我们","感兴趣","三方","注意","python","对","以及","）","提醒","mqtt","可以","配合","py","模块","。","哪些","arduino","运行","math","出来","re","自定义","也","源码","时候","async","-","broker","方法","scratch3","内置","阅读","，","几个","自定","一侧","和","定义","第三方","如果","中","：","了","extension","第三","pymata","异步","插件"],"title":"更多","title_tokens":["更","多"]},{"location":"dev_guide/helloworld/#_5","text":"从这个例子中，可以看出写一个自定义的插件是很简单的。而 CodeLab Adapter 对插件要做的事几乎没有任何限制，只要 Python 能做的事，插件系统都能做！就是说你可以自己写一个插件，让 Scratch3 来控制你的蓝牙设备、你的 ROS 机器人、你那跑着 OpenCV 的树莓派或者你童年那辆心爱的玩具四驱车。 enjoy it～","text_tokens":["可以","自定","定义","那","it","只要","opencv","任何","或者","控制","。","从","、","童年","中","是","能","那辆","的","让","你","设备","例子","简单","驱车","没有","树莓","自己","而","就是说","机器人","codelab","玩具","心爱","自定义","一个","看出","事","系统","几乎","ros","～","！","这个","派","来","跑","adapter","插件"," ","就是","四驱车","很","机器","蓝牙","做","着","enjoy","要","scratch3","python","对","限制","，","都","写"],"title":"小结","title_tokens":["小结"]},{"location":"dev_guide/introduction/","text":"介绍 ¶ 欢迎来到开发者文档。 如果你对 CodeLab Adapter 的整体概念，并不熟悉，推荐从 如何开发一个 CodeLab Adapter 插件 入手。","text_tokens":["¶","来到","。","如果","从","整体","的","开发","你","不","欢迎","熟悉","codelab","推荐","一个","概念","adapter","文档","并"," ","插件","介绍","如何","开发者","入手","对","，"],"title":"介绍(introduction)","title_tokens":["介绍",")","introduction","("]},{"location":"dev_guide/introduction/#_1","text":"欢迎来到开发者文档。 如果你对 CodeLab Adapter 的整体概念，并不熟悉，推荐从 如何开发一个 CodeLab Adapter 插件 入手。","text_tokens":["来到","。","如果","从","整体","的","开发","不","你","欢迎","熟悉","codelab","推荐","一个","概念","adapter","文档","并"," ","插件","如何","开发者","入手","对","，"],"title":"介绍","title_tokens":["介绍"]},{"location":"dev_guide/json-message/","text":"json message ¶ 在 hello world 案例中，我们构建了这样一个程序：接收一个来自 Scratch3 的字符串（ hello world ），将其反转后（ dlrow olleh ）返回。 有时候字符串是不够用的，如果我们从 Scratch3 往 CodeLab Adapter extension 传递更复杂的数据结构怎么办呢？ 有两种办法： 自定义 Scratch3 extension，拓展 payload 结构： payload 使用 Scratch3 EIM extension，传递 json 消息。 第二种方式非常简单，不必去碰 Scratch 的东西，只要使用 Python 写 extension 就行，我们在此讨论这种方式。 传递 x、y 坐标 ¶ 设想这样一种应用场景：我们希望使用 Scratch 控制机器人（如 Cozmo）移动到特定的坐标位置 (x,y) 。 我们可以通过以下两个步骤完成： 在 Scratch3 中自定义新的积木 使用 Scratch3 json extension 构建 json 数据 使用 Scratch3 EIM extension 传递消息到 CodeLab Adapter 构建 CodeLab Adapter 插件： extension_robot_xy.py ，在插件中处理传递过来的 (x,y) 在 Scratch3 中自定义新的积木 ¶ 构建 CodeLab Adapter 插件 ¶ import time from codelab_adapter.core_extension import Extension class RobotXYExtension ( Extension ): NODE_ID = \"eim/robot\" s def __init__ ( self ): super () . __init__ () def extension_message_handle ( self , topic , payload ): self . logger . debug ( f 'the message payload from scratch: {payload}' ) content = payload [ \"content\" ] if type ( content ) == dict : x = content [ \"x\" ] y = content [ \"y\" ] self . logger . info ( f 'x:{x}; y:{y}' ) def run ( self ): while self . _running : time . sleep ( 1 ) export = RobotXYExtension 在此，值得注意的是 self.NODE_ID = \"eim/robot\" ，观察前头的截图，可以看出 \"eim/robot\" 与 Scratch3 eim 的积木块的对应关系。 开始测试 ¶ 如果你对如何运行 CodeLab Adapter extension 不熟悉，请参考 hello world 。 json message from CodeLab Adapter to Scratch3 ¶ 前头我们学会了如何将 json 消息从 Scratch3 发往 CodeLab Adapter，接下来我们学习如何将 json 消息从 CodeLab Adapter 发往 Scratch3。 我们来设计这样一个 CodeLab Adapter extension：每秒钟将一个随机的 (x,y) 发往 Scratch3，使用 (x,y) 来控制小猫的位置。 我们来修改 extension_robot_xy.py import time import random from codelab_adapter.core_extension import Extension class RobotXYExtension ( Extension ): NODE_ID = \"eim/robot\" def __init__ ( self ): super () . __init__ () def extension_message_handle ( self , topic , payload ): self . logger . debug ( f 'the message payload from scratch: {payload}' ) content = payload [ \"content\" ] if type ( content ) == dict : x = content [ \"x\" ] y = content [ \"y\" ] self . logger . info ( f 'x:{x}; y:{y}' ) def run ( self ): while self . _running : message = self . message_template () random_x = random . randint ( - 240 , 240 ) random_y = random . randint ( - 180 , 180 ) message [ \"payload\" ][ \"content\" ] = { \"x\" : random_x , \"y\" : random_y } self . publish ( message ) time . sleep ( 1 ) export = RobotXYExtension 重新勾选 extension_robot_xy 插件，现在你可以在 Scratch 中收到 CodeLab Adapte 传过来的 json 数据了！ 在 Scratch 一侧，使用 json 拓展来解析传递过来的消息。 提醒 ¶ 如果不是必要，尽量使用字符串消息。 Scratch 内部的消息就只支持字符串，这是一种很好的设计，因为它简单易理解。","text_tokens":["¶","hello","只要","xy","消息","参考","如","更","、","处理","东西","randint","第二种","勾选","json","设想","type","？","简单","往","id","不","好","init","熟悉","cozmo","不必","去","方式","[","后","info","接下来","两个","非常简单","新",":","完成","run","看出","！","构建","设计","到","(","scratch",",","步骤","字符","传递","发","f","随机","publish","支持","}","240","怎么办","每秒","export","如何","_","robot","因为","你","解析","eim","debug","内部","1","结构","只","有","是","位置","就行","的","不够",".","__","180","core","adapte","to","以下","观察","使用","机器人","codelab","logger","收到","二种","template","理解","在","碰","它","数据结构","两种","这是",")","呢","有时"," ","（","我们","/","self","机器","非常","if","截图","来自","注意","坐标","将","python","）","讨论","积木","对","提醒","可以","办法","秒钟","s","py","'","。","对应","super","接下","不是","复杂","易","def","应用","x","world","移动","与","运行","案例","from","传过来","一种","返回","payload","topic","一个","用","自定义","学习","学会","现在","时候","content","怎么","dlrow","请","来","random",";","adapter","关系","希望","修改","-","很","import","拓展","sleep","scratch3","数据","the","\"","running","，","通过","time","自定","反转","一侧","定义","此","测试","字符串","olleh","场景","尽量","控制","特定","如果","从","中","message","y","]","前头","其","：","传过","程序","了","每秒钟","值得注意","第二","extension","handle","过来","重新","=","就","值得","小猫","dict","下来","接收","插件","{","node","开始","这种","必要","这样","有时候","while","块","robotxyextension","class","写"],"title":"json message","title_tokens":[" ","message","json"]},{"location":"dev_guide/json-message/#json-message","text":"在 hello world 案例中，我们构建了这样一个程序：接收一个来自 Scratch3 的字符串（ hello world ），将其反转后（ dlrow olleh ）返回。 有时候字符串是不够用的，如果我们从 Scratch3 往 CodeLab Adapter extension 传递更复杂的数据结构怎么办呢？ 有两种办法： 自定义 Scratch3 extension，拓展 payload 结构： payload 使用 Scratch3 EIM extension，传递 json 消息。 第二种方式非常简单，不必去碰 Scratch 的东西，只要使用 Python 写 extension 就行，我们在此讨论这种方式。","text_tokens":["hello","只要","消息","更","东西","第二种","json","？","简单","往","不必","去","方式","后","非常简单","构建","scratch","字符","传递","怎么办","eim","结构","有","是","就行","的","不够","使用","codelab","二种","在","碰","数据结构","两种","呢","有时"," ","（","我们","非常","来自","将","python","）","讨论","办法","。","复杂","world","案例","返回","payload","一个","用","自定义","时候","怎么","dlrow","adapter","拓展","scratch3","数据","，","自定","反转","定义","此","字符串","olleh","如果","从","中","其","：","程序","了","第二","extension","接收","这种","这样","有时候","写"],"title":"json message","title_tokens":[" ","message","json"]},{"location":"dev_guide/json-message/#xy","text":"设想这样一种应用场景：我们希望使用 Scratch 控制机器人（如 Cozmo）移动到特定的坐标位置 (x,y) 。 我们可以通过以下两个步骤完成： 在 Scratch3 中自定义新的积木 使用 Scratch3 json extension 构建 json 数据 使用 Scratch3 EIM extension 传递消息到 CodeLab Adapter 构建 CodeLab Adapter 插件： extension_robot_xy.py ，在插件中处理传递过来的 (x,y)","text_tokens":["可以","自定","eim","定义","场景","xy","消息","py","控制","如","特定","。","位置","中","处理","y","的",".","json","设想","应用","x","移动","以下","：","一种","cozmo","使用","机器人","codelab","extension","两个","自定义","过来","在","新","完成","构建","到","(","scratch",",",")","步骤","传递","adapter","希望"," ","（","我们","插件","机器","，","_","这样","robot","坐标","scratch3","数据","）","积木","通过"],"title":"传递 x、y 坐标","title_tokens":[" ","x","、","传递","坐标","y"]},{"location":"dev_guide/json-message/#scratch3","text":"","text_tokens":[],"title":"在 Scratch3 中自定义新的积木","title_tokens":[" ","在","自定","定义","新","中","scratch3","积木","的","自定义"]},{"location":"dev_guide/json-message/#codelab-adapter","text":"import time from codelab_adapter.core_extension import Extension class RobotXYExtension ( Extension ): NODE_ID = \"eim/robot\" s def __init__ ( self ): super () . __init__ () def extension_message_handle ( self , topic , payload ): self . logger . debug ( f 'the message payload from scratch: {payload}' ) content = payload [ \"content\" ] if type ( content ) == dict : x = content [ \"x\" ] y = content [ \"y\" ] self . logger . info ( f 'x:{x}; y:{y}' ) def run ( self ): while self . _running : time . sleep ( 1 ) export = RobotXYExtension 在此，值得注意的是 self.NODE_ID = \"eim/robot\" ，观察前头的截图，可以看出 \"eim/robot\" 与 Scratch3 eim 的积木块的对应关系。","text_tokens":["type","id","init","[","info","run","看出",":","(",",","scratch","f","}","export","_","robot","eim","debug","1","是",".","__","的","core","观察","codelab","logger","在",")"," ","/","self","if","截图","注意","积木","可以","s","'","。","对应","super","def","x","与","from","payload","topic","content",";","adapter","关系","import","sleep","scratch3","the","\"","running","，","time","此","message","y","]","前头","值得注意","extension","handle","=","值得","dict","{","node","while","块","robotxyextension","class"],"title":"构建 CodeLab Adapter 插件","title_tokens":[" ","插件","构建","codelab","adapter"]},{"location":"dev_guide/json-message/#_1","text":"如果你对如何运行 CodeLab Adapter extension 不熟悉，请参考 hello world 。","text_tokens":[" ","不","运行","参考","，","hello","world","如何","如果","熟悉","。","请","codelab","adapter","对","extension","你"],"title":"开始测试","title_tokens":["开始","测试"]},{"location":"dev_guide/json-message/#json-message-from-codelab-adapter-to-scratch3","text":"前头我们学会了如何将 json 消息从 Scratch3 发往 CodeLab Adapter，接下来我们学习如何将 json 消息从 CodeLab Adapter 发往 Scratch3。 我们来设计这样一个 CodeLab Adapter extension：每秒钟将一个随机的 (x,y) 发往 Scratch3，使用 (x,y) 来控制小猫的位置。 我们来修改 extension_robot_xy.py import time import random from codelab_adapter.core_extension import Extension class RobotXYExtension ( Extension ): NODE_ID = \"eim/robot\" def __init__ ( self ): super () . __init__ () def extension_message_handle ( self , topic , payload ): self . logger . debug ( f 'the message payload from scratch: {payload}' ) content = payload [ \"content\" ] if type ( content ) == dict : x = content [ \"x\" ] y = content [ \"y\" ] self . logger . info ( f 'x:{x}; y:{y}' ) def run ( self ): while self . _running : message = self . message_template () random_x = random . randint ( - 240 , 240 ) random_y = random . randint ( - 180 , 180 ) message [ \"payload\" ][ \"content\" ] = { \"x\" : random_x , \"y\" : random_y } self . publish ( message ) time . sleep ( 1 ) export = RobotXYExtension 重新勾选 extension_robot_xy 插件，现在你可以在 Scratch 中收到 CodeLab Adapte 传过来的 json 数据了！ 在 Scratch 一侧，使用 json 拓展来解析传递过来的消息。","text_tokens":["xy","消息","randint","勾选","json","type","往","id","init","[","info","接下来","run",":","！","设计","(",",","scratch","发","传递","f","随机","publish","}","240","每秒","如何","export","_","robot","你","解析","eim","debug","1","位置","的",".","__","180","core","adapte","使用","codelab","logger","收到","template","在",")"," ","/","我们","self","if","将","可以","秒钟","py","'","。","super","接下","def","x","from","传过来","payload","topic","一个","学习","学会","现在","content","来","random",";","adapter","修改","-","import","拓展","sleep","scratch3","the","数据","\"","running","time","，","一侧","控制","从","中","message","y","]","前头","：","传过","了","每秒钟","extension","handle","过来","重新","=","小猫","dict","下来","{","插件","node","这样","while","robotxyextension","class"],"title":"json message from CodeLab Adapter to Scratch3","title_tokens":[" ","to","from","scratch3","codelab","message","adapter","json"]},{"location":"dev_guide/json-message/#_2","text":"如果不是必要，尽量使用字符串消息。 Scratch 内部的消息就只支持字符串，这是一种很好的设计，因为它简单易理解。","text_tokens":["内部","字符串","尽量","消息","只","如果","。","不是","的","易","好","简单","一种","使用","理解","就","它","设计","这是","scratch","字符"," ","支持","很","必要","因为","，"],"title":"提醒","title_tokens":["提醒"]},{"location":"dev_guide/mqtt-Adapter-Node/","text":"MQTT Adapter Node ¶ 提醒 还未迁移到 Adapter 3.0, 推荐先使用 MQTT_adapter 提醒：需要使用 CodeLab Adapter 最新版本 。 通过继承 AdapterMQTTNode ，我们可以利用 MQTT 通道构建 Adapter Node，一旦你理解 MQTT message 的消息细节，就可以在任何平台任何设备上构建 Adapter Node，从超级计算机到单片机。 如果你对 Adapter Node 概念不熟悉，可以参考 这里 。 依赖 ¶ pip install codelab_adapter_mqtt_client Demo ¶ 依然以反转字符串为例： 参考 helloworld_mqtt_node.py import json import time from codelab_adapter_mqtt_client import AdapterMQTTNode from codelab_adapter_mqtt_client.topic import * from loguru import logger class HelloWorldMQTTNode ( AdapterMQTTNode ): def __init__ ( self , * args , ** kwargs ): kwargs [ \"logger\" ] = logger kwargs [ \"external_message_processor\" ] = self . external_message_processor super () . __init__ ( * args , ** kwargs ) self . NODE_ID = \"eim\" def external_message_processor ( self , topic , payload ): self . logger . debug ( payload ) content = payload [ \"zmq_payload\" ][ \"content\" ] NODE_ID = payload [ \"zmq_payload\" ][ \"NODE_ID\" ] if type ( content ) == str : content_send_to_scratch = content [:: - 1 ] # 反转 payload [ \"zmq_payload\" ][ \"content\" ] = content_send_to_scratch self . publish ( payload ) if __name__ == \"__main__\" : node = HelloWorldMQTTNode () try : node . client . on_message = node . mqtt_on_message node . run () except KeyboardInterrupt : print ( 'Control-C detected. See you soon.' ) node . clean_up () 运行 ¶ 打开 CodeLab Adapter，运行 extension_mqtt_gateway 插件，该插件在 zeromq 与 mqtt 直接进行转换。 运行 helloworld_mqtt_node： python helloworld_mqtt_node.py 让我们在 CodeLab Scratch3 中尝试一下反转字符串： 成功！ AdapterMQTTNode 已经开源在 GitHub 上，如果你对任何细节感到好奇，就把盒子拆开来看吧。 Debug ¶ 新开一个窗口，运行 codelab-mqtt-monitor （随 codelab_adapter_mqtt_client 一起安装），你将能够看到往来的 MQTT message 的内部细节。 想象空间 ¶ 当你通过 codelab-mqtt-monitor 了解了 MQTT message 的内部细节，你就可以使用任何语言的 MQTT client 来构建 Adapter Node！你甚至可以在一个单片机中构建 Adapter Node！ 更多 MQTT tools ¶ 参考 codelab_adapter_mqtt_client#tools for debugging 。","text_tokens":["¶","参考","消息","install","更","gateway","让","json","不","type","转换","多","id","进行","语言","先","soon","init","熟悉","github","[","keyboardinterrupt","run","loguru",":","打开","计算机","概念","！","构建","到",",","(","scratch","字符","publish","继承","平台","拆开","3.0","demo","zeromq","_","为例","for","计算","你","processor","算机","窗口","eim","debug","内部","尝试","*","zmq","1","了解","依然","新开","直接","的",".","__","想象","最新","开源","随","to","使用","一旦","codelab","迁移","logger","you","#","一下","理解","在","以","send","print","monitor",")","clean","kwargs","好奇","需要","未","成功"," ","（","我们","self","debugging","这里","external","if","一起","try","python","将","对","）","提醒","mqtt","可以","还","py","str","detected","'","。","单片","该","tools","super","def","运行","与","from","see","甚至","盒子","推荐","单片机","payload","当","topic","一个","上","依赖","看到","content","args","通道","超级计算机","来","adapter","-","import","scratch3","吧","空间","\"","adaptermqttnode","通过","time","，","来看","反转","except","字符串","任何","如果","从","control","感到","中","message","细节","]","往来","设备","安装","把","版本","up","超级","：","利用","了","on","extension","pip","就","=","能够","c","插件","node","client","已经","name","main","helloworldmqttnode","helloworld","class"],"title":"MQTT Adapter Node(正在迁移中)","title_tokens":[" ","node","迁移","正在","(",")","中","adapter","mqtt"]},{"location":"dev_guide/mqtt-Adapter-Node/#mqtt-adapter-node","text":"提醒 还未迁移到 Adapter 3.0, 推荐先使用 MQTT_adapter 提醒：需要使用 CodeLab Adapter 最新版本 。 通过继承 AdapterMQTTNode ，我们可以利用 MQTT 通道构建 Adapter Node，一旦你理解 MQTT message 的消息细节，就可以在任何平台任何设备上构建 Adapter Node，从超级计算机到单片机。 如果你对 Adapter Node 概念不熟悉，可以参考 这里 。","text_tokens":["可以","参考","任何","还","消息","。","从","单片","如果","message","通过","的","细节","最新","你","设备","不","版本","先","算机","超级","：","利用","熟悉","对","使用","一旦","codelab","推荐","迁移","单片机","理解","在","上","就","计算机","概念","构建","通道","到",",","超级计算机","adapter","需要","未"," ","继承","我们","node","3.0","平台","，","这里","_","计算","提醒","mqtt","adaptermqttnode"],"title":"MQTT Adapter Node","title_tokens":[" ","node","mqtt","adapter"]},{"location":"dev_guide/mqtt-Adapter-Node/#_1","text":"pip install codelab_adapter_mqtt_client","text_tokens":[" ","client","install","_","mqtt","codelab","adapter","pip"],"title":"依赖","title_tokens":["依赖"]},{"location":"dev_guide/mqtt-Adapter-Node/#demo","text":"依然以反转字符串为例： 参考 helloworld_mqtt_node.py import json import time from codelab_adapter_mqtt_client import AdapterMQTTNode from codelab_adapter_mqtt_client.topic import * from loguru import logger class HelloWorldMQTTNode ( AdapterMQTTNode ): def __init__ ( self , * args , ** kwargs ): kwargs [ \"logger\" ] = logger kwargs [ \"external_message_processor\" ] = self . external_message_processor super () . __init__ ( * args , ** kwargs ) self . NODE_ID = \"eim\" def external_message_processor ( self , topic , payload ): self . logger . debug ( payload ) content = payload [ \"zmq_payload\" ][ \"content\" ] NODE_ID = payload [ \"zmq_payload\" ][ \"NODE_ID\" ] if type ( content ) == str : content_send_to_scratch = content [:: - 1 ] # 反转 payload [ \"zmq_payload\" ][ \"content\" ] = content_send_to_scratch self . publish ( payload ) if __name__ == \"__main__\" : node = HelloWorldMQTTNode () try : node . client . on_message = node . mqtt_on_message node . run () except KeyboardInterrupt : print ( 'Control-C detected. See you soon.' ) node . clean_up ()","text_tokens":["参考","json","type","id","soon","init","[","keyboardinterrupt","run","loguru",":","(",",","scratch","字符","publish","_","为例","processor","eim","debug","*","zmq","1","依然",".","__","to","you","codelab","logger","#","以","send","print",")","clean","kwargs"," ","self","external","if","try","mqtt","py","str","detected","'","super","def","from","see","payload","topic","content","args","adapter","-","import","\"","adaptermqttnode","time","反转","except","字符串","control","message","]","up","：","on","=","c","node","client","name","main","helloworldmqttnode","helloworld","class"],"title":"Demo","title_tokens":["demo"]},{"location":"dev_guide/mqtt-Adapter-Node/#_2","text":"打开 CodeLab Adapter，运行 extension_mqtt_gateway 插件，该插件在 zeromq 与 mqtt 直接进行转换。 运行 helloworld_mqtt_node： python helloworld_mqtt_node.py 让我们在 CodeLab Scratch3 中尝试一下反转字符串： 成功！ AdapterMQTTNode 已经开源在 GitHub 上，如果你对任何细节感到好奇，就把盒子拆开来看吧。","text_tokens":["来看","反转","尝试","字符串","任何","py","。","如果","该","感到","中","直接","gateway",".","细节","让","你","转换","开源","进行","运行","把","与","：","github","盒子","codelab","extension","一下","在","上","就","打开","！","字符","好奇","adapter","成功"," ","插件","node","我们","已经","拆开","zeromq","，","_","scratch3","python","helloworld","对","吧","adaptermqttnode","mqtt"],"title":"运行","title_tokens":["运行"]},{"location":"dev_guide/mqtt-Adapter-Node/#debug","text":"新开一个窗口，运行 codelab-mqtt-monitor （随 codelab_adapter_mqtt_client 一起安装），你将能够看到往来的 MQTT message 的内部细节。","text_tokens":["内部","。","新开","message","的","细节","往来","安装","随","运行","codelab","一个","看到","monitor","能够","mqtt","adapter"," ","-","（","client","，","一起","_","将","）","你","窗口"],"title":"Debug","title_tokens":["debug"]},{"location":"dev_guide/mqtt-Adapter-Node/#_3","text":"当你通过 codelab-mqtt-monitor 了解了 MQTT message 的内部细节，你就可以使用任何语言的 MQTT client 来构建 Adapter Node！你甚至可以在一个单片机中构建 Adapter Node！","text_tokens":["可以","内部","了解","任何","单片","中","message","通过","的","细节","语言","甚至","使用","codelab","了","单片机","当","一个","在","就","！","构建","monitor","来","mqtt","adapter"," ","-","node","client","，","你"],"title":"想象空间","title_tokens":["想象","空间"]},{"location":"dev_guide/mqtt-Adapter-Node/#mqtt-tools","text":"参考 codelab_adapter_mqtt_client#tools for debugging 。","text_tokens":[" ","client","参考","debugging","tools","。","_","codelab","adapter","for","#","mqtt"],"title":"更多 MQTT tools","title_tokens":[" ","tools","更","mqtt","多"]},{"location":"dev_guide/multi-language-support/","text":"编程语言支持 ¶ CodeLab Adapter的核心是一个消息系统，它是平台和编程语言无关的，理论上你可以使用任何编程语言来扩展CodeLab Adapter。 我们正在陆续构建多种语言的CodeLab Adapter client。 如果你只需要简单集成，参考 与其他编程语言集成 ,目前已经给出30+种编程语言的例子。 当前文档展示的是深度集成(ZeroMQ client)。 nodejs ¶ 以下展示如何在nodejs中构建 Adapter Node 。依然是以反转字符串为例。 首先安装依赖: npm i codelab_adapter_client_nodejs , 接着随便找个地方, 创建脚本文件: hello_world.js : const AdapterNode = require ( 'codelab_adapter_client_nodejs' ); const ADAPTER_TOPIC = \"adapter/nodes/data\" ; class HelloWorldNode extends AdapterNode { constructor () { super ({ name : \"EIMNode\" }); this . num = 0 ; this . receive_loop (); } message_handle ( topic , payload ) { console . log ( `from scratch: topic: ${ topic } , payload: ${ JSON . stringify ( payload ) } ` ); const content = payload . content ; const reverse_content = content . split ( \"\" ) . reverse () . join ( \"\" ); const message = { topic : ADAPTER_TOPIC , payload : { content : reverse_content , node_id : 'eim' } }; this . publish_payload ( message . payload , message . topic ); } pub_message () { this . num += 1 ; const message = { topic : ADAPTER_TOPIC , payload : { content : this . num } }; this . publish_payload ( message . payload , message . topic ); } run () { this . pub_message (); } } try { m = new HelloWorldNode (); m . run (); } catch ( err ) { console . log ( err ); process . exit (); } 运行CodeLab Adapter（作为消息中心）, 运行我们的拓展: node hello_world.js 让我们在 CodeLab Scratch3 中尝试一下反转字符串: 成功！ LISP ¶ 依赖: pip install hy hy 是一门LISP方言，构建在Python之上，可以使用Python生态里的所有库。于是我们可以很方便地构建Adapter Node: hello_world.hy ( import codelab_adapter_client ) ( import time ) ( defclass HelloWorldNode [codelab_adapter_client.AdapterNode] \"LISP hello world node\" ( defn --init-- [self] ( . --init-- ( super )) ( setv self.NODE_ID \"eim\" )) ( defn extension-message-handle [self topic payload] ( print f \"the message payload from scratch: {payload}\" ) ( setv content ( list ( get payload \"content\" ))) ( . reverse content ) ( payload.__setitem__ \"content\" ( . join \"\" content )) ( print payload ) ( self.publish { \"payload\" payload} ) ) ( defn run [self] ( while self._running ( time.sleep 1 ))) ) ( setv node ( HelloWorldNode )) ( . receive-loop-as-thread node ) ( . run node ) 运行CodeLab Adapter（作为消息中心）, 运行我们的拓展: hy hello_world.hy 很多Python内置函数没有写成LISP风格，所以看起来没什么LISP风味，更多Python风味。 SmallTalk ¶ Ruby ¶","text_tokens":["¶","参考","无关","hello","消息","install","更","之上","num","脚本","eimnode","创建","让","json","多","简单","id","语言","目前","正在","init","smalltalk","[","其他","展示",":","系统","reverse","run","err","！","构建","随便","(",",","scratch","字符","陆续","f","require","方言","publish","没什么","支持","平台","}","zeromq","如何","_","找个","为例","nodejs","你","所有","首先","eim","log","尝试","1","种","只","依然","是","库","._","的",".","一门","defn","文件","adapternode","__","as","lisp","没有","stringify","以下","使用","风味","ruby","codelab","hy","一下","在","以","print","它","里","接着","函数",")","constructor","编程","receive","地","需要","成功","核心"," ","/","我们","split","（","self","setv","nodes","const","地方","try","给出","python","）","i","可以","写成","'","。","集成","super","$","理论","看起来","world","运行","与",".__","from","当前","所以","payload","topic","一个","上","依赖","list","于是","content","来","作为",";","adapter","join","`","console","js","-","helloworldnode","很","生态","扩展","setitem","import","get","拓展","0","sleep","中心","多种语言","scratch3","内置","the","\"","this","running","，","time","反转","和","+","很多","字符串","任何","thread","如果","深度","extends","defclass","中","看起","message","]","process","安装","例子","什么","pub","m","起来","风格","extension","pip","handle","npm","=","exit","data","多种","方便","catch","文档","{","编程语言","node","client","已经","name","loop","30","while","class","new"],"title":"编程语言深度支持(multi language support)","title_tokens":[" ","编程语言","支持","语言","support","深度","(",")","编程","multi","language"]},{"location":"dev_guide/multi-language-support/#_1","text":"CodeLab Adapter的核心是一个消息系统，它是平台和编程语言无关的，理论上你可以使用任何编程语言来扩展CodeLab Adapter。 我们正在陆续构建多种语言的CodeLab Adapter client。 如果你只需要简单集成，参考 与其他编程语言集成 ,目前已经给出30+种编程语言的例子。 当前文档展示的是深度集成(ZeroMQ client)。","text_tokens":["可以","和","+","参考","无关","任何","消息","种","只","。","如果","深度","集成","是","理论","的","你","简单","例子","语言","目前","与","正在","当前","使用","codelab","一个","上","其他","展示","系统","它","构建","多种","(",",",")","来","编程","adapter","需要","陆续","文档","核心"," ","编程语言","平台","我们","client","已经","扩展","zeromq","30","多种语言","给出","，"],"title":"编程语言支持","title_tokens":["编程语言","编程","支持","语言"]},{"location":"dev_guide/multi-language-support/#nodejs","text":"以下展示如何在nodejs中构建 Adapter Node 。依然是以反转字符串为例。 首先安装依赖: npm i codelab_adapter_client_nodejs , 接着随便找个地方, 创建脚本文件: hello_world.js : const AdapterNode = require ( 'codelab_adapter_client_nodejs' ); const ADAPTER_TOPIC = \"adapter/nodes/data\" ; class HelloWorldNode extends AdapterNode { constructor () { super ({ name : \"EIMNode\" }); this . num = 0 ; this . receive_loop (); } message_handle ( topic , payload ) { console . log ( `from scratch: topic: ${ topic } , payload: ${ JSON . stringify ( payload ) } ` ); const content = payload . content ; const reverse_content = content . split ( \"\" ) . reverse () . join ( \"\" ); const message = { topic : ADAPTER_TOPIC , payload : { content : reverse_content , node_id : 'eim' } }; this . publish_payload ( message . payload , message . topic ); } pub_message () { this . num += 1 ; const message = { topic : ADAPTER_TOPIC , payload : { content : this . num } }; this . publish_payload ( message . payload , message . topic ); } run () { this . pub_message (); } } try { m = new HelloWorldNode (); m . run (); } catch ( err ) { console . log ( err ); process . exit (); } 运行CodeLab Adapter（作为消息中心）, 运行我们的拓展: node hello_world.js 让我们在 CodeLab Scratch3 中尝试一下反转字符串: 成功！","text_tokens":["hello","消息","num","脚本","eimnode","创建","让","json","id","run","展示",":","reverse","err","！","构建","随便","(",",","scratch","字符","require","publish","}","如何","_","找个","为例","nodejs","首先","eim","log","尝试","1","依然","是",".","的","文件","adapternode","stringify","以下","codelab","一下","在","以","接着",")","constructor","receive","成功"," ","/","split","（","我们","nodes","const","地方","try","）","i","'","。","$","super","world","运行","from","payload","topic","依赖","content","作为",";","adapter","join","`","console","js","helloworldnode","拓展","0","中心","scratch3","this","\"","反转","+","字符串","extends","中","message","process","安装","pub","m","handle","npm","=","exit","data","catch","{","loop","node","client","name","class","new"],"title":"nodejs","title_tokens":["nodejs"]},{"location":"dev_guide/multi-language-support/#lisp","text":"依赖: pip install hy hy 是一门LISP方言，构建在Python之上，可以使用Python生态里的所有库。于是我们可以很方便地构建Adapter Node: hello_world.hy ( import codelab_adapter_client ) ( import time ) ( defclass HelloWorldNode [codelab_adapter_client.AdapterNode] \"LISP hello world node\" ( defn --init-- [self] ( . --init-- ( super )) ( setv self.NODE_ID \"eim\" )) ( defn extension-message-handle [self topic payload] ( print f \"the message payload from scratch: {payload}\" ) ( setv content ( list ( get payload \"content\" ))) ( . reverse content ) ( payload.__setitem__ \"content\" ( . join \"\" content )) ( print payload ) ( self.publish { \"payload\" payload} ) ) ( defn run [self] ( while self._running ( time.sleep 1 ))) ) ( setv node ( HelloWorldNode )) ( . receive-loop-as-thread node ) ( . run node ) 运行CodeLab Adapter（作为消息中心）, 运行我们的拓展: hy hello_world.hy 很多Python内置函数没有写成LISP风格，所以看起来没什么LISP风味，更多Python风味。","text_tokens":["hello","消息","install","更","之上","多","id","init","[","run",":","reverse","构建","(",",","scratch","f","方言","publish","没什么","}","_","所有","eim","1","是","库","._","一门","的",".","defn","adapternode","__","as","lisp","没有","使用","风味","codelab","hy","在","print","里","函数","地",")","receive"," ","setv","我们","（","self","python","）","可以","写成","。","super","看起来","world",".__","运行","from","所以","payload","topic","依赖","list","于是","content","作为","adapter","join","-","helloworldnode","很","生态","setitem","import","get","拓展","sleep","中心","内置","the","\"","running","time","，","很多","thread","defclass","看起","message","]","什么","起来","风格","extension","pip","handle","方便","{","loop","node","client","while"],"title":"LISP","title_tokens":["lisp"]},{"location":"dev_guide/multi-language-support/#smalltalk","text":"","text_tokens":[],"title":"SmallTalk","title_tokens":["smalltalk"]},{"location":"dev_guide/multi-language-support/#ruby","text":"","text_tokens":[],"title":"Ruby","title_tokens":["ruby"]},{"location":"dev_guide/security/","text":"安全性 ¶ 2.5.x 版本主要围绕安全性在做一些工作。 REST API ¶ 2.5.0 之后， REST API 默认禁用，你需要通过 用户配置文件 启用它。 WEBSOCKET API ¶ 如果你只是将 CodeLab Adapter 当作 message hub（空间编程），你也通过设置 OPEN_WEBSOCKET_API = False ，WEBSOCKET API 将被禁用，那样 Web UI 将无法起作用。 ZeroMQ ¶ 默认只接受本地（127.0.0.1）创建的 Adapter Node 的 ZeroMQ 消息， 如果你希望构建分布式应用，请设置 OPEN_MESSAGE_HUB=True ，那样 CodeLab Adapter 将接受来自其他机器的 ZeroMQ 连接请求。 当 MESSAGE_HUB 处于 open 状态时，如何保证安全呢？答案是：使用 token。 MQTT ¶ 如果你要使用 MQTT gateway，出于安全性考虑，请替换为自己的 mqtt uri，默认的插件使用开放的账号。 Python Kernel ¶ 考虑到运行真实 Python 代码的风险，2.5.0 之后，我们 使用 eval 替代 exec ，并且对其做了限制，尽管如此，黑客社区依然有针对 eval 的精妙攻击方式。 所以我们使用 verify_token 验证请求的消息是否携带 token，考虑到兼容性，目前来自 WEBSOCKET API 的消息，默认被加上 token，所以我们在未来版本中将考虑对请求域名做检验。 如果你构建了安全攸关的应用，请考虑使用 verify_token 校验 token。 Tip 如果你希望像原先那样，真实地运行完整的 Python 代码，原先的插件在这儿: extension_python_kernel_exec.py(v2) 。 Tip 如果你只是希望在浏览器中教学 Python 语法，在浏览器中运行的 Brython 可能是更好的的选择。","text_tokens":["¶","主要","攻击","消息","127.0","为","禁用","gateway","选择","创建","？","目前","配置文件","启用","方式","默认","当作","其他","攸关",":","false","tip","构建","到","(","设置","保证","zeromq","做","如何","语法","只是","_","要","黑客","你","出于","浏览器","kernel","代码","检验","只","依然","有","是","兼容",".","的","配置","文件","中将","使用","codelab","容性","是否","围绕","在","考虑","更好","它","时","并且","0.1","地","编程","账号",")","exec","呢","需要","uri","rest","连接"," ","（","我们","尽管","尽管如此","机器","状态","之后","携带","来自","针对","将","2.5","）","python","作用","对","mqtt","风险","可能","这儿","答案","py","接受","。","工作","校验","安全","websocket","应用","x","被","运行","安全性","所以","开放","当","那样","也","原先","攻击方式","请","兼容性","本地","adapter","起","希望","一些","社区","web","替换","像","加上","0","布式","空间","精妙","通过","，","分布式应用","分布式","如此","教学","如果","中","v2","message","请求","open","未来","完整","其","分布","版本","true","域名","：","自己","api","token","了","hub","extension","eval","=","ui","无法","verify","brython","浏览","替代","插件","node","验证","用户","真实","限制","处于"],"title":"安全性(security)","title_tokens":["security","安全性","(",")","安全"]},{"location":"dev_guide/security/#_1","text":"2.5.x 版本主要围绕安全性在做一些工作。","text_tokens":[" ","围绕","在","主要","x","一些","版本","安全性","做","。","工作","安全","2.5","."],"title":"安全性","title_tokens":["安全性","安全"]},{"location":"dev_guide/security/#rest-api","text":"2.5.0 之后， REST API 默认禁用，你需要通过 用户配置文件 启用它。","text_tokens":["。","禁用","通过",".","配置","文件","配置文件","启用","api","默认","它","需要","rest"," ","用户","，","之后","0","2.5","你"],"title":"REST API","title_tokens":[" ","api","rest"]},{"location":"dev_guide/security/#websocket-api","text":"如果你只是将 CodeLab Adapter 当作 message hub（空间编程），你也通过设置 OPEN_WEBSOCKET_API = False ，WEBSOCKET API 将被禁用，那样 Web UI 将无法起作用。","text_tokens":["如果","。","禁用","message","open","websocket","你","被","api","codelab","hub","当作","也","那样","=","ui","false","无法","编程","设置","adapter","起"," ","（","，","web","只是","_","将","空间","）","作用","通过"],"title":"WEBSOCKET API","title_tokens":[" ","api","websocket"]},{"location":"dev_guide/security/#zeromq","text":"默认只接受本地（127.0.0.1）创建的 Adapter Node 的 ZeroMQ 消息， 如果你希望构建分布式应用，请设置 OPEN_MESSAGE_HUB=True ，那样 CodeLab Adapter 将接受来自其他机器的 ZeroMQ 连接请求。 当 MESSAGE_HUB 处于 open 状态时，如何保证安全呢？答案是：使用 token。","text_tokens":["分布式","答案","消息","127.0","只","接受","如果","。","是","安全","message","请求","的",".","创建","open","应用","？","分布","true","：","使用","默认","token","codelab","当","hub","那样","其他","=","构建","时","0.1","请","本地","设置","adapter","呢","希望","连接","（"," ","node","保证","机器","zeromq","，","状态","如何","布式","_","来自","将","）","你","处于","分布式应用"],"title":"ZeroMQ","title_tokens":["zeromq"]},{"location":"dev_guide/security/#mqtt","text":"如果你要使用 MQTT gateway，出于安全性考虑，请替换为自己的 mqtt uri，默认的插件使用开放的账号。","text_tokens":["为","如果","。","安全","gateway","的","你","安全性","自己","出于","使用","默认","开放","考虑","请","账号","mqtt","uri"," ","插件","替换","要","，"],"title":"MQTT","title_tokens":["mqtt"]},{"location":"dev_guide/security/#python-kernel","text":"考虑到运行真实 Python 代码的风险，2.5.0 之后，我们 使用 eval 替代 exec ，并且对其做了限制，尽管如此，黑客社区依然有针对 eval 的精妙攻击方式。 所以我们使用 verify_token 验证请求的消息是否携带 token，考虑到兼容性，目前来自 WEBSOCKET API 的消息，默认被加上 token，所以我们在未来版本中将考虑对请求域名做检验。 如果你构建了安全攸关的应用，请考虑使用 verify_token 校验 token。 Tip 如果你希望像原先那样，真实地运行完整的 Python 代码，原先的插件在这儿: extension_python_kernel_exec.py(v2) 。 Tip 如果你只是希望在浏览器中教学 Python 语法，在浏览器中运行的 Brython 可能是更好的的选择。","text_tokens":["攻击","消息","选择","目前","方式","默认","攸关",":","tip","构建","到","(","做","语法","_","只是","黑客","你","浏览器","kernel","代码","检验","依然","有","是","兼容",".","的","中将","使用","容性","是否","考虑","在","并且","地",")","exec"," ","我们","尽管","尽管如此","之后","携带","针对","来自","python","2.5","对","风险","可能","这儿","py","。","校验","安全","websocket","应用","被","运行","所以","那样","原先","攻击方式","兼容性","请","希望","社区","像","加上","0","精妙","，","如此","教学","如果","中","v2","请求","未来","完整","其","版本","域名","api","token","了","extension","eval","verify","brython","浏览","替代","插件","验证","真实","限制","更好"],"title":"Python Kernel","title_tokens":[" ","python","kernel"]},{"location":"dev_guide/sync-message/","text":"同步风格的消息 ¶ 问题 ¶ 有开发者在 issue 提了这个问题： 怎么处理异步发送的消息，如何等待它成功执行返回？ 同步通信的过程可以由下图表示： 如果你熟悉 http，就会看出它们是相似的。 如果你熟悉 ROS ，可能会觉得，同步模式类似 service，异步模式类似 action。 思路 ¶ 无论是 websocket 还是 ZeroMQ pub/sub，都是异步的。 我们如何在异步中实现，同步模式呢？策略是使用 message_id。 目前 Scratch EIM 已经支持同步风格的积木（阻塞风格）。 实现 ¶ 这些同步风格的积木需要与同步风格的 CodeLab Adapter 插件一起使用。让我们来实现它。 Sync extension ¶ 功能依然是反转字符串，在同步插件中，完成反转字符串功能，需要一秒钟。 以下是插件源码： extension_sync_helloworld.py import time from codelab_adapter.core_extension import Extension class SyncHelloWorldExtension ( Extension ): def __init__ ( self ): super () . __init__ () self . NODE_ID = \"eim\" def send_message_to_scratch ( self , payload ): message = self . message_template () message [ \"payload\" ] = payload self . publish ( message ) def extension_message_handle ( self , topic , payload ): self . logger . info ( f 'the message payload from scratch: {payload}' ) content = payload [ \"content\" ] if type ( content ) == str : content_send_to_scratch = content [:: - 1 ] # 反转字符串 time . sleep ( 1 ) payload [ \"content\" ] = content_send_to_scratch self . send_message_to_scratch ( payload ) def run ( self ): while self . _running : time . sleep ( 1 ) export = SyncHelloWorldExtension 通过与 hello world 教程 的对比，可以看出同步消息与异步消息在 CodeLab Adapter 插件一侧的区别：通过返回来自 Scratch 的消息中携带的 message_id（message_id 在 payload 中，通过观察日志，可以看到 payload 内部细节）。让请求者得知当前消息被响应了。 同步消息与异步消息，在 Scratch 插件一侧的区别表现为不同的积木（是否 wait/等待 ），js 代码层面的差异表现在： 发送消息的函数不同 ，这部分你可以直接使用 EIM 插件，可以不做深究。 刷新 Web UI，点击运行 extension_hello_world.py ，接着你就可以在 Scratch 中与你的插件交互了。 如果你将 5 个上图中的积木拼在一起，它们将依次运行，一共耗时 5 秒。 FAQ ¶ 如果某个积木，在 wait 的过程中，没有得到响应会发生什么？ 超时时间是 5 秒，所以 5 秒后会继续往下运行。 参考: ¶ codelab-adapter 与应答模式","text_tokens":["¶","hello","参考","消息","为","得知","表现","处理","还是","响应","得到","让","开发","issue","type","？","不","id","继续","往","目前","init","sync","熟悉","类似","[","info","某个","区别","http","run","看出",":","这些","完成","日志","差异","应答","由","同步","(",",","scratch","耗时","字符","f","执行","publish","支持","}","synchelloworldextension","图","一秒","zeromq","对比","做","sub","如何","export","_","会","你","eim","等待","内部","1","无论","代码","依然","相似","模式","有","是","拼在一起","直接","部分","的",".","__","core","不同","to","策略","没有","以下","观察","使用","codelab","logger","这部分","它们","#","template","是否","在","超时","send","秒","它","函数","教程","接着",")","呢","需要","成功"," ","/","我们","（","self","一共","携带","if","一起","来自","将","）","积木","点击","都","可能","可以","一秒钟","秒钟","时间","层面","py","str","过程","表示","。","'","super","action","发生","websocket","提了","下图","def","被","world","运行","与","from","通信","当前","所以","返回","payload","topic","依次","上","请求者","源码","下","看到","content","怎么","来","wait","adapter","-","js","后会","web","import","开发者","sleep","the","\"","running","，","time","问题","通过","反转","一侧","字符串","如果","中","service","message","阻塞","请求","]","细节","深究","交互","什么","：","pub","了","风格","extension","handle","就","=","ui","ros","这个","思路","个","发送","faq","5","无论是","异步","这部","插件","{","node","已经","刷新","觉得","实现","通过观察","while","helloworld","class","功能"],"title":"同步风格的消息(sync message)","title_tokens":[" ","消息","同步","(","sync",")","message","风格","的"]},{"location":"dev_guide/sync-message/#_1","text":"","text_tokens":[],"title":"同步风格的消息","title_tokens":["消息","风格","的","同步"]},{"location":"dev_guide/sync-message/#_2","text":"有开发者在 issue 提了这个问题： 怎么处理异步发送的消息，如何等待它成功执行返回？ 同步通信的过程可以由下图表示： 如果你熟悉 http，就会看出它们是相似的。 如果你熟悉 ROS ，可能会觉得，同步模式类似 service，异步模式类似 action。","text_tokens":["可以","等待","消息","过程","表示","如果","相似","。","有","处理","是","模式","service","action","的","提了","issue","开发","？","下图","你","通信","：","熟悉","类似","返回","它们","http","在","就","看出","ros","它","这个","由","同步","怎么","发送","异步","成功","执行"," ","觉得","如何","开发者","会","，","问题","可能"],"title":"问题","title_tokens":["问题"]},{"location":"dev_guide/sync-message/#_3","text":"无论是 websocket 还是 ZeroMQ pub/sub，都是异步的。 我们如何在异步中实现，同步模式呢？策略是使用 message_id。 目前 Scratch EIM 已经支持同步风格的积木（阻塞风格）。","text_tokens":["eim","无论","。","模式","是","中","message","还是","阻塞","的","websocket","？","id","目前","策略","pub","使用","风格","在","同步","scratch","呢","无论是","异步"," ","/","我们","支持","已经","（","zeromq","sub","如何","实现","_","）","积木","，","都"],"title":"思路","title_tokens":["思路"]},{"location":"dev_guide/sync-message/#_4","text":"这些同步风格的积木需要与同步风格的 CodeLab Adapter 插件一起使用。让我们来实现它。","text_tokens":["。","的","让","与","使用","codelab","风格","这些","它","同步","来","adapter","需要"," ","插件","我们","实现","一起","积木"],"title":"实现","title_tokens":["实现"]},{"location":"dev_guide/sync-message/#sync-extension","text":"功能依然是反转字符串，在同步插件中，完成反转字符串功能，需要一秒钟。 以下是插件源码： extension_sync_helloworld.py import time from codelab_adapter.core_extension import Extension class SyncHelloWorldExtension ( Extension ): def __init__ ( self ): super () . __init__ () self . NODE_ID = \"eim\" def send_message_to_scratch ( self , payload ): message = self . message_template () message [ \"payload\" ] = payload self . publish ( message ) def extension_message_handle ( self , topic , payload ): self . logger . info ( f 'the message payload from scratch: {payload}' ) content = payload [ \"content\" ] if type ( content ) == str : content_send_to_scratch = content [:: - 1 ] # 反转字符串 time . sleep ( 1 ) payload [ \"content\" ] = content_send_to_scratch self . send_message_to_scratch ( payload ) def run ( self ): while self . _running : time . sleep ( 1 ) export = SyncHelloWorldExtension 通过与 hello world 教程 的对比，可以看出同步消息与异步消息在 CodeLab Adapter 插件一侧的区别：通过返回来自 Scratch 的消息中携带的 message_id（message_id 在 payload 中，通过观察日志，可以看到 payload 内部细节）。让请求者得知当前消息被响应了。 同步消息与异步消息，在 Scratch 插件一侧的区别表现为不同的积木（是否 wait/等待 ），js 代码层面的差异表现在： 发送消息的函数不同 ，这部分你可以直接使用 EIM 插件，可以不做深究。 刷新 Web UI，点击运行 extension_hello_world.py ，接着你就可以在 Scratch 中与你的插件交互了。 如果你将 5 个上图中的积木拼在一起，它们将依次运行，一共耗时 5 秒。","text_tokens":["hello","消息","为","得知","表现","响应","让","type","不","id","init","sync","[","info","区别","run","看出",":","完成","日志","差异","同步","(",",","scratch","耗时","字符","f","publish","}","synchelloworldextension","图","一秒","对比","做","export","_","你","eim","内部","等待","1","代码","依然","拼在一起","是","直接","部分",".","__","的","core","不同","to","以下","观察","使用","codelab","logger","这部分","#","它们","template","是否","在","send","秒","函数","教程","接着",")","需要"," ","（","/","self","一共","携带","if","一起","来自","将","）","积木","点击","一秒钟","可以","秒钟","层面","py","str","'","。","super","def","被","world","运行","与","from","当前","返回","payload","topic","依次","上","请求者","源码","看到","content","wait","adapter","-","js","web","import","sleep","the","\"","running","time","，","通过","反转","一侧","字符串","如果","中","message","请求","]","细节","深究","交互","：","了","extension","handle","就","=","ui","个","发送","5","异步","这部","插件","{","node","刷新","通过观察","while","helloworld","class","功能"],"title":"Sync extension","title_tokens":[" ","extension","sync"]},{"location":"dev_guide/sync-message/#faq","text":"如果某个积木，在 wait 的过程中，没有得到响应会发生什么？ 超时时间是 5 秒，所以 5 秒后会继续往下运行。","text_tokens":["过程","如果","。","中","是","发生","的","响应","得到","继续","？","往","运行","没有","什么","所以","某个","在","超时","下","秒","wait","5"," ","后会","会","时间","积木","，"],"title":"FAQ","title_tokens":["faq"]},{"location":"dev_guide/sync-message/#_5","text":"codelab-adapter 与应答模式","text_tokens":["-"," ","与","应答","模式","codelab","adapter"],"title":"参考:","title_tokens":[":","参考"]},{"location":"dev_guide/system_command/","text":"codelab-message-pub 系统命令 ¶ 安装完 codelab_adapter_client 之后，将生成 codelab-message-pub 系统命令，它方便用来将 CodeLab Adapter 与其他编程语言做集成，我们展示了与 30+ 种编程语言结合的例子。 Unix/Linux 操作系统仅仅使用信号（signal）便能构建非常复杂的协同程序。Erlang 从 SmallTalk 那儿学到仅使用 message 来协同程序，message 是个极其强大的概念。 CodeLab Adapter 的核心设计思路是： Everything Is a Message （EIM），我们在最新的 codelab_adapter_client 版本中，为其加入系统命令，方便在其他语言构建的程序中往 CodeLab Adapter 发送消息，这样一来，你就可以使用任何编程语言为 Scratch 构建插件，或者为 CodeLab Adapter 构建插件。 典型使用案例： ¶ 在 CodeLab 内部，我们的魔杖程序（使用魔杖控制空间里的事物）的机器视觉（CV）部分是使用 C++ 写的（因为深度相机的 C++ SDK 比较完备），为了让深度相机与 Scratch 协同工作， codelab-message-pub 便是理想的选择，它能够将消息的触角延伸到任何编程语言里。 codelab-message-pub ¶ 安装 ¶ pip install codelab_adapter_client --upgrade 确保 codelab_adapter_client >= 1.6.2 使用帮助 ¶ > codelab-message-pub -h usage: codelab-message-pub [ -h ] [ -i CODELAB_ADAPTER_IP_ADDRESS ] [ -n NAME ] [ -p PUBLISHER_PORT ] [ -s SUBSCRIBER_PORT ] [ -t TOPIC ] [ -d NODE_ID ] [ -c CONTENT ] [ -j JSON_MESSAGE ] optional arguments: -h, --help show this help message and exit -i CODELAB_ADAPTER_IP_ADDRESS None or IP address used by CodeLab Adapter -n NAME Set name in banner -p PUBLISHER_PORT Publisher IP port -s SUBSCRIBER_PORT Subscriber IP port -t TOPIC message topic -d NODE_ID node id -c CONTENT payload [ 'content' ] -j JSON_MESSAGE json message ( with topic and payload ) 使用方法 ¶ > codelab-message-pub -t hello_topic > codelab-message-pub -c hello_content > codelab-message-pub -j '{\"payload\":{\"content\":\"test contenst\", \"token\":\"xxx\"}}' 使用 codelab-message-pub 时记得先打开 CodeLab Adapter。 支持语言 ¶ 以下是我们给出的主流/非主流编程语言与 codelab-message-pub 集成的范例，本质上是系统调用。 部分编程语言使用 labstack 测试。 C++ ¶ #include <stdio.h> #include <stdlib.h> int main () { system ( \"codelab-message-pub -c hello_content\" ); } Rust ¶ // https://doc.rust-lang.org/book/ch01-02-hello-world.html // https://doc.rust-lang.org/std/process/struct.Command.html // https://stackoverflow.com/questions/21011330/how-do-i-invoke-a-system-command-in-rust-and-capture-its-output use std :: process :: Command ; fn main () { Command :: new ( \"codelab-message-pub\" ) . arg ( \"-c\" ) . arg ( \"hello_content\" ) . spawn () . expect ( \"command failed\" ); } rustc main.rs ./main Golang ¶ // https://golang.org/pkg/os/exec/ // https://tutorialedge.net/golang/executing-system-commands-with-golang/ package main import ( \"fmt\" \"os/exec\" \"runtime\" ) func execute () { out , err := exec . Command ( \"codelab-message-pub\" , \"-c\" , \"hello_content\" ). Output () if err != nil { fmt . Printf ( \"%s\" , err ) } fmt . Println ( \"Command Successfully Executed\" ) output := string ( out [:]) fmt . Println ( output ) } func main () { if runtime . GOOS == \"windows\" { fmt . Println ( \"Can't Execute this on a windows machine\" ) } else { execute () } } go run main.go swift ¶ //https://stackoverflow.com/questions/26971240/how-do-i-run-an-terminal-command-in-a-swift-script-e-g-xcodebuild import Foundation @ discardableResult func shell ( _ args : String ...) -> Int32 { let task = Process () task . launchPath = \"/usr/bin/env\" task . arguments = args task . launch () task . waitUntilExit () return task . terminationStatus } shell ( \"codelab-message-pub\" , \"-c\" , \"hello_content\" ) c ¶ #include <stdio.h> #include <stdlib.h> #include <string.h> int main () { char command [ 50 ]; strcpy ( command , \"codelab-message-pub -c hello_content\" ); system ( command ); return ( 0 ); } bash ¶ codelab-message-pub -c hello_content Racket ¶ ( system \"codelab-message-pub -c hello_content\" ) Scheme ¶ ( system \"codelab-message-pub -c hello_content\" ) Elisp(Emacs) ¶ ( shell-command \"codelab-message-pub -c hello_content\" ) Hy ¶ (import subprocess) (.call subprocess [\"codelab-message-pub\" \"-c\" \"hello_content\"]) SmallTalk(Pharo) ¶ command := OSProcess waitForCommand: 'codelab-message-pub -c hello_content' . command exitStatus . Haskell ¶ module Main where import System.Process main = callCommand \"codelab-message-pub -c hello_content\" MATLAB ¶ % https://www.mathworks.com/help/matlab/ref/system.html system ( \" codelab - message - pub - c hello_content \" ) Julia ¶ run ( `codelab-message-pub -c hello_content` ) Lua ¶ os.execute ( \"codelab-message-pub -c hello_content\" ) Perl ¶ system ( \"codelab-message-pub -c hello_content\" ) PHP ¶ <?php system ( \"codelab-message-pub -c hello_content\" ); ?> Dart ¶ import 'dart:io' ; main () { Process . run ( 'codelab-message-pub' , [ '-c' , 'hello_content' ]); } R ¶ system ( \"codelab-message-pub -c hello_content\" ) Ruby ¶ system ( \"codelab-message-pub -c hello_content\" ) Crystal ¶ system \"codelab-message-pub -c hello_content\" Python ¶ import subprocess subprocess . call ([ \"codelab-message-pub -c hello_content\" ], shell = True ) JavaScript(NodeJS) ¶ const { execSync } = require ( 'child_process' ); execSync ( 'codelab-message-pub -c hello_content' ); Prolog ¶ shell ( 'codelab-message-pub -c hello_content' ). Erlang ¶ !/ usr / bin / env escript main (_) -> output = os : cmd ( \"codelab-message-pub -c hello_content\" ), io : fwrite ( output ). Java ¶ Runtime r = Runtime . getRuntime (); Process p = r . exec ( \"codelab-message-pub -c hello_content\" ); p . waitFor (); Kotlin ¶ the same as Java Clojure ¶ ( use ' [ clojure.java.shell :only [ sh ]]) ( sh \"codelab-message-pub\" \"-c\" \"hello_content\" ) Scala ¶ import sys.process._ val cmd = \"codelab-message-pub -c hello_content\" val output = cmd .! // Captures the output Groovy ¶ \"codelab-message-pub -c hello_content\" . execute () Processing ¶ // https://forum.processing.org/two/discussion/24401/how-can-i-run-a-command-in-terminal-from-within-processing exec ( \"codelab-message-pub\" , \"-c\" , \"hello_content\" ); Fortran ¶ CALL execute_command_line ( 'codelab-message-pub -c hello_content' ) Ada ¶ -- https://www.pegasoft.ca/resources/boblap/13.html function system ( cmd : string ) returns integer ; pragma Import ( C , system ); Result := system ( \"codelab-message-pub -c hello_content\" & ASCII . NUL ); Brainfuck ¶ ref : https://kimiyuki.net/blog/2016/04/01/bash-on-brainfuck-on-anarchy-golf/ C# ¶ // https://docs.microsoft.com/en-us/dotnet/core/tutorials/using-with-xplat-cli // https://kimsereyblog.blogspot.com/2018/01/start-processes-from-c-in-dotnet-core.html // https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-run?tabs=netcore21#examples Pascal ¶ ref :https://wiki.freepascal.org/Executing_External_Programs Assembly ¶ ref: https://stackoverflow.com/questions/9342410/sys-execve-system-call-from-assembly SQL ¶ ref: https://stackoverflow.com/questions/43205594/running-system-command-with-argument-in-a-postgresql-function","text_tokens":["a","消息","us","blog","id","先","racket","blogspot","smalltalk","相机","[","协同工作","int32","argument","in","9342410","processes","scratch","调用","04","本质","emacs","}","kimsereyblog","_","一来","nodejs","eim","resources","haskell","linux","便是","c++","out","exitstatus","core","13","as","以下","完备","char","ruby","用来","optional","help","它","里","生成","!","assembly","我们","机器","非常","if","...","将","理想","python","html","i","%","'","stdlib","工作","io","same","from","操作系统","26971240","en","payload","sh","line","事物","确保",";","ada","waituntilexit","package","-","import","freepascal","空间","\"","examples","how","控制","net","深度","or","]","安装","其","例子","ip","记得","golf","=","integer","upgrade","方便","crystal","延伸","c","client","install","launchpath","cv","ref","signal","val","clojure","std","ascii","nul","postgresql","系统命令","xxx","lang","中往","subprocess","展示",":","打开","err","pegasoft","require","swift","scheme","string","else","address","prolog","内部","successfully","02","env","h","os","an","能","golang","g",">","在","cmd","getruntime","function","非主流","where","时","主流","dotnet","launch"," ","org","之后","contenst","const","24401","魔杖","set","。","<","brainfuck","c#","world","arguments","案例","used","tutorials","topic","完","shell","content","args","script","p","expect","by","fmt","操作","boblap","the","running","sdk","任何","j","从","bin","message","discussion","50","goos","：","pub","程序","output","on","视觉","pip","book","terminationstatus","and","only","个","思路","foundation","kimiyuki","lua","结合","let","编程语言","插件","node","terminal","its","2018","using","30","docs","sys","func","with","new","写","¶","com","hello","xcodebuild","include","非常复杂","stdio","failed","选择","让","start","语言","www","pkg","unix","rs","run","系统","execute","概念","构建","forum","强大",",","(","e","比较","captures","因为","r","cli","windows","是","pascal","的","banner","最新","仅仅","machine","codelab","hy","command","@",")","编程","exec","t","mathworks","/","erlang","microsoft","invoke","executing","同工","port","doc","为了","可以","matlab","bash","fn","return","nil","仅","everything","与","ch01","tabs","?","int","来","returns","协同程序","adapter","stackoverflow","2","0","system","printf","go","这样一来","ca","runtime","pragma","中","d","println","43205594","那儿","two","true","版本","module","了","便","show","01","exit","strcpy","groovy","subscriber","{","name","main","child","dart","rust","为","或者","executed","osprocess","waitfor","callcommand","can","execsync","json","https","usr","programs","xplat","学到","publisher","其他","is","设计","到","spawn","加入","javascript","协同","支持","within","做","你","种","典型","do","tutorialedge","waitforcommand","capture","discardableresult","&","部分","._",".","labstack","elisp","questions","kotlin","使用","#","fwrite","信号","arg","核心","（","julia","use","external","none","给出","）","anarchy","wiki","s","tools","集成","processing","commands","复杂","task","java","test","帮助","usage","上","sql","1.6","escript","`","方法","fortran","21011330","this","，","+","netcore21","测试","pharo","触角","php","2016","token","极其","scala","就","范例","能够","发送","execve","result","n","struct","rustc","call","这样","命令","process","perl"],"title":"与其他编程语言集成(system command)","title_tokens":[" ","编程语言","其他","语言","与","command","(","system","集成",")","编程"]},{"location":"dev_guide/system_command/#codelab-message-pub","text":"安装完 codelab_adapter_client 之后，将生成 codelab-message-pub 系统命令，它方便用来将 CodeLab Adapter 与其他编程语言做集成，我们展示了与 30+ 种编程语言结合的例子。 Unix/Linux 操作系统仅仅使用信号（signal）便能构建非常复杂的协同程序。Erlang 从 SmallTalk 那儿学到仅使用 message 来协同程序，message 是个极其强大的概念。 CodeLab Adapter 的核心设计思路是： Everything Is a Message （EIM），我们在最新的 codelab_adapter_client 版本中，为其加入系统命令，方便在其他语言构建的程序中往 CodeLab Adapter 发送消息，这样一来，你就可以使用任何编程语言为 Scratch 构建插件，或者为 CodeLab Adapter 构建插件。","text_tokens":["a","消息","为","或者","非常复杂","signal","语言","系统命令","smalltalk","unix","学到","中往","其他","展示","系统","概念","构建","设计","is","强大","scratch","加入","协同","做","_","一来","你","eim","linux","种","是","能","的","最新","仅仅","使用","codelab","信号","用来","在","它","编程","生成","核心"," ","/","我们","（","erlang","之后","非常","将","）","可以","。","集成","仅","复杂","everything","与","操作系统","完","来","协同程序","adapter","-","操作","这样一来","，","+","任何","从","中","message","安装","那儿","例子","其","版本","：","pub","程序","了","极其","便","就","个","思路","发送","方便","结合","编程语言","插件","client","30","这样","命令"],"title":"codelab-message-pub 系统命令","title_tokens":["-"," ","系统","系统命令","pub","命令","codelab","message"]},{"location":"dev_guide/system_command/#_1","text":"在 CodeLab 内部，我们的魔杖程序（使用魔杖控制空间里的事物）的机器视觉（CV）部分是使用 C++ 写的（因为深度相机的 C++ SDK 比较完备），为了让深度相机与 Scratch 协同工作， codelab-message-pub 便是理想的选择，它能够将消息的触角延伸到任何编程语言里。","text_tokens":["内部","sdk","任何","消息","控制","深度","工作","便是","cv","是","。","c++","message","部分","的","选择","让","语言","与","触角","pub","程序","使用","相机","完备","协同工作","codelab","视觉","因为","在","事物","里","它","能够","到","scratch","编程","延伸","理想","协同"," ","（","我们","为了","-","编程语言","机器","比较","同工","空间","）","将","，","写","魔杖"],"title":"典型使用案例：","title_tokens":["典型","使用","案例","："]},{"location":"dev_guide/system_command/#codelab-message-pub_1","text":"","text_tokens":[],"title":"codelab-message-pub","title_tokens":["-","pub","codelab","message"]},{"location":"dev_guide/system_command/#_2","text":"pip install codelab_adapter_client --upgrade 确保 codelab_adapter_client >= 1.6.2","text_tokens":[" ","-","client",".","=","2","install","_","upgrade","1.6","确保","codelab","adapter",">","pip"],"title":"安装","title_tokens":["安装"]},{"location":"dev_guide/system_command/#_3","text":"> codelab-message-pub -h usage: codelab-message-pub [ -h ] [ -i CODELAB_ADAPTER_IP_ADDRESS ] [ -n NAME ] [ -p PUBLISHER_PORT ] [ -s SUBSCRIBER_PORT ] [ -t TOPIC ] [ -d NODE_ID ] [ -c CONTENT ] [ -j JSON_MESSAGE ] optional arguments: -h, --help show this help message and exit -i CODELAB_ADAPTER_IP_ADDRESS None or IP address used by CodeLab Adapter -n NAME Set name in banner -p PUBLISHER_PORT Publisher IP port -s SUBSCRIBER_PORT Subscriber IP port -t TOPIC message topic -d NODE_ID node id -c CONTENT payload [ 'content' ] -j JSON_MESSAGE json message ( with topic and payload )","text_tokens":["s","j","'","h","d","message","or","]","banner","json","ip","id","arguments","used","pub","[","codelab","payload","in",">","topic","with","usage","publisher","optional","help","show","and",":","exit","content","(",",",")","adapter","c","n","t","p"," ","-","subscriber","node","name","by","address","_","none","this","i","port","set"],"title":"使用帮助","title_tokens":["使用","帮助"]},{"location":"dev_guide/system_command/#_4","text":"> codelab-message-pub -t hello_topic > codelab-message-pub -c hello_content > codelab-message-pub -j '{\"payload\":{\"content\":\"test contenst\", \"token\":\"xxx\"}}' 使用 codelab-message-pub 时记得先打开 CodeLab Adapter。","text_tokens":["hello","j","'","。","message","记得","先","pub","test","使用","token","xxx","codelab","payload","topic",">",":","打开","content","时",",","adapter","c","t"," ","-","{","}","contenst","_","\""],"title":"使用方法","title_tokens":["使用","方法"]},{"location":"dev_guide/system_command/#_5","text":"以下是我们给出的主流/非主流编程语言与 codelab-message-pub 集成的范例，本质上是系统调用。 部分编程语言使用 labstack 测试。","text_tokens":["测试","。","集成","是","message","部分","的","labstack","语言","与","以下","pub","使用","codelab","上","非主流","系统","范例","主流","调用","编程","本质"," ","/","我们","编程语言","-","给出","，"],"title":"支持语言","title_tokens":["支持","语言"]},{"location":"dev_guide/system_command/#c","text":"#include <stdio.h> #include <stdlib.h> int main () { system ( \"codelab-message-pub -c hello_content\" ); }","text_tokens":["hello","<","stdlib","include","h","message","stdio",".","pub","codelab","#",">","int","content","(",")",";","c"," ","{","-","}","main","system","_","\""],"title":"C++","title_tokens":["c++"]},{"location":"dev_guide/system_command/#rust","text":"// https://doc.rust-lang.org/book/ch01-02-hello-world.html // https://doc.rust-lang.org/std/process/struct.Command.html // https://stackoverflow.com/questions/21011330/how-do-i-invoke-a-system-command-in-rust-and-capture-its-output use std :: process :: Command ; fn main () { Command :: new ( \"codelab-message-pub\" ) . arg ( \"-c\" ) . arg ( \"hello_content\" ) . spawn () . expect ( \"command failed\" ); } rustc main.rs ./main","text_tokens":["com","how","a","hello","new","02","do","capture","fn","message","failed",".","process","https","questions","std","world","pub","lang","codelab","ch01","output","in","rs","book","and","arg",":","command","content","(",")","spawn",";","c","stackoverflow","expect"," ","/","-","org","struct","{","}","use","rustc","its","\"","main","invoke","system","_","rust","21011330","html","i","doc"],"title":"Rust","title_tokens":["rust"]},{"location":"dev_guide/system_command/#golang","text":"// https://golang.org/pkg/os/exec/ // https://tutorialedge.net/golang/executing-system-commands-with-golang/ package main import ( \"fmt\" \"os/exec\" \"runtime\" ) func execute () { out , err := exec . Command ( \"codelab-message-pub\" , \"-c\" , \"hello_content\" ). Output () if err != nil { fmt . Printf ( \"%s\" , err ) } fmt . Println ( \"Command Successfully Executed\" ) output := string ( out [:]) fmt . Println ( output ) } func main () { if runtime . GOOS == \"windows\" { fmt . Println ( \"Can't Execute this on a windows machine\" ) } else { execute () } } go run main.go","text_tokens":["a","hello","s","successfully","%","tutorialedge","net","windows","'","os","executed","println","message","nil","commands","this",".","out","]","can","https","goos","machine","golang","pub","[","pkg","codelab","output","on","run","=",":","execute","err","command","content","(",",",")","exec","!","c","t","package"," ","/","org","-","{","}","\"","import","string","main","if","else","system","fmt","_","executing","printf","go","func","with","runtime"],"title":"Golang","title_tokens":["golang"]},{"location":"dev_guide/system_command/#swift","text":"//https://stackoverflow.com/questions/26971240/how-do-i-run-an-terminal-command-in-a-swift-script-e-g-xcodebuild import Foundation @ discardableResult func shell ( _ args : String ...) -> Int32 { let task = Process () task . launchPath = \"/usr/bin/env\" task . arguments = args task . launch () task . waitUntilExit () return task . terminationStatus } shell ( \"codelab-message-pub\" , \"-c\" , \"hello_content\" )","text_tokens":["com","how","a","hello","env","do","xcodebuild","launchpath","discardableresult","bin","return","an","message",".","https","questions","usr","task","arguments","g","26971240","pub","int32","codelab","in",">","terminationstatus","run","=",":","shell","command","content","@","args","foundation","(",")",",","script","c","stackoverflow","e","waituntilexit","launch","-","/"," ","{","let","swift","}","terminal","string","import","\"","_","...","func","process","i"],"title":"swift","title_tokens":["swift"]},{"location":"dev_guide/system_command/#c_1","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> int main () { char command [ 50 ]; strcpy ( command , \"codelab-message-pub -c hello_content\" ); system ( command ); return ( 0 ); }","text_tokens":["hello","<","stdlib","include","h","return","message","stdio",".","]","50","pub","char","[","codelab","#",">","int","command","strcpy","content","(",",",")",";","c"," ","{","-","}","string","main","0","_","system","\""],"title":"c","title_tokens":["c"]},{"location":"dev_guide/system_command/#bash","text":"codelab-message-pub -c hello_content","text_tokens":["-"," ","hello","content","_","pub","codelab","message","c"],"title":"bash","title_tokens":["bash"]},{"location":"dev_guide/system_command/#racket","text":"( system \"codelab-message-pub -c hello_content\" )","text_tokens":[" ","-","hello","content","system","(","pub","_",")","codelab","message","c","\""],"title":"Racket","title_tokens":["racket"]},{"location":"dev_guide/system_command/#scheme","text":"( system \"codelab-message-pub -c hello_content\" )","text_tokens":[" ","-","hello","content","system","(","pub","_",")","codelab","message","c","\""],"title":"Scheme","title_tokens":["scheme"]},{"location":"dev_guide/system_command/#elispemacs","text":"( shell-command \"codelab-message-pub -c hello_content\" )","text_tokens":[" ","-","hello","shell","command","content","(","pub","_",")","codelab","message","c","\""],"title":"Elisp(Emacs)","title_tokens":[")","emacs","(","elisp"]},{"location":"dev_guide/system_command/#hy","text":"(import subprocess) (.call subprocess [\"codelab-message-pub\" \"-c\" \"hello_content\"])","text_tokens":[" ","subprocess","-","hello","call","import","content","(","pub",")","_","[","codelab","message","c","\"",".","]"],"title":"Hy","title_tokens":["hy"]},{"location":"dev_guide/system_command/#smalltalkpharo","text":"command := OSProcess waitForCommand: 'codelab-message-pub -c hello_content' . command exitStatus .","text_tokens":[" ","-","=",":","hello","command","waitforcommand","content","'","exitstatus","_","pub","osprocess","codelab","message","c","."],"title":"SmallTalk(Pharo)","title_tokens":["pharo",")","smalltalk","("]},{"location":"dev_guide/system_command/#haskell","text":"module Main where import System.Process main = callCommand \"codelab-message-pub -c hello_content\"","text_tokens":["hello","message",".","callcommand","process","module","pub","codelab","=","where","content","c"," ","-","import","main","system","_","\""],"title":"Haskell","title_tokens":["haskell"]},{"location":"dev_guide/system_command/#matlab","text":"% https://www.mathworks.com/help/matlab/ref/system.html system ( \" codelab - message - pub - c hello_content \" )","text_tokens":["com","matlab","hello","%","ref","message",".","https","www","pub","codelab","help",":","content","(",")","c","mathworks"," ","/","-","html","system","_","\""],"title":"MATLAB","title_tokens":["matlab"]},{"location":"dev_guide/system_command/#julia","text":"run ( `codelab-message-pub -c hello_content` )","text_tokens":[" ","-","run","hello","content","(","pub","_",")","codelab","message","c","`"],"title":"Julia","title_tokens":["julia"]},{"location":"dev_guide/system_command/#lua","text":"os.execute ( \"codelab-message-pub -c hello_content\" )","text_tokens":[" ","-","hello","execute","content","(","pub","os","_",")","codelab","message","c","\"","."],"title":"Lua","title_tokens":["lua"]},{"location":"dev_guide/system_command/#perl","text":"system ( \"codelab-message-pub -c hello_content\" )","text_tokens":[" ","-","hello","content","(","system","pub","_",")","codelab","message","c","\""],"title":"Perl","title_tokens":["perl"]},{"location":"dev_guide/system_command/#php","text":"<?php system ( \"codelab-message-pub -c hello_content\" ); ?>","text_tokens":[" ","-","hello","content","php","<","system","(","pub","_",")","codelab","message","c","\"",";",">","?"],"title":"PHP","title_tokens":["php"]},{"location":"dev_guide/system_command/#dart","text":"import 'dart:io' ; main () { Process . run ( 'codelab-message-pub' , [ '-c' , 'hello_content' ]); }","text_tokens":["hello","'","io","message",".","]","pub","[","codelab","run",":","content","(",",",")",";","c"," ","{","-","}","import","main","dart","_","process"],"title":"Dart","title_tokens":["dart"]},{"location":"dev_guide/system_command/#r","text":"system ( \"codelab-message-pub -c hello_content\" )","text_tokens":[" ","-","hello","content","(","system","pub","_",")","codelab","message","c","\""],"title":"R","title_tokens":["r"]},{"location":"dev_guide/system_command/#ruby","text":"system ( \"codelab-message-pub -c hello_content\" )","text_tokens":[" ","-","hello","content","(","system","pub","_",")","codelab","message","c","\""],"title":"Ruby","title_tokens":["ruby"]},{"location":"dev_guide/system_command/#crystal","text":"system \"codelab-message-pub -c hello_content\"","text_tokens":[" ","-","hello","content","system","pub","_","codelab","message","c","\""],"title":"Crystal","title_tokens":["crystal"]},{"location":"dev_guide/system_command/#python","text":"import subprocess subprocess . call ([ \"codelab-message-pub -c hello_content\" ], shell = True )","text_tokens":["hello","message",".","]","true","pub","[","codelab","subprocess","=","shell","content","(",",",")","c"," ","-","call","import","_","\""],"title":"Python","title_tokens":["python"]},{"location":"dev_guide/system_command/#javascriptnodejs","text":"const { execSync } = require ( 'child_process' ); execSync ( 'codelab-message-pub -c hello_content' );","text_tokens":["hello","'","message","execsync","pub","codelab","=","content","(",")",";","c","require"," ","{","-","}","const","child","_","process"],"title":"JavaScript(NodeJS)","title_tokens":[")","nodejs","javascript","("]},{"location":"dev_guide/system_command/#prolog","text":"shell ( 'codelab-message-pub -c hello_content' ).","text_tokens":[" ","-","hello","shell","content","'","(","pub","_",")","codelab","message","c","."],"title":"Prolog","title_tokens":["prolog"]},{"location":"dev_guide/system_command/#erlang","text":"!/ usr / bin / env escript main (_) -> output = os : cmd ( \"codelab-message-pub -c hello_content\" ), io : fwrite ( output ).","text_tokens":["hello","env","os","bin","io","message",".","usr","pub","codelab","output",">","fwrite","cmd","=",":","content","(",",",")","!","c","escript"," ","/","-","main","_","\""],"title":"Erlang","title_tokens":["erlang"]},{"location":"dev_guide/system_command/#java","text":"Runtime r = Runtime . getRuntime (); Process p = r . exec ( \"codelab-message-pub -c hello_content\" ); p . waitFor ();","text_tokens":["hello","waitfor","message",".","process","pub","codelab","getruntime","=","content","(",")",";","exec","c","p"," ","-","_","\"","runtime","r"],"title":"Java","title_tokens":["java"]},{"location":"dev_guide/system_command/#kotlin","text":"the same as Java","text_tokens":[" ","as","java","the","same"],"title":"Kotlin","title_tokens":["kotlin"]},{"location":"dev_guide/system_command/#clojure","text":"( use ' [ clojure.java.shell :only [ sh ]]) ( sh \"codelab-message-pub\" \"-c\" \"hello_content\" )","text_tokens":["hello","'","message",".","]","clojure","pub","java","[","codelab","sh",":","only","shell","content","(",")","c"," ","-","use","_","\""],"title":"Clojure","title_tokens":["clojure"]},{"location":"dev_guide/system_command/#scala","text":"import sys.process._ val cmd = \"codelab-message-pub -c hello_content\" val output = cmd .! // Captures the output","text_tokens":["hello","message","._",".","process","val","pub","codelab","output","cmd","=","content","!","c"," ","-","/","import","_","captures","sys","the","\""],"title":"Scala","title_tokens":["scala"]},{"location":"dev_guide/system_command/#groovy","text":"\"codelab-message-pub -c hello_content\" . execute ()","text_tokens":["-"," ","hello","execute","content","_","pub","(",")","codelab","message","c","\"","."],"title":"Groovy","title_tokens":["groovy"]},{"location":"dev_guide/system_command/#processing","text":"// https://forum.processing.org/two/discussion/24401/how-can-i-run-a-command-in-terminal-from-within-processing exec ( \"codelab-message-pub\" , \"-c\" , \"hello_content\" );","text_tokens":["how","a","hello","message","processing",".","can","discussion","https","two","from","pub","codelab","in","run",":","command","content","forum","(",",",")","exec",";","c"," ","/","org","-","within","terminal","24401","_","\"","i"],"title":"Processing","title_tokens":["processing"]},{"location":"dev_guide/system_command/#fortran","text":"CALL execute_command_line ( 'codelab-message-pub -c hello_content' )","text_tokens":[" ","-","hello","execute","call","command","content","'","_","(","pub",")","codelab","message","c","line"],"title":"Fortran","title_tokens":["fortran"]},{"location":"dev_guide/system_command/#ada","text":"-- https://www.pegasoft.ca/resources/boblap/13.html function system ( cmd : string ) returns integer ; pragma Import ( C , system ); Result := system ( \"codelab-message-pub -c hello_content\" & ASCII . NUL );","text_tokens":["resources","hello","pragma","&","message",".","https","13","www","ascii","nul","pub","codelab","cmd","function","=",":","ca","integer","content","(",",",")","returns",";","c","result","pegasoft","-"," ","/","string","import","\"","system","_","boblap","html"],"title":"Ada","title_tokens":["ada"]},{"location":"dev_guide/system_command/#brainfuck","text":"ref : https://kimiyuki.net/blog/2016/04/01/bash-on-brainfuck-on-anarchy-golf/","text_tokens":[" ","/","https","-",":","01","net","2016","brainfuck","kimiyuki","ref","bash","blog","04","golf","on",".","anarchy"],"title":"Brainfuck","title_tokens":["brainfuck"]},{"location":"dev_guide/system_command/#c_2","text":"// https://docs.microsoft.com/en-us/dotnet/core/tutorials/using-with-xplat-cli // https://kimsereyblog.blogspot.com/2018/01/start-processes-from-c-in-dotnet-core.html // https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-run?tabs=netcore21#examples","text_tokens":["com","netcore21","cli","tools","us",".","https","core","start","blogspot","from","xplat","en","tutorials","in","tabs","#","?","run","=",":","01","processes","c","dotnet"," ","/","-","kimsereyblog","html","microsoft","2018","using","docs","with","examples"],"title":"C#","title_tokens":["c#"]},{"location":"dev_guide/system_command/#pascal","text":"ref :https://wiki.freepascal.org/Executing_External_Programs","text_tokens":[" ","/","https","wiki","org",":","programs","external","_","executing","ref","freepascal","."],"title":"Pascal","title_tokens":["pascal"]},{"location":"dev_guide/system_command/#assembly","text":"ref: https://stackoverflow.com/questions/9342410/sys-execve-system-call-from-assembly","text_tokens":[" ","/","https","com","questions","-",":","call","from","9342410","system","ref","sys","execve","stackoverflow",".","assembly"],"title":"Assembly","title_tokens":["assembly"]},{"location":"dev_guide/system_command/#sql","text":"ref: https://stackoverflow.com/questions/43205594/running-system-command-with-argument-in-a-postgresql-function","text_tokens":["com","a","ref","43205594",".","https","questions","postgresql","argument","in","function",":","command","stackoverflow"," ","/","-","system","with","running"],"title":"SQL","title_tokens":["sql"]},{"location":"dev_guide/定制与分发/","text":"定制与分发 ¶ v3.7.2 版本之后，引入了一个钩子(hook): Adapter 在启动时，将加载 app_settings.py 文件。 app_settings.py 可以是任意 Python 脚本！ 文件位置 ¶ app_settings.py 的位置在不同系统下位置不同。 Windows ¶ 在 Windows 系统下，位于 src 目录下 MacOS ¶ 在 MacOS 系统下，位于 CodeLab-Adapter.app/Contents/Resources/ 典型应用场景 ¶ 初始化配置信息 ¶ app_settings.py 优先级高于 user_settings.py , 兼容user_settings.py的所有配置参数。 所以你可以使用该钩子配置 Adapter 的行为（诸如开启局域网访问权限，将其作为局域网消息中心） 重新分发 Adapter ¶ 近期我们发布了 Adapter 完整版, 将 Adapter Node 的环境(嵌入了 Python 解释器和依赖包)打包分发，用户不需要在本地安装 Python，即可运行 Adapter Node。 这项工作的最初动机是简化 DynamicTable 的使用，由于 DynamicTable 希望进入家庭，开箱可用是设计目标之一。所以我们选择将 环境和 Adapter 整体分发。 目前 Python 社区打包分发的机制五花八门，我几乎试遍了所有的机制。目前最喜欢的技巧是在 hack CMU 的 Calypso 软件时学来的:，它的内部 Python 环境十分复杂，但却做到了开箱可用。 这项工作的一个产物是，开发者可以将 Adapter 的自定义插件，连同整个环境一起分发！ Jypyterlab 、 OpenCV 、Tensorflow、 Numpy 等等这些复杂依赖，都能做到开箱可用。 你无需支出什么工作，便可把定制后的整个开发/教学 Python 环境分发给用户。 以上这些都基于 app_settings.py 钩子！ 生命周期 ¶ 利用这个钩子，也可以改变 Adapter 的运行生命周期，如果你愿意基于 Adapter 构建可扩展的 Python/Scratch 环境，将变得极其简易。 我看到目前 STEAM/编程教育许多团队在环境打包上，投入了很多人力，但灵活性做的很差。 将其视为 hack 机制, WTFPL Adapter 主页 ¶ 如果你想修改软件启动时打开的页面，只需要修改 WEB_UI_ENDPOINT 即可，诸如: WEB_UI_ENDPOINT = \"https://www.codelab.club/\" , 每次打开软件都将自动打开CodeLab主页 白名单(允许无 token 使用) ¶ 在 用户配置文件 或者app_settings.py修改 USER_WHITELIST_HOSTNAME 即可。 形如 USER_WHITELIST_HOSTNAME = [ \"codelab.club\" ]","text_tokens":["¶","团队","opencv","消息","人力","或者","如","、","whitelist","v3.7","优先","优先级","喜欢","hack","脚本","页面","选择","开发","不","jypyterlab","愿意","calypso","https","目前","www","配置文件","分","hook","释器","机制","十分","[","八门","后","形","无","技巧","连同","整个",":","系统","试遍","这些","打开","！","构建","设计","(",",","scratch","tensorflow","支出","基于","可用","但","许多","做","_","初始化","最","做到","所有","你","完整版","contents","resources","内部","生命","典型","windows","即可","局域","发给","只","近期","是","定制","位置","hostname","教育","能","兼容","学来",".","的","整体","配置","文件","endpoint","名单","不同","允许","周期","简易","产物","高于","打包","这项","使用","由于","codelab","开启","在","settings","初始","任意","几乎","它","可","时","wtfpl","白名单",")","编程","投入","需要","生命周期"," ","src","/","（","我们","家庭","却","差","之后","user","包","一起","加载","将","python","app","）","解释","十分复杂","都","可以","分发","py","。","工作","macos","该","我","复杂","应用","运行","与","目标","所以","简化","一个","自定义","也","嵌入","最初","上","时学来","依赖","下","dynamictable","看到","灵活","想","改变","作为","本地","以上","adapter","五花","自动","希望","信息","-","修改","很","社区","2","扩展","web","解释器","启动","灵活性","开发者","引入","中心","软件","主页","\"","，","自定","很多","和","定义","参数","场景","教学","开箱","诸如","如果","五花八门","完整","numpy","]","钩子","安装","其","把","版本","什么","利用","club","环境","等等","token","了","极其","行为","发布","便","之一","活性","目录","重新","=","ui","访问","整版","这个","steam","位于","插件","node","视为","用户","无需","权限","进入","动机","每次","变得","cmu","局域网"],"title":"定制与分发","title_tokens":["与","分发","定制"]},{"location":"dev_guide/定制与分发/#_1","text":"v3.7.2 版本之后，引入了一个钩子(hook): Adapter 在启动时，将加载 app_settings.py 文件。 app_settings.py 可以是任意 Python 脚本！","text_tokens":["可以","py","。","v3.7","是","脚本",".","文件","钩子","版本","hook","了","一个","在","settings",":","任意","！","时","(",")","adapter"," ","2","之后","启动","_","引入","加载","将","python","app","，"],"title":"定制与分发","title_tokens":["与","分发","定制"]},{"location":"dev_guide/定制与分发/#_2","text":"app_settings.py 的位置在不同系统下位置不同。","text_tokens":[" ","在","不同","settings","系统","下","py","的","。","_","位置","app","."],"title":"文件位置","title_tokens":["位置","文件"]},{"location":"dev_guide/定制与分发/#windows","text":"在 Windows 系统下，位于 src 目录下","text_tokens":[" ","在","src","目录","下","系统","windows","位于","，"],"title":"Windows","title_tokens":["windows"]},{"location":"dev_guide/定制与分发/#macos","text":"在 MacOS 系统下，位于 CodeLab-Adapter.app/Contents/Resources/","text_tokens":[" ","在","-","/","contents","resources","下","系统","macos","位于","codelab","app",".","，","adapter"],"title":"MacOS","title_tokens":["macos"]},{"location":"dev_guide/定制与分发/#_3","text":"","text_tokens":[],"title":"典型应用场景","title_tokens":["典型","应用","场景"]},{"location":"dev_guide/定制与分发/#_4","text":"app_settings.py 优先级高于 user_settings.py , 兼容user_settings.py的所有配置参数。 所以你可以使用该钩子配置 Adapter 的行为（诸如开启局域网访问权限，将其作为局域网消息中心）","text_tokens":["可以","参数","py","消息","。","诸如","该","局域","优先","优先级","兼容","的",".","配置","钩子","其","高于","所以","使用","行为","开启","settings","访问",",","）","作为","adapter"," ","（","权限","，","user","_","中心","将","app","局域网","所有","你"],"title":"初始化配置信息","title_tokens":["信息","初始化","配置","初始"]},{"location":"dev_guide/定制与分发/#adapter","text":"近期我们发布了 Adapter 完整版, 将 Adapter Node 的环境(嵌入了 Python 解释器和依赖包)打包分发，用户不需要在本地安装 Python，即可运行 Adapter Node。 这项工作的最初动机是简化 DynamicTable 的使用，由于 DynamicTable 希望进入家庭，开箱可用是设计目标之一。所以我们选择将 环境和 Adapter 整体分发。 目前 Python 社区打包分发的机制五花八门，我几乎试遍了所有的机制。目前最喜欢的技巧是在 hack CMU 的 Calypso 软件时学来的:，它的内部 Python 环境十分复杂，但却做到了开箱可用。 这项工作的一个产物是，开发者可以将 Adapter 的自定义插件，连同整个环境一起分发！ Jypyterlab 、 OpenCV 、Tensorflow、 Numpy 等等这些复杂依赖，都能做到开箱可用。 你无需支出什么工作，便可把定制后的整个开发/教学 Python 环境分发给用户。 以上这些都基于 app_settings.py 钩子！","text_tokens":["opencv","、","喜欢","hack","选择","开发","不","jypyterlab","calypso","目前","分","释器","机制","十分","八门","后","技巧","连同","整个","试遍",":","这些","！","设计","(",",","tensorflow","支出","基于","可用","但","_","最","做到","所有","你","完整版","内部","即可","发给","近期","是","定制","能","学来","的","整体",".","产物","打包","这项","使用","由于","在","settings","几乎","它","可",")","需要"," ","却","我们","/","家庭","包","一起","将","python","app","解释","十分复杂","都","可以","分发","py","。","工作","我","复杂","运行","目标","所以","简化","一个","自定义","嵌入","最初","时学来","依赖","dynamictable","本地","以上","adapter","五花","希望","社区","解释器","开发者","软件","，","自定","和","定义","教学","开箱","五花八门","完整","numpy","钩子","安装","把","什么","环境","等等","了","发布","便","之一","整版","插件","node","用户","无需","进入","动机","cmu"],"title":"重新分发 Adapter","title_tokens":[" ","分发","重新","adapter"]},{"location":"dev_guide/定制与分发/#_5","text":"利用这个钩子，也可以改变 Adapter 的运行生命周期，如果你愿意基于 Adapter 构建可扩展的 Python/Scratch 环境，将变得极其简易。 我看到目前 STEAM/编程教育许多团队在环境打包上，投入了很多人力，但灵活性做的很差。 将其视为 hack 机制, WTFPL","text_tokens":["可以","团队","很多","生命","人力","如果","。","hack","教育","我","的","愿意","钩子","其","运行","目前","周期","简易","利用","打包","机制","环境","了","极其","也","在","上","活性","看到","可","灵活","这个","构建","改变","wtfpl",",","scratch","steam","编程","投入","adapter","生命周期"," ","/","基于","视为","很","但","，","扩展","许多","做","差","灵活性","变得","python","将","你"],"title":"生命周期","title_tokens":["周期","生命","生命周期"]},{"location":"dev_guide/定制与分发/#adapter_1","text":"如果你想修改软件启动时打开的页面，只需要修改 WEB_UI_ENDPOINT 即可，诸如: WEB_UI_ENDPOINT = \"https://www.codelab.club/\" , 每次打开软件都将自动打开CodeLab主页","text_tokens":["只","即可","如果","诸如","endpoint","页面","的",".","你","https","www","club","codelab","想","ui",":","打开","=","时",",","需要","自动","修改"," ","/","web","启动","_","软件","每次","主页","将","\"","，","都"],"title":"Adapter 主页","title_tokens":[" ","主页","adapter"]},{"location":"dev_guide/定制与分发/#token","text":"在 用户配置文件 或者app_settings.py修改 USER_WHITELIST_HOSTNAME 即可。 形如 USER_WHITELIST_HOSTNAME = [ \"codelab.club\" ]","text_tokens":["py","或者","如","即可","hostname","。","whitelist",".","]","配置","文件","配置文件","club","[","codelab","形","在","settings","=","修改"," ","用户","user","_","app","\""],"title":"白名单(允许无 token 使用)","title_tokens":["名单"," ","允许","白名单","(",")","使用","token","无"]},{"location":"dev_guide/接入第三方平台/","text":"开放连接 ¶ CodeLab Adapter v3 允许 codelab.club 的合作方将 CodeLab Adapter v3 接入到自己的平台。从而让平台获得与开源硬件/AI/IoT 交互的能力，同时他们也可以将 CodeLab Adapter 用作真实的 Python 解释器（与本地文件系统/网络交互）。 我们将在这篇文章中展示如何将 CodeLab Adapter 接入到任何 Scratch 3.0 平台中。事实上，你可以将它接入任何 web 平台中（blockly/brython/electron……）。 本文中，我们给出了 CodeLab Adapter EIM 插件的源码 以及 scratch3-adapter extension_eim 的源码 。 教程 ¶ 我们假设你已经读了 创建你的第一个 Scratch 3.0 Extension ，如果没有，阅读完再回来。最好跟着文章操作一遍。 在 Scratch 3.0 中创建 EIM Extension ¶ Scratch 3.0 插件源码 ¶ 在 scratch-vm/src/extensions 目录创建 scratch3_eim/index.js Scratch 3.0 EIM 插件的源码我们已经放到 GitHub 上了： scratch3_eim ，源码本身不做过多解释，对照着它的功能，很容易搞懂。 值得注意的是， scratch3_eim 依赖于 socket.io-client ，你需要在 scratch-vm 中先安装依赖： socket.io-client Scratch 3.0 与 CodeLab Adapter 建立连接，最关键的部分是： this . socket = io ( `// ${ adapterHost } :12358` + \"/test\" , { transports : [ \"websocket\" ] }); 从架构图中，你可以更好地理解它们的交互： 从架构途图中也可以看出， CodeLab Adapter 支持任何平台。Scratch3 .0 只是它的一个 client，并没有特殊性，你可以在 blockly app 或者任何其他什么地方接入 CodeLab Adapter 。 CodeLab Adapter extension_eim 源码 ¶ CodeLab Adapter extension_eim 的源码，我们也已经更新到 GitHub 上： extension_eim.py 此外 extension_eim_monitor.py extension_eim_trigger.py 也是可以配合 Scratch 3.0 EIM 插件使用的。 开发者优先 ¶ 目前我们允许开发者在本地（ 127.0.0.1 ）将 CodeLab Adapter 接入到任何平台中。 需要注意的是，你需要将网站运行为 https（ webpack-dev-server --https ）来与 CodeLab Adapter 通信。 参考 ¶ 创建你的第一个 Scratch 3.0 Extension CodeLab Adapter 可以支持其他平台吗？","text_tokens":["¶","特殊性","参考","事实","或者","127.0","容易","为","优先","vm","创建","让","多","不","开发","https","？","目前","adapterhost","释器","github","[","一遍","完再","trigger","其他","展示",":","系统","看出","假设","到","搞懂","能力","scratch","(",",","支持","平台","}","3.0","做","如何","_","只是","中先","最","你","eim","合作方","同时","接入","架构图","本身","…","是","建立","部分","文章","的",".","文件","开源","允许","没有","server","使用","codelab","它们","关键","吗","理解","在","electron","它","monitor","教程",")","依赖于","地","0.1","需要","连接"," ","/","（","我们","src","赖于","读","地方","12358","注意","transports","跟着","将","python","）","以及","给出","解释","app","可以","过","这","更新","配合","py","篇文章","。","$","io","网络","特殊","对照","dev","websocket","硬件","运行","与","通信","test","开放","一个","也","上","他们","依赖","源码","用作","来","事实上","本地",";","adapter","`","并","-","js","很","web","第一","解释器","着","0","开发者","操作","scratch3","阅读","extensions","ai","this","\"","，","最好","合作","socket","+","任何","如果","从","中","第一个","v3","途图","]","交互","安装","什么","文件系统","自己","：","club","iot","了","值得注意","extension","目录","blockly","本文","=","放到","webpack","brython","值得","从而","网站","构图","插件","{","client","已经","index","此外","回来","获得","真实","架构","更好","功能"],"title":"接入第三方平台","title_tokens":["平台","接入","第三方","三方","第三"]},{"location":"dev_guide/接入第三方平台/#_1","text":"CodeLab Adapter v3 允许 codelab.club 的合作方将 CodeLab Adapter v3 接入到自己的平台。从而让平台获得与开源硬件/AI/IoT 交互的能力，同时他们也可以将 CodeLab Adapter 用作真实的 Python 解释器（与本地文件系统/网络交互）。 我们将在这篇文章中展示如何将 CodeLab Adapter 接入到任何 Scratch 3.0 平台中。事实上，你可以将它接入任何 web 平台中（blockly/brython/electron……）。 本文中，我们给出了 CodeLab Adapter EIM 插件的源码 以及 scratch3-adapter extension_eim 的源码 。","text_tokens":["合作","合作方","同时","接入","可以","这","eim","任何","篇文章","事实","。","…","中","网络","v3","文章","的",".","让","交互","文件","你","开源","硬件","允许","与","文件系统","自己","释器","club","iot","codelab","了","extension","也","在","他们","blockly","展示","electron","系统","本文","用作","它","源码","到","）","能力","scratch","事实上","本地","从而","brython","adapter","以及"," ","/","平台","（","我们","3.0","插件","-","web","解释器","如何","_","获得","真实","scratch3","将","python","ai","给出","解释","，"],"title":"开放连接","title_tokens":["开放","连接"]},{"location":"dev_guide/接入第三方平台/#_2","text":"我们假设你已经读了 创建你的第一个 Scratch 3.0 Extension ，如果没有，阅读完再回来。最好跟着文章操作一遍。","text_tokens":["如果","。","第一个","文章","的","创建","你","没有","了","一遍","extension","一个","完再","假设","scratch"," ","我们","已经","3.0","读","第一","回来","操作","跟着","阅读","，","最好"],"title":"教程","title_tokens":["教程"]},{"location":"dev_guide/接入第三方平台/#scratch-30-eim-extension","text":"","text_tokens":[],"title":"在 Scratch 3.0 中创建 EIM Extension","title_tokens":[" ","在","eim","3.0","scratch","中","extension","创建"]},{"location":"dev_guide/接入第三方平台/#scratch-30","text":"在 scratch-vm/src/extensions 目录创建 scratch3_eim/index.js Scratch 3.0 EIM 插件的源码我们已经放到 GitHub 上了： scratch3_eim ，源码本身不做过多解释，对照着它的功能，很容易搞懂。 值得注意的是， scratch3_eim 依赖于 socket.io-client ，你需要在 scratch-vm 中先安装依赖： socket.io-client Scratch 3.0 与 CodeLab Adapter 建立连接，最关键的部分是： this . socket = io ( `// ${ adapterHost } :12358` + \"/test\" , { transports : [ \"websocket\" ] }); 从架构图中，你可以更好地理解它们的交互： 从架构途图中也可以看出， CodeLab Adapter 支持任何平台。Scratch3 .0 只是它的一个 client，并没有特殊性，你可以在 blockly app 或者任何其他什么地方接入 CodeLab Adapter 。","text_tokens":["特殊性","或者","容易","vm","创建","多","不","adapterhost","github","[","其他","看出",":","(","搞懂","scratch",",","支持","平台","}","3.0","做","_","只是","中先","最","你","eim","接入","架构图","本身","是","建立","部分","的",".","没有","codelab","它们","关键","理解","在","它",")","依赖于","地","需要","连接"," ","/","src","我们","赖于","地方","12358","注意","transports","app","解释","过","可以","。","$","io","特殊","对照","websocket","与","test","一个","上","也","依赖","源码",";","adapter","`","并","-","js","很","着","0","extensions","scratch3","\"","this","，","socket","+","任何","从","中","途图","]","交互","安装","什么","：","了","值得注意","目录","blockly","=","放到","值得","构图","{","插件","client","已经","index","架构","更好","功能"],"title":"Scratch 3.0 插件源码","title_tokens":[" ","插件","3.0","源码","scratch"]},{"location":"dev_guide/接入第三方平台/#codelab-adapter-extension_eim","text":"CodeLab Adapter extension_eim 的源码，我们也已经更新到 GitHub 上： extension_eim.py 此外 extension_eim_monitor.py extension_eim_trigger.py 也是可以配合 Scratch 3.0 EIM 插件使用的。","text_tokens":["eim","可以","更新","配合","py","。","是",".","的","：","github","使用","codelab","extension","trigger","也","上","源码","monitor","到","scratch","adapter"," ","插件","我们","此外","已经","3.0","_","，"],"title":"CodeLab Adapter extension_eim 源码","title_tokens":[" ","eim","源码","_","codelab","adapter","extension"]},{"location":"dev_guide/接入第三方平台/#_3","text":"目前我们允许开发者在本地（ 127.0.0.1 ）将 CodeLab Adapter 接入到任何平台中。 需要注意的是，你需要将网站运行为 https（ webpack-dev-server --https ）来与 CodeLab Adapter 通信。","text_tokens":["接入","任何","127.0","为","。","中","是","dev",".","的","开发","你","https","运行","允许","目前","与","通信","server","codelab","在","webpack","到","0.1","来","本地","adapter","需要","网站","（"," ","我们","平台","-","开发者","注意","将","）","，"],"title":"开发者优先","title_tokens":["优先","开发者","开发"]},{"location":"dev_guide/接入第三方平台/#_4","text":"创建你的第一个 Scratch 3.0 Extension CodeLab Adapter 可以支持其他平台吗？","text_tokens":[" ","可以","创建","支持","3.0","其他","平台","？","第一","scratch","第一个","extension","codelab","adapter","的","你","一个","吗"],"title":"参考","title_tokens":["参考"]},{"location":"dev_guide/自定义插件/","text":"say python插件","text_tokens":[" ","say","python","插件"],"title":"自定义插件","title_tokens":["自定","定义","自定义","插件"]},{"location":"extension_guide/Aelos/","text":"Aelos Robot ¶ Demonstration： 在 Scratch3 中玩转机器人：Python、Deep Learning、Posenet and Robot！","text_tokens":["¶","玩转","、","中","deep","：","demonstration","机器人","learning","在","and","！"," ","机器","posenet","aelos","robot","scratch3","python"],"title":"Aelos Robot(正在迁移中)","title_tokens":[" ","aelos","正在","(",")","robot","中","迁移"]},{"location":"extension_guide/Aelos/#aelos-robot","text":"Demonstration： 在 Scratch3 中玩转机器人：Python、Deep Learning、Posenet and Robot！","text_tokens":[" ","在","玩转","and","deep","机器","posenet","！","：","demonstration","、","中","robot","scratch3","机器人","python","learning"],"title":"Aelos Robot","title_tokens":[" ","robot","aelos"]},{"location":"extension_guide/Aqara/","text":"Tutorial ¶ 提醒 Aqara 是实验性插件，未来可能移除。如果你比较依赖于它，建议自行维护Adapter Node，直接与Aqara云通信，这是一个例子: extension_Aqara_scene.py 。 我们准备长期支持的项目是 Longan hub 、 Home Assistant 和 WebThings 介绍 ¶ Aqara(绿米)智能家居用户可在 CodeLab 创作平台上对智能设备进行编程，让孩子将智能家庭改造为魔法世界吧！ Demo ¶ 更多好玩的演示 参考: CodeLab projects 提醒 目前只支持 Aqara 网关，不支持小米网关。 获取 token ¶ 点击 打开绿米授权 积木，将打开登陆页面，使用 Aqara 账号登陆后，将获得一个token。 连接到云 ¶ 之后将token复制到 连接 积木里, 运行它即可。 hello world ¶ 构建一个入门程序: 当小猫被点击时，将灯泡打开 扩展性 ¶ 使用 场景 积木，可以调用 Aqara APP 里定义的任何场景！ 如果你发现某些设备没有被积木化，可以通过把它纳入场景中，之后通过场景积木调用它！","text_tokens":["¶","aqara","参考","hello","为","更","、","页面","让","多","不","灯泡","进行","智能","目前","后","发现","准备",":","演示","打开","！","构建","(","到",",","调用","实验性","化","支持","平台","demo","比较","_","tutorial","你","assistant","智能家居","只","即可","是","直接",".","的","魔法","登陆","移除","没有","项目","使用","自行","codelab","在","小米","它","可","里","时","实验","这是",")","依赖于","编程","账号","projects","连接"," ","赖于","我们","扩展性","家庭","之后","将","对","积木","webthings","提醒","点击","app","可能","可以","py","longan","复制到","。","某些","被","运行","world","与","通信","维护","当","创作","一个","纳入","展性","上","世界","依赖","adapter","家居","扩展","吧","，","通过","长期","和","改造","定义","场景","任何","如果","中","建议","好玩","未来","绿米","设备","例子","把","孩子","程序","token","extension","hub","云","入门","scene","授权","小猫","插件","node","用户","复制","介绍","网关","获得","home","获取"],"title":"Aqara","title_tokens":["aqara"]},{"location":"extension_guide/Aqara/#tutorial","text":"提醒 Aqara 是实验性插件，未来可能移除。如果你比较依赖于它，建议自行维护Adapter Node，直接与Aqara云通信，这是一个例子: extension_Aqara_scene.py 。 我们准备长期支持的项目是 Longan hub 、 Home Assistant 和 WebThings","text_tokens":["aqara","长期","和","assistant","py","longan","。","如果","、","是","建议","直接","未来",".","的","例子","与","移除","通信","项目","维护","自行","extension","hub","云","一个","准备","依赖",":","它","实验","这是","scene","依赖于","adapter","实验性"," ","插件","赖于","node","我们","支持","，","webthings","比较","_","home","提醒","你","可能"],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/Aqara/#_1","text":"Aqara(绿米)智能家居用户可在 CodeLab 创作平台上对智能设备进行编程，让孩子将智能家庭改造为魔法世界吧！","text_tokens":["aqara","改造","智能家居","为","让","绿米","设备","进行","魔法","智能","孩子","codelab","创作","在","上","世界","可","！","(",")","编程"," ","平台","用户","家庭","家居","将","吧","对","，"],"title":"介绍","title_tokens":["介绍"]},{"location":"extension_guide/Aqara/#demo","text":"更多好玩的演示 参考: CodeLab projects 提醒 目前只支持 Aqara 网关，不支持小米网关。","text_tokens":["aqara","参考","只","更","。","好玩","的","多","不","目前","codelab","小米",":","演示","projects"," ","支持","网关","提醒","，"],"title":"Demo","title_tokens":["demo"]},{"location":"extension_guide/Aqara/#token","text":"点击 打开绿米授权 积木，将打开登陆页面，使用 Aqara 账号登陆后，将获得一个token。","text_tokens":[" ","aqara","页面","登陆","打开","。","获得","使用","账号","token","后","授权","将","积木","点击","，","一个","绿米"],"title":"获取 token","title_tokens":[" ","token","获取"]},{"location":"extension_guide/Aqara/#_2","text":"之后将token复制到 连接 积木里, 运行它即可。","text_tokens":[" ","复制","运行","里","之后","它","即可","复制到","。",",","token","将","积木","连接"],"title":"连接到云","title_tokens":["云","连接","到"]},{"location":"extension_guide/Aqara/#hello-world","text":"构建一个入门程序: 当小猫被点击时，将灯泡打开","text_tokens":[" ","被",":","打开","点击","构建","时","程序","小猫","将","当","入门","，","一个","灯泡"],"title":"hello world","title_tokens":[" ","hello","world"]},{"location":"extension_guide/Aqara/#_3","text":"使用 场景 积木，可以调用 Aqara APP 里定义的任何场景！ 如果你发现某些设备没有被积木化，可以通过把它纳入场景中，之后通过场景积木调用它！","text_tokens":["可以","aqara","定义","场景","任何","如果","中","某些","通过","的","设备","被","把","没有","使用","纳入","发现","里","它","！","调用","化"," ","，","之后","app","积木","你"],"title":"扩展性","title_tokens":["扩展","展性","扩展性"]},{"location":"extension_guide/Box2D/","text":"Tutorial ¶ 该文档由 @Hanson 同学 创建。 介绍 ¶ Box2D 是一个被广泛使用的 2D C++物理引擎，Codelab Scratch 中的 Box2D 插件基于 Javascript 构建。 不依赖于 CodeLab Adapter。 步骤 1 在 Codelab Scratch 中导入 Box2D 插件 ¶ 步骤 2 创建一个 Box2D 世界 ¶ 创建一个世界之后才能模拟物理。 使用 setup stage 模块在舞台上创建一个世界。它有 3 种样式： Boxed stage：有地板、墙和天花板的世界。墙和地板分别是舞台的下、左右边框，而天花板在舞台的 y=940 的高度。 Open(with floor)：只有地板的世界。 Open(no floor)：啥也没有的世界，但它还是一个世界。 之后可以选择设置重力中心（set gravity to），可以想象那里有一个质量无限大的物体吸引着其他物体。也可以不设置，默认在舞台下方。 步骤 3 使角色加入到物理世界 ¶ 只有被加入到物理世界他才会被物理法则所影响。 模块：Enable for** mode ** 参数 1 影响的对象： This costume 这个角色 This circle 角色的外接圆 This polygon 并不知道是什么意思，因为不会使用 All sprites 所有角色 参数 2 模式： Normal 普通 Precision 精确 步骤 4 重复模拟 ¶ 使用一个循环，其中有模块 step simulate 来重复模拟。 完成！ 至此，最基础的架构世界已经完成了。你现在可以使用运动模块等来让角色动起来。这些模块很好理解，只需要在架构好的世界里尝试一次就知道了。 注意：你的角色的质量会因大小而改变。你可以设置密度来影响它。 其它模块解释: Push with force** in direction ** 向某个方向施加一定大小的力。有惯性的影响。 注意：你的角色的质量会因大小而改变。你可以设置密度来影响它。 Spin with force ___ 顺时针旋转角色。参数为力量大小，有方向。同样受到惯性的影响。 Set density**_ roughness_** 设置密度和光滑程度。不知为何这里采用的是形容词来确定五种程度。 Set fixed___ 设置固定。 Touching any/feet 碰撞判断，参数为整个身体/脚。 Scroll 指的是舞台的滚动，舞台、重力中心和所有角色都会滚动。 异常 ¶ 当你的程序中出现了问题时，它并不会崩溃。现象就是你无法点击小绿旗来启动这个程序。此时你需要做的是检查程序，或是试着移除部分程序以确定哪里出现了问题。 已知问题 ¶ 当使角色加入物理世界时模块 Enable for** mode **参数为 this polygon 时会出现未知问题","text_tokens":["¶","当使","左右","roughness","地板","同学","为","惯性","时针","、","force","还是","绿旗","质量","基础","选择","创建","让","形容词","不","法则","step","好","知道","向","天花","默认","运动","某个","in","指","已知","其他","为何",":","完成","这些","其中","光滑","！","构建","由","(","到","物理","scratch","步骤","设置","gravity","javascript","分别","加入","普通","其它","未知","广泛","基于","施加","哪里","但","确定","sprites","做","_","墙","不会","意思","tutorial","box2d","会","for","最","因为","direction","spin","no","所有","你","normal","无限大","吸引","并不知道","一次","采用","尝试","1","*","种","样式","只","检查","模式","有","是","3","push","c++","对象","部分","的","想象","all","to","受到","形容","没有","密度","移除","floor","4","而","使用","检查程序","物体","codelab","所","碰撞","理解","在","不知","力","以","它","里","@","density","时",")","依赖于","需要","才","scroll","hanson","重力","会因"," ","赖于","啥","（","力量","/","异常","之后","精确","这里","角色","时会","注意","fixed","mode","）","出现","点击","解释","2d","都","set","可以","判断","costume","滚动","导入","。","模块","该","小","___","引擎","boxed","顺时","试着","被","顺时针","那里","setup","只有","程度","影响","当","一个","无限","上","也","世界","现在","依赖","舞台","下","脚","模拟","simulate","改变","来","adapter","并","就是","很","2","着","启动","天花板","中心","940","any","才能","this","polygon","同样","，","问题","和","固定","大小","参数","动","方向","一定","中","他","enable","y","open","外接圆","touching","precision","什么","：","现象","程序","了","起来","下方","等","重复","身体","就","=","高度","此时","或是","feet","这个","无法","整个","文档","stage","循环","插件","已经","circle","崩溃","介绍","至此","五种","使","with","架构","旋转","边框"],"title":"Box2D","title_tokens":["box2d"]},{"location":"extension_guide/Box2D/#tutorial","text":"该文档由 @Hanson 同学 创建。","text_tokens":[" ","创建","同学","@","由","。","该","文档","hanson"],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/Box2D/#_1","text":"Box2D 是一个被广泛使用的 2D C++物理引擎，Codelab Scratch 中的 Box2D 插件基于 Javascript 构建。 不依赖于 CodeLab Adapter。","text_tokens":["。","是","中","c++","的","引擎","不","被","使用","codelab","一个","依赖","构建","物理","scratch","依赖于","javascript","adapter"," ","广泛","插件","基于","赖于","box2d","，","2d"],"title":"介绍","title_tokens":["介绍"]},{"location":"extension_guide/Box2D/#1-codelab-scratch-box2d","text":"","text_tokens":[],"title":"步骤 1 在 Codelab Scratch 中导入 Box2D 插件","title_tokens":[" ","在","插件","1","导入","scratch","步骤","中","box2d","codelab"]},{"location":"extension_guide/Box2D/#2-box2d","text":"创建一个世界之后才能模拟物理。 使用 setup stage 模块在舞台上创建一个世界。它有 3 种样式： Boxed stage：有地板、墙和天花板的世界。墙和地板分别是舞台的下、左右边框，而天花板在舞台的 y=940 的高度。 Open(with floor)：只有地板的世界。 Open(no floor)：啥也没有的世界，但它还是一个世界。 之后可以选择设置重力中心（set gravity to），可以想象那里有一个质量无限大的物体吸引着其他物体。也可以不设置，默认在舞台下方。","text_tokens":["可以","和","左右","种","地板","样式","。","模块","、","有","3","是","还是","y","的","open","创建","选择","想象","boxed","质量","吸引","不","to","那里","setup","没有","只有","floor","：","而","使用","天花","默认","物体","下方","一个","无限","在","上","世界","也","=","舞台","下","高度","它","其他","模拟","(","）","物理",")","gravity","设置","无限大","分别","stage","重力"," ","（","啥","但","之后","着","天花板","墙","940","中心","才能","with","no","，","边框","set"],"title":"步骤 2 创建一个 Box2D 世界","title_tokens":[" ","创建","世界","2","步骤","box2d","一个"]},{"location":"extension_guide/Box2D/#3","text":"只有被加入到物理世界他才会被物理法则所影响。 模块：Enable for** mode ** 参数 1 影响的对象： This costume 这个角色 This circle 角色的外接圆 This polygon 并不知道是什么意思，因为不会使用 All sprites 所有角色 参数 2 模式： Normal 普通 Precision 精确","text_tokens":["*","参数","1","costume","。","模块","模式","是","他","enable","对象","的","外接圆","all","法则","precision","被","只有","什么","：","知道","使用","影响","所","因为","不知","世界","这个","到","物理","普通","加入","才"," ","circle","2","sprites","精确","角色","不会","意思","会","mode","for","polygon","this","所有","，","normal","并不知道"],"title":"步骤 3 使角色加入到物理世界","title_tokens":[" ","世界","到","角色","物理","步骤","3","加入","使"]},{"location":"extension_guide/Box2D/#4","text":"使用一个循环，其中有模块 step simulate 来重复模拟。 完成！ 至此，最基础的架构世界已经完成了。你现在可以使用运动模块等来让角色动起来。这些模块很好理解，只需要在架构好的世界里尝试一次就知道了。 注意：你的角色的质量会因大小而改变。你可以设置密度来影响它。 其它模块解释: Push with force** in direction ** 向某个方向施加一定大小的力。有惯性的影响。 注意：你的角色的质量会因大小而改变。你可以设置密度来影响它。 Spin with force ___ 顺时针旋转角色。参数为力量大小，有方向。同样受到惯性的影响。 Set density**_ roughness_** 设置密度和光滑程度。不知为何这里采用的是形容词来确定五种程度。 Set fixed___ 设置固定。 Touching any/feet 碰撞判断，参数为整个身体/脚。 Scroll 指的是舞台的滚动，舞台、重力中心和所有角色都会滚动。","text_tokens":["roughness","为","惯性","时针","、","force","质量","基础","形容词","让","step","好","知道","向","运动","某个","in","指","整个","为何",":","完成","这些","其中","光滑","！","设置","其它","施加","确定","_","fixed","最","spin","会","direction","判断","所有","一次","你","采用","尝试","*","只","有","是","push","的","受到","形容","密度","而","使用","碰撞","理解","在","不知","力","里","它","density","需要","scroll","会因","重力"," ","/","力量","这里","角色","注意","解释","都","set","可以","滚动","模块","。","___","顺时","顺时针","程度","影响","一个","世界","现在","舞台","脚","模拟","simulate","改变","来","很","中心","any","同样","，","和","固定","大小","参数","动","方向","一定","touching","：","了","起来","等","重复","身体","就","feet","循环","已经","至此","五种","with","架构","旋转"],"title":"步骤 4 重复模拟","title_tokens":[" ","模拟","4","步骤","重复"]},{"location":"extension_guide/Box2D/#_2","text":"当你的程序中出现了问题时，它并不会崩溃。现象就是你无法点击小绿旗来启动这个程序。此时你需要做的是检查程序，或是试着移除部分程序以确定哪里出现了问题。","text_tokens":["。","中","是","小","绿旗","部分","的","你","试着","移除","现象","程序","检查程序","了","当","以","此时","或是","它","时","无法","这个","来","需要","并","就是","哪里","崩溃","确定","做","启动","不会","出现","点击","检查","，","问题"],"title":"异常","title_tokens":["异常"]},{"location":"extension_guide/Box2D/#_3","text":"当使角色加入物理世界时模块 Enable for** mode **参数为 this polygon 时会出现未知问题","text_tokens":["当使","*","参数","为","模块","enable","世界","时","物理","加入"," ","未知","polygon","角色","时会","mode","for","出现","this","问题"],"title":"已知问题","title_tokens":["问题","已知"]},{"location":"extension_guide/Calypso/","text":"Tutorial ¶ Calypso 是 CMU 大学七年来对儿童如何学习基于规则的机器人编程的研究成果。由 David S. Touretzky 博士构建，他是 CMU 计算机科学和神经认知基础中心的研究教授。此外，Touretzky 一直活跃在互联网，主张言论自由。 Calypso 目前用于为 Cozmo 编程。被广泛用于 AI 教育项目. Demo ¶ 当 Cozmo 看到我表情悲伤时，将帮我升起窗帘: \"Give you some sunshine\" 相关代码: 在 Calypso 中: 源文件: give-you-sunshine.calypso , 关键部分是 当 cozmo 说 message sad 时, sad 消息将被发送到 Scratch EIM 插件里。 实际上只要 Cozmo 说的话形如 message xxx , xxx 消息都将被发送到 Scratch EIM 插件里。 想法最初来自 @jinlei 提到的圣经里关于 powerful word 的段落。 -- 在 Scratch 中: 源文件: Scratch-calypso 参考 ¶ calypso.software 使用 Calypso 的世界 AI 青年比赛（WAICY） Reading, Writing, 'Rithmetic ... and Now, Robotics AI4All 学生使用 Calypso 进行 AI 入门 介绍了人工智能主题（计算机视觉，路径规划，文本到语音等） ReadyAI 现在提供 Calypso 的机构许可证 : 在学校，外展计划和计算机营中使用 Calypso Activity: Cozmo's Shack","text_tokens":["¶","规则","只要","发送到","参考","消息","为","如","基础","calypso","进行","目前","智能","主题","cozmo","xxx","形",":","说","计算机","robotics","计划","touretzky","由","构建","联网",",","scratch","比赛","到","机构","许可证","give","语音","广泛","基于","demo","科学","如何","升起","关于","tutorial","想法","计算","算机","eim","代码","writing","大学","是","七年","教育","部分","的",".","文件","圣经","自由","项目","使用","言论","activity","机器人","you","shack","关键","源文件","在","一直","里","的话","时","@","编程","规划"," ","提到","（","机器","来自","...","将","窗帘","研究成果","对","）","都","s","rithmetic","'","。","jinlei","我","waicy","被","路径","计算机科学","送到","互联网","当","学习","software","最初","世界","现在","用于","看到","活跃","来","sad","研究","-","实际","readyai","外展","中心","表情","许可","ai","\"","powerful","，","儿童","reading","相关","和","sunshine","悲伤","学生","word","some","中","言论自由","人工智能","互联","message","他","营中","段落","ai4all","now","实际上","了","入门","视觉","认知","等","and","主张","帮","发送","成果","博士","教授","青年","插件","此外","学校","介绍","文本","提供","cmu","david","神经","人工"],"title":"Calypso","title_tokens":["calypso"]},{"location":"extension_guide/Calypso/#tutorial","text":"Calypso 是 CMU 大学七年来对儿童如何学习基于规则的机器人编程的研究成果。由 David S. Touretzky 博士构建，他是 CMU 计算机科学和神经认知基础中心的研究教授。此外，Touretzky 一直活跃在互联网，主张言论自由。 Calypso 目前用于为 Cozmo 编程。被广泛用于 AI 教育项目.","text_tokens":["规则","和","ai","s","为","计算","。","大学","是","言论自由","七年","互联","教育","他","的",".","基础","研究成果","calypso","被","目前","自由","计算机科学","项目","cozmo","言论","机器人","互联网","学习","认知","在","一直","主张","用于","计算机","touretzky","由","构建","联网","活跃","来","编程","成果","博士","教授","研究"," ","广泛","基于","此外","机器","科学","如何","中心","cmu","david","神经","对","，","儿童","算机"],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/Calypso/#demo","text":"当 Cozmo 看到我表情悲伤时，将帮我升起窗帘: \"Give you some sunshine\" 相关代码: 在 Calypso 中: 源文件: give-you-sunshine.calypso , 关键部分是 当 cozmo 说 message sad 时, sad 消息将被发送到 Scratch EIM 插件里。 实际上只要 Cozmo 说的话形如 message xxx , xxx 消息都将被发送到 Scratch EIM 插件里。 想法最初来自 @jinlei 提到的圣经里关于 powerful word 的段落。 -- 在 Scratch 中: 源文件: Scratch-calypso","text_tokens":["eim","相关","sunshine","只要","发送到","代码","消息","悲伤","如","word","。","jinlei","some","中","是","message","我","部分",".","的","段落","文件","圣经","calypso","被","cozmo","送到","实际上","you","xxx","形","当","关键","源文件","在","最初",":","说","看到","里","的话","时","帮","@",",","发送","scratch","give","sad"," ","-","插件","实际","提到","升起","表情","来自","关于","想法","将","窗帘","\"","powerful","，","都"],"title":"Demo","title_tokens":["demo"]},{"location":"extension_guide/Calypso/#_1","text":"calypso.software 使用 Calypso 的世界 AI 青年比赛（WAICY） Reading, Writing, 'Rithmetic ... and Now, Robotics AI4All 学生使用 Calypso 进行 AI 入门 介绍了人工智能主题（计算机视觉，路径规划，文本到语音等） ReadyAI 现在提供 Calypso 的机构许可证 : 在学校，外展计划和计算机营中使用 Calypso Activity: Cozmo's Shack","text_tokens":["reading","和","ai","s","rithmetic","writing","学生","'","计算","人工智能","营中","的",".","waicy","calypso","进行","路径","智能","ai4all","now","主题","cozmo","使用","activity","shack","了","入门","视觉","software","等","and","在","世界","现在",":","robotics","计算机","计划","比赛","到",",","机构","许可证","青年","语音","规划"," ","（","学校","介绍","readyai","文本","外展","提供","许可","...","人工","）","，","算机"],"title":"参考","title_tokens":["参考"]},{"location":"extension_guide/EP3/","text":"RoboMaster 3.0 ¶ 提醒 目前只支持RoboMaster EP(暂不支持S1)，受限于大疆的开放接口: RoboMaster SDK 新手入门 - EP 篇 RoboMaster EP 插件的 3.0 版本， 基于 DJI 官方的 SDK: RoboMaster SDK 库。 能够充分利用设备的能力。 该插件能做到阻塞式( wait_for_completed )运行，这对于执行 序列 类程序很棒 使用说明 ¶ 目前该插件并未内置到 Adapter 中（因其复杂的打包依赖，而且跨平台兼容性不好）。 我们目前将插件构建为 Adapter Node ，可以在Adapter外部以普通Python文件运行，一旦运行起来，与普通Adapter插件是一样的，能够与Adapter体系的所有事物交互。 Python环境 ¶ 首先你本地需要有 Python 环境（ Python>=3.6 ） 你可以到 Python 官方 下载，也可以使用 CodeLab放在 国内的版本(Python3.7) 提醒 Mac 用户和 Linux 本地很可能内置了 Python3 安装依赖 ¶ pip install robomaster codelab_adapter_client --upgrade 开始！ ¶ 提醒 Tello 会占用 wifi，导致电脑无法联网，请使用 CodeLab Adapter 的离线模式: FAQ：离线使用 (在 >=3.4.0 的版本中可用)。 步骤 1：打开 CodeLab Scratch ¶ 运行CodeLab Adapter， 确保在线平台与Adapte连接正常。 看到 CodeLab Scratch 指示灯显示绿色，代表连接成功。 步骤 1：运行 node_RoboMaster3.py ¶ 将 node_RoboMaster3.py 插件下载到本地（随便放在一个文件夹里），在命令行中进入到这个文件夹，使用 python node_RoboMaster3.py 运行它。 步骤 2: 前进! ¶ 选择 scratch3 中的 EIM 插件. 以下是一个简单 demo: EP3-demo 进阶 ¶ 更多API参考文档: RoboMaster SDK","text_tokens":["¶","参考","为","一样","install","类","wifi","更","外部","很棒","指示灯","选择","多","不","而且","简单","目前","dji","篇","跨平台",":","打开","！","构建","联网","离线","(","ep","能力","到","普通","步骤","scratch","随便","电脑","执行","因","支持","基于","平台","3.0","充分利用","3.6","可用","demo","_","并未","做到","会","for","completed","所有","你","首先","eim","1","linux","robomaster","只","tello","模式","有","是","库","能","兼容","的",".","命令行","文件","robomaster3","adapte","以下","打包","python3","使用","一旦","codelab","容性",">","国内","在","以","序列","里","它",")","!","需要","成功","暂","连接"," ","（","我们","放在","限于","说明","将","python","）","提醒","可能","可以","这","接口","py","。","该","官方","复杂","件夹","运行","与","新手入门","受限于","开放","一个","也","事物","依赖","看到","兼容性","请","wait","本地","确保","adapter","python3.7","-","大疆","很","在线","2","3.4","指示","0","scratch3","内置","，","和","受限","sdk","充分","前进","正常","中","不好","阻塞","mac","交互","设备","安装","其","下载","ep3","代表","版本","显示","新手","利用","：","式","s1","程序","环境","api","了","起来","入门","pip","=","导致","这个","对于","能够","无法","upgrade","faq","文档","进阶","绿色","插件","node","client","用户","开始","进入","占用","文件夹","命令","体系","分利"],"title":"RoboMaster 3.0","title_tokens":[" ","robomaster","3.0"]},{"location":"extension_guide/EP3/#robomaster-30","text":"提醒 目前只支持RoboMaster EP(暂不支持S1)，受限于大疆的开放接口: RoboMaster SDK 新手入门 - EP 篇 RoboMaster EP 插件的 3.0 版本， 基于 DJI 官方的 SDK: RoboMaster SDK 库。 能够充分利用设备的能力。 该插件能做到阻塞式( wait_for_completed )运行，这对于执行 序列 类程序很棒","text_tokens":["这","受限","sdk","接口","robomaster","只","充分","。","类","该","库","能","阻塞","很棒","的","官方","不","设备","运行","目前","版本","新手","利用","新手入门","式","s1","dji","程序","受限于","开放","入门","篇","序列",":","对于","能够","(","ep",")","能力","wait","暂","执行"," ","支持","-","插件","限于","大疆","3.0","基于","充分利用","_","做到","for","completed","提醒","，","分利"],"title":"RoboMaster 3.0","title_tokens":[" ","robomaster","3.0"]},{"location":"extension_guide/EP3/#_1","text":"目前该插件并未内置到 Adapter 中（因其复杂的打包依赖，而且跨平台兼容性不好）。 我们目前将插件构建为 Adapter Node ，可以在Adapter外部以普通Python文件运行，一旦运行起来，与普通Adapter插件是一样的，能够与Adapter体系的所有事物交互。","text_tokens":["可以","为","一样","。","该","中","外部","是","不好","兼容","的","复杂","体系","文件","而且","交互","其","运行","目前","与","打包","一旦","起来","容性","跨平台","在","以","事物","依赖","构建","能够","到","兼容性","普通","adapter","因","插件"," ","（","平台","我们","node","并未","内置","将","）","python","所有","，"],"title":"使用说明","title_tokens":["说明","使用"]},{"location":"extension_guide/EP3/#python","text":"首先你本地需要有 Python 环境（ Python>=3.6 ） 你可以到 Python 官方 下载，也可以使用 CodeLab放在 国内的版本(Python3.7) 提醒 Mac 用户和 Linux 本地很可能内置了 Python3","text_tokens":["可以","和","linux","有","的","官方","mac","你","下载","版本","python3","环境","使用","codelab","了",">","国内","也","=","到","(",")","本地","需要","python3.7"," ","（","放在","3.6","用户","很","python","内置","）","提醒","，","首先","可能"],"title":"Python环境","title_tokens":["环境","python"]},{"location":"extension_guide/EP3/#_2","text":"pip install robomaster codelab_adapter_client --upgrade","text_tokens":[" ","-","client","install","robomaster","_","upgrade","codelab","adapter","pip"],"title":"安装依赖","title_tokens":["安装","依赖"]},{"location":"extension_guide/EP3/#_3","text":"提醒 Tello 会占用 wifi，导致电脑无法联网，请使用 CodeLab Adapter 的离线模式: FAQ：离线使用 (在 >=3.4.0 的版本中可用)。","text_tokens":["tello","wifi","模式","。","中","的",".","版本","：","使用","codelab",">","在","=","导致",":","联网","无法","离线","(",")","请","faq","adapter","电脑"," ","可用","占用","3.4","0","会","提醒","，"],"title":"开始！","title_tokens":["开始","！"]},{"location":"extension_guide/EP3/#1-codelab-scratch","text":"运行CodeLab Adapter， 确保在线平台与Adapte连接正常。 看到 CodeLab Scratch 指示灯显示绿色，代表连接成功。","text_tokens":["。","正常","指示灯","adapte","运行","代表","与","显示","codelab","看到","scratch","确保","adapter","成功","绿色","连接"," ","平台","在线","指示","，"],"title":"步骤 1：打开 CodeLab Scratch","title_tokens":[" ","1","打开","：","scratch","步骤","codelab"]},{"location":"extension_guide/EP3/#1-node_robomaster3py","text":"将 node_RoboMaster3.py 插件下载到本地（随便放在一个文件夹里），在命令行中进入到这个文件夹，使用 python node_RoboMaster3.py 运行它。","text_tokens":["py","。","中",".","命令行","文件","件夹","robomaster3","下载","运行","使用","一个","在","里","它","这个","随便","到","本地"," ","插件","node","（","放在","进入","文件夹","_","命令","将","python","）","，"],"title":"步骤 1：运行 node_RoboMaster3.py","title_tokens":[" ","robomaster3","node","1","运行","py","：","_","步骤","."]},{"location":"extension_guide/EP3/#2","text":"选择 scratch3 中的 EIM 插件. 以下是一个简单 demo: EP3-demo","text_tokens":[" ","eim","插件","简单",".","demo",":","ep3","-","以下","中","是","scratch3","的","选择","一个"],"title":"步骤 2: 前进!","title_tokens":[" ",":","2","前进","步骤","!"]},{"location":"extension_guide/EP3/#_4","text":"更多API参考文档: RoboMaster SDK","text_tokens":[" ","参考",":","sdk","robomaster","更","api","文档","多"],"title":"进阶","title_tokens":["进阶"]},{"location":"extension_guide/EasyOCR/","text":"Tutorial ¶ 支持70多种语言的开箱可用OCR，包括中文，日文，韩文和泰文... EasyOCR 的一层薄薄包装，将 EasyOCR 的能力引入 Scratch 使用 ¶ 运行 CodeLab Adapter。 使用 pip 安装 easyocr: python -m pip install easyocr codelab_adapter_client>=1.9.2 运行以下程序: from codelab_adapter_client.utils import run_monitor , save_base64_to_image import easyocr reader = easyocr . Reader ([ 'ch_sim' , 'en' ], gpu = True ) # need to run only once to load model into memory def monitor ( msg ): filename = save_base64_to_image ( msg , \"tmp_img\" ) result = reader . readtext ( filename , detail = 0 ) if result : return str ( result ) run_monitor ( monitor ) 对以上机制不熟悉的朋友可以参考 Python对象的连接器：EIM 插件 打开 测试项目 由于 easyocr 的计算发生在本地，且基于神经网络，所以处理时间比较久， 处理后的结果将返回到 收到的消息 总结 ¶ 这个例子展示了，使用 CodeLab Adapter 可以轻松将 AI 能力接入Scratch","text_tokens":["¶","总结","泰文","参考","消息","install","处理","不","语言","save","once","熟悉","薄薄","机制","[","后","且","日文","run","展示",":","打开","(",",","能力","scratch","到","filename","支持","基于","可用","gpu","比较","_","轻松","tutorial","计算","readtext","eim","接入","tmp","对象","的",".","神经网络","to","以下","项目","中文","使用","由于","codelab","收到","#",">","在","image","连接器","monitor",")","ch","连接"," ","接器","if","model","detail","...","将","1.9","python","对","可以","韩文","包括","str","'","。","ocr","网络","return","发生","base64","def","运行","结果","from","测试项目","所以","返回","en","包装","久","本地","以上","adapter","msg","神经网","-","2","import","0","引入","load","多种语言","70","ai","\"","，","和","测试","一层","img","开箱","easyocr","]","安装","例子","true","：","程序","into","m","utils","reader","sim","了","memory","pip","=","only","这个","多种","result","插件","朋友","client","need","神经","时间"],"title":"EasyOCR","title_tokens":["easyocr"]},{"location":"extension_guide/EasyOCR/#tutorial","text":"支持70多种语言的开箱可用OCR，包括中文，日文，韩文和泰文... EasyOCR 的一层薄薄包装，将 EasyOCR 的能力引入 Scratch","text_tokens":["韩文","和","泰文","包括","一层","开箱","ocr","easyocr","的","语言","中文","薄薄","日文","包装","多种","能力","scratch"," ","支持","可用","引入","多种语言","...","70","将","，"],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/EasyOCR/#_1","text":"运行 CodeLab Adapter。 使用 pip 安装 easyocr: python -m pip install easyocr codelab_adapter_client>=1.9.2 运行以下程序: from codelab_adapter_client.utils import run_monitor , save_base64_to_image import easyocr reader = easyocr . Reader ([ 'ch_sim' , 'en' ], gpu = True ) # need to run only once to load model into memory def monitor ( msg ): filename = save_base64_to_image ( msg , \"tmp_img\" ) result = reader . readtext ( filename , detail = 0 ) if result : return str ( result ) run_monitor ( monitor ) 对以上机制不熟悉的朋友可以参考 Python对象的连接器：EIM 插件 打开 测试项目 由于 easyocr 的计算发生在本地，且基于神经网络，所以处理时间比较久， 处理后的结果将返回到 收到的消息","text_tokens":["参考","消息","install","处理","不","save","once","熟悉","机制","[","后","且","run",":","打开","(",",","到","filename","基于","gpu","比较","_","计算","readtext","eim","tmp","对象",".","的","神经网络","to","以下","项目","使用","由于","codelab","收到","#",">","在","image","连接器","monitor",")","ch","连接"," ","接器","if","model","detail","python","1.9","对","将","可以","str","'","。","网络","return","发生","base64","def","运行","结果","from","测试项目","所以","返回","en","久","本地","以上","adapter","msg","神经网","-","2","import","0","load","\"","，","测试","img","easyocr","]","安装","true","：","程序","into","m","utils","reader","sim","memory","pip","=","only","result","插件","朋友","client","need","神经","时间"],"title":"使用","title_tokens":["使用"]},{"location":"extension_guide/EasyOCR/#_2","text":"这个例子展示了，使用 CodeLab Adapter 可以轻松将 AI 能力接入Scratch","text_tokens":[" ","可以","例子","ai","展示","接入","这个","轻松","能力","使用","scratch","了","codelab","将","，","adapter"],"title":"总结","title_tokens":["总结"]},{"location":"extension_guide/GameShell/","text":"Tutorial ¶ 依赖 ¶ 安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器. 使用 ¶ 参考 作为游戏机厅的 CodeLab 可编程空间 Demo ¶ 将 GameShell 接入 CodeLab Adapter 之后， 我们将其用作 CodeLab 可编程空间的控制手柄:","text_tokens":["¶","团队","接入","参考","现阶段","为","控制","更","厅","效果","可编程","建议","chrome","gameshell",".","官方","的","可编","多","安装","其","手柄","其设","目前","版本","使用","默认","codelab","最佳","在","阶段","依赖",":","用作","scratch","作为","编程","adapter","浏览","陆续","游戏"," ","支持","/","我们","demo","游戏机","之后","tutorial","将","空间","firefox","，","浏览器"],"title":"GameShell","title_tokens":["gameshell"]},{"location":"extension_guide/GameShell/#tutorial","text":"","text_tokens":[],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/GameShell/#_1","text":"安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器.","text_tokens":["团队","现阶段","为","更","效果","建议","chrome",".","官方","多","安装","其设","目前","版本","使用","默认","codelab","最佳","在","阶段","scratch","adapter","浏览","陆续"," ","支持","/","将","firefox","，","浏览器"],"title":"依赖","title_tokens":["依赖"]},{"location":"extension_guide/GameShell/#_2","text":"参考 作为游戏机厅的 CodeLab 可编程空间","text_tokens":[" ","参考","游戏机","可编程","厅","作为","编程","codelab","空间","可编","游戏","的"],"title":"使用","title_tokens":["使用"]},{"location":"extension_guide/GameShell/#demo","text":"将 GameShell 接入 CodeLab Adapter 之后， 我们将其用作 CodeLab 可编程空间的控制手柄:","text_tokens":["接入","控制","可编程","的","可编","手柄","其","codelab",":","用作","编程","adapter"," ","我们","之后","将","空间","gameshell","，"],"title":"Demo","title_tokens":["demo"]},{"location":"extension_guide/HCI/","text":"Tutorial ¶ 依赖 ¶ 安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器. 步骤 1：安装依赖 ¶ Windows 和 Mac 用户开箱可用。 Linux需要安装依赖: 参考 PyAutoGUI Install pip3 install codelab_adapter_client --upgrade ps: 使用 Python3 提醒 MacOS 升级到最新版本后，可能会导致部分控制类积木无法使用，使系统安全机制升级造成的（我也是可悲的 Mac 用户，下个计算机一定要使用开源系统。）。详情参考: Pyautogui doesn't seem to work on macOS Mojave 。 相关问题: Catalina does not allow to capture the screen 。这个问题的结局方案似乎是让系统信任Adapter内置的Python: codelab-adapter-3_7_3-mac.app/Contents/Resources/Support/bin/python3 步骤 2：打开 Codelab Adapter ¶ 双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。 步骤 3：打开 Codelab Scratch3 ¶ 点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常 步骤 4：加载 HCI 插件 ¶ 在 Web UI 中点击加载 HCI 插件 步骤 5：Scratch3 HCI 插件 ¶ 选择对应的 Scratch3 插件：HCI demo ¶ 尚雅学校目前在使用 CodeLab Adapter，有位老师想使用魔杖激活开场视频，使用 HCI 插件可以轻松做到: 以下是源码: 魔杖播放视频 Windows 10 用户 ¶ Windows10的某些版本，默认会在页面下方闪烁播放器图标，而不是打开。 可以考虑使用网页打开视频链接，如果你的视频在本地，可以托管给 Adapter，具体而言: 在 Adapter Web UI 里 打开扩展目录 将视频放到 扩展目录 下的 src 目录里 现在这个视频可以使用链接打开了! 它的地址为: https://codelab-adapter.codelab.club:12358/static/1608804837247213.mp4 , 注意，最后的 1608804837247213.mp4 是你的视频名字，最好不用中文。 这是一个示例程序: 魔杖开场视频--使用链接 高阶用法 ¶ HCI 插件允许你写 Python 代码， PyAutoGUI 文档中的所有功能你都可以在 Scratch 中使用。 Tips 如果你想使用HCI接管游戏，要注意 press 是瞬间行为（一般无效），一般游戏是在大循环中检测的你是否按下某个按键，所以建议按下一段时间（使用keyDown和keyUp，中间间隔一会儿。）","text_tokens":["¶","团队","参考","现阶段","为","install","或者","类","更","下个","页面","选择","具体","让","多","https","目前","support","机制","用法","press","地址","默认","后","某个","大","激活","托管",":","系统","打开","计算机","7","图中","到",",","scratch","步骤","播放器","而言","陆续","hci","支持","可用","demo","给","按下","轻松","_","要","10","tutorial","会","做到","计算","firefox","所有","你","浏览器","算机","contents","resources","1","linux","升级","信任","代码","windows","capture","是","3","不用","部分","老师","一会",".","的","网页","最新","开源","呈现","to","高阶","允许","seem","检测","以下","4","python3","中文","而","使用","codelab","结局","是否","在","考虑","阶段","按键","里","它","这是","似乎","中间","!","需要","t","连接"," ","/","（","src","箭头","小圆点","一段时间","之后","最后","12358","说明","注意","pip3","系统安全","加载","将","python","）","积木","提醒","app","work","点击","名字","可能","魔杖","可以","都","tips","接管","allow","这儿","无效","一会儿","'","。","详情","效果","macos","对应","播放","ps","安全","某些","我","不是","官方","keydown","does","尚雅","keyup","其设","与","双击","scratch3.0","所以","如下","最佳","screen","一个","也","上","现在","想","依赖","源码","下","会儿","一般","有位","not","圆点","本地","adapter","一段","-","视频","pyautogui","windows10","2","web","扩展","段时间","启动","可悲","scratch3","内置","the","示例","，","catalina","问题","1608804837247213","mp4","相关","和","最好","一定","控制","开箱","如果","正常","bin","中","建议","chrome","mac","安装","版本","：","club","程序","间隔","了","行为","造成","on","下方","链接","doesn","目录","mojave","导致","ui","放到","这个","无法","upgrade","瞬间","5","浏览","文档","循环","绿色","插件","方案","client","用户","学校","static","所指","图标","开场","闪烁","时间","使","游戏","写","功能"],"title":"HCI","title_tokens":["hci"]},{"location":"extension_guide/HCI/#tutorial","text":"","text_tokens":[],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/HCI/#_1","text":"安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器.","text_tokens":["团队","现阶段","为","更","效果","建议","chrome",".","官方","多","安装","其设","目前","版本","使用","默认","codelab","最佳","在","阶段","scratch","adapter","浏览","陆续"," ","支持","/","将","firefox","，","浏览器"],"title":"依赖","title_tokens":["依赖"]},{"location":"extension_guide/HCI/#1","text":"Windows 和 Mac 用户开箱可用。 Linux需要安装依赖: 参考 PyAutoGUI Install pip3 install codelab_adapter_client --upgrade ps: 使用 Python3 提醒 MacOS 升级到最新版本后，可能会导致部分控制类积木无法使用，使系统安全机制升级造成的（我也是可悲的 Mac 用户，下个计算机一定要使用开源系统。）。详情参考: Pyautogui doesn't seem to work on macOS Mojave 。 相关问题: Catalina does not allow to capture the screen 。这个问题的结局方案似乎是让系统信任Adapter内置的Python: codelab-adapter-3_7_3-mac.app/Contents/Resources/Support/bin/python3","text_tokens":["参考","install","类","下个","让","support","机制","后",":","系统","计算机","7","到","可用","_","要","会","计算","算机","contents","resources","信任","linux","升级","windows","capture","是","3","部分","的",".","最新","开源","to","seem","python3","使用","codelab","结局","似乎","需要","t"," ","（","/","pip3","系统安全","python","）","积木","提醒","app","work","可能","allow","'","。","详情","macos","ps","安全","我","does","screen","也","依赖","not","adapter","-","pyautogui","可悲","内置","the","，","catalina","问题","相关","和","一定","控制","开箱","bin","mac","安装","版本","造成","on","doesn","mojave","导致","这个","无法","upgrade","方案","client","用户","使"],"title":"步骤 1：安装依赖","title_tokens":[" ","安装","1","依赖","：","步骤"]},{"location":"extension_guide/HCI/#2-codelab-adapter","text":"双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。","text_tokens":[" ","浏览","打开","之后","启动","双击","。","默认","codelab","adapter","将","，","浏览器"],"title":"步骤 2：打开 Codelab Adapter","title_tokens":[" ","打开","2","：","步骤","codelab","adapter"]},{"location":"extension_guide/HCI/#3-codelab-scratch3","text":"点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常","text_tokens":["这儿","或者","正常","页面","的","呈现","与","scratch3.0","如下","codelab","链接","上","ui",":","打开","图中",",","圆点","adapter","绿色","连接"," ","箭头","小圆点","web","所指","说明","scratch3","将","点击"],"title":"步骤 3：打开 Codelab Scratch3","title_tokens":[" ","打开","：","步骤","3","scratch3","codelab"]},{"location":"extension_guide/HCI/#4-hci","text":"在 Web UI 中点击加载 HCI 插件","text_tokens":[" ","在","插件","ui","web","中","加载","点击","hci"],"title":"步骤 4：加载 HCI 插件","title_tokens":[" ","插件","：","4","步骤","加载","hci"]},{"location":"extension_guide/HCI/#5scratch3-hci","text":"选择对应的 Scratch3 插件：HCI","text_tokens":[" ","插件","：","对应","scratch3","的","选择","hci"],"title":"步骤 5：Scratch3 HCI 插件","title_tokens":[" ","插件","：","步骤","scratch3","5","hci"]},{"location":"extension_guide/HCI/#demo","text":"尚雅学校目前在使用 CodeLab Adapter，有位老师想使用魔杖激活开场视频，使用 HCI 插件可以轻松做到: 以下是源码: 魔杖播放视频","text_tokens":["可以","播放","是","老师","尚雅","目前","以下","使用","codelab","在","激活","想",":","源码","有位","adapter","hci"," ","视频","插件","学校","轻松","开场","做到","，","魔杖"],"title":"demo","title_tokens":["demo"]},{"location":"extension_guide/HCI/#windows-10","text":"Windows10的某些版本，默认会在页面下方闪烁播放器图标，而不是打开。 可以考虑使用网页打开视频链接，如果你的视频在本地，可以托管给 Adapter，具体而言: 在 Adapter Web UI 里 打开扩展目录 将视频放到 扩展目录 下的 src 目录里 现在这个视频可以使用链接打开了! 它的地址为: https://codelab-adapter.codelab.club:12358/static/1608804837247213.mp4 , 注意，最后的 1608804837247213.mp4 是你的视频名字，最好不用中文。 这是一个示例程序: 魔杖开场视频--使用链接","text_tokens":["可以","为","播放","。","如果","是","某些","不用","不是","页面","的","网页","具体",".","你","https","版本","中文","而","使用","地址","默认","club","了","codelab","程序","下方","链接","mp4","一个","在","考虑","目录","现在","托管",":","ui","打开","里","放到","下","这个","它","最好","这是",",","播放器","本地","adapter","而言","!"," ","视频","src","/","-","windows10","static","给","web","扩展","最后","图标","12358","闪烁","注意","开场","会","将","示例","名字","，","1608804837247213","魔杖"],"title":"Windows 10 用户","title_tokens":[" ","windows","用户","10"]},{"location":"extension_guide/HCI/#_2","text":"HCI 插件允许你写 Python 代码， PyAutoGUI 文档中的所有功能你都可以在 Scratch 中使用。 Tips 如果你想使用HCI接管游戏，要注意 press 是瞬间行为（一般无效），一般游戏是在大循环中检测的你是否按下某个按键，所以建议按下一段时间（使用keyDown和keyUp，中间间隔一会儿。）","text_tokens":["可以","tips","接管","和","代码","无效","一会儿","。","如果","中","是","建议","一会","的","keydown","keyup","你","允许","检测","press","使用","所以","间隔","某个","行为","大","是否","在","想","会儿","按键","一般","scratch","瞬间","中间","文档","循环","一段","hci"," ","插件","（","一段时间","pyautogui","按下","段时间","要","注意","python","时间","）","游戏","所有","，","都","写","功能"],"title":"高阶用法","title_tokens":["用法","高阶"]},{"location":"extension_guide/Kano_Wand/","text":"Tutorial ¶ 依赖 ¶ 安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器. 步骤 1：Hack Kano Code ¶ 尽管社区有很多针对 Kano 设备的硬件和协议破解（Kano 官方也十分具有 hacker 精神，它们分享了很多 hack 技巧），但我偏好破解 kano 的软件(因其十分优秀，希望基于它的 UI 来编程，而通过 hack 增强它的能力)。 Hack Kano Code ，使其与 CodeLab Adapter 兼容。 目前我对 Mac 和 Windows 的 Kano Code 做了简单 hack，使其能够接入 Adapter，由于是hack过的软件，不便于在互联网分发，如果你需要，请联系我们。 Tips mac系统新版本（13.14之后）安全性提高，如果无法运行hack后的软件(Mac应用已损坏，打不开)，如果可能需要先运行: sudo spctl --master-disable 或者 sudo xattr -rd com.apple.quarantine 空格 软件的路径 Tips 关于魔杖如何与电脑连接参考 官方页面 或者 APP 在 Kano Code 里编程 从 Event 菜单栏中拖出咒语积木；从 Draw 菜单栏中拉出 to adapter 积木，组合出魔法规则: 以上程序的含义是: 当实施图示魔法时，将魔法(id为1)发射到Adapter 。 接下来在 CodeLab Scratch 中对魔法编程（handle）。 步骤 3：打开 Codelab Adapter ¶ 双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。 步骤 4：打开 Codelab Scratch3 ¶ 点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常 步骤 5：加载 Kano Code 插件 ¶ 在 Web UI 中点击加载 Kano Code 插件。 开始编程 以上积木的含义: 当魔法(id为1的魔法)触发时，发出猫叫声 Tips 建议把 Scratch 页面和 kano 软件并置在桌面。处于后台的浏览器，可能会休眠(有些系统的默认行为)。 此外，由于蓝牙连接范围有限，挥动魔杖时 尽量别离电脑太远。 Demo ¶ https://adapter.codelab.club/user_guide/gallery/#kano-wand","text_tokens":["¶","团队","com","规则","参考","现阶段","为","或者","更","hack","code","图示","页面","quarantine","中拖出","多","不","https","不开","简单","id","目前","菜单栏","先","十分","触发","默认","范围","后","接下来","猫叫","优秀","含义","技巧","新",":","系统","打开","图中","拖出","联网","(","到","scratch","步骤","能力",",","陆续","电脑","实施","休眠","因","支持","基于","demo","但","disable","做","如何","_","关于","tutorial","会","firefox","你","浏览器","接入","1","windows","便于","后台","有","是","3","兼容",".","的","呈现","to","魔法","叫声","别离","4","而","使用","由于","codelab","咒语","它们","猫叫声","#","在","阶段","它","里","；","时","桌面",")","wand","编程","并置","需要","连接"," ","/","尽管","（","我们","箭头","小圆点","发出","有限","之后","user","增强","说明","针对","加载","将","）","对","app","积木","点击","可能","过","分发","tips","魔杖","出","这儿","。","效果","hacker","挥动","安全","接下","分享","空格","我","13.14","官方","sudo","应用","硬件","其设","运行","与","路径","安全性","双击","发射","scratch3.0","如下","协议","最佳","精神","互联网","当","guide","rd","也","上","依赖","event","来","请","spctl","以上","adapter","打不开","圆点","希望","-","菜单","社区","web","apple","启动","软件","scratch3","master","，","通过","draw","很多","和","损坏","尽量","如果","从","正常","拉出","已损坏","中","有些","建议","互联","chrome","mac","设备","安装","其","xattr","把","版本","具有","：","组合","程序","club","了","行为","handle","链接","ui","无法","能够","破解","太远","5","浏览","中拉出","下来","绿色","插件","开始","此外","提高","蓝牙","所指","偏好","gallery","联系","使","kano","处于"],"title":"Kano Wand","title_tokens":[" ","wand","kano"]},{"location":"extension_guide/Kano_Wand/#tutorial","text":"","text_tokens":[],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/Kano_Wand/#_1","text":"安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器.","text_tokens":["团队","现阶段","为","更","效果","建议","chrome",".","官方","多","安装","其设","目前","版本","使用","默认","codelab","最佳","在","阶段","scratch","adapter","浏览","陆续"," ","支持","/","将","firefox","，","浏览器"],"title":"依赖","title_tokens":["依赖"]},{"location":"extension_guide/Kano_Wand/#1hack-kano-code","text":"尽管社区有很多针对 Kano 设备的硬件和协议破解（Kano 官方也十分具有 hacker 精神，它们分享了很多 hack 技巧），但我偏好破解 kano 的软件(因其十分优秀，希望基于它的 UI 来编程，而通过 hack 增强它的能力)。 Hack Kano Code ，使其与 CodeLab Adapter 兼容。 目前我对 Mac 和 Windows 的 Kano Code 做了简单 hack，使其能够接入 Adapter，由于是hack过的软件，不便于在互联网分发，如果你需要，请联系我们。 Tips mac系统新版本（13.14之后）安全性提高，如果无法运行hack后的软件(Mac应用已损坏，打不开)，如果可能需要先运行: sudo spctl --master-disable 或者 sudo xattr -rd com.apple.quarantine 空格 软件的路径 Tips 关于魔杖如何与电脑连接参考 官方页面 或者 APP 在 Kano Code 里编程 从 Event 菜单栏中拖出咒语积木；从 Draw 菜单栏中拉出 to adapter 积木，组合出魔法规则: 以上程序的含义是: 当实施图示魔法时，将魔法(id为1)发射到Adapter 。 接下来在 CodeLab Scratch 中对魔法编程（handle）。","text_tokens":["com","规则","参考","或者","为","hack","code","图示","页面","quarantine","中拖出","不","不开","简单","id","目前","菜单栏","先","十分","后","接下来","优秀","含义","技巧","新",":","系统","拖出","联网","(","到","能力","scratch","电脑","实施","因","基于","但","disable","做","如何","关于","你","接入","1","windows","便于","有","是","兼容","的",".","to","魔法","而","由于","codelab","咒语","它们","在","它","里","；","时",")","编程","需要","连接"," ","（","尽管","我们","之后","增强","针对","将","对","）","app","积木","可能","过","分发","tips","魔杖","出","。","hacker","安全","接下","分享","空格","我","13.14","官方","sudo","应用","硬件","运行","路径","与","安全性","发射","协议","精神","互联网","当","rd","也","event","来","请","spctl","以上","adapter","打不开","希望","-","菜单","社区","apple","软件","master","通过","，","draw","很多","和","损坏","如果","从","拉出","已损坏","中","互联","mac","设备","xattr","其","具有","版本","组合","程序","了","handle","ui","无法","能够","破解","中拉出","下来","提高","偏好","联系","使","kano"],"title":"步骤 1：Hack Kano Code","title_tokens":[" ","1","：","步骤","hack","code","kano"]},{"location":"extension_guide/Kano_Wand/#3-codelab-adapter","text":"双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。","text_tokens":[" ","浏览","打开","之后","启动","双击","。","默认","codelab","adapter","将","，","浏览器"],"title":"步骤 3：打开 Codelab Adapter","title_tokens":[" ","打开","：","步骤","3","codelab","adapter"]},{"location":"extension_guide/Kano_Wand/#4-codelab-scratch3","text":"点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常","text_tokens":["这儿","或者","正常","页面","的","呈现","与","scratch3.0","如下","codelab","链接","上","ui",":","打开","图中",",","圆点","adapter","绿色","连接"," ","箭头","小圆点","web","所指","说明","scratch3","将","点击"],"title":"步骤 4：打开 Codelab Scratch3","title_tokens":[" ","打开","：","4","步骤","scratch3","codelab"]},{"location":"extension_guide/Kano_Wand/#5-kano-code","text":"在 Web UI 中点击加载 Kano Code 插件。 开始编程 以上积木的含义: 当魔法(id为1的魔法)触发时，发出猫叫声 Tips 建议把 Scratch 页面和 kano 软件并置在桌面。处于后台的浏览器，可能会休眠(有些系统的默认行为)。 此外，由于蓝牙连接范围有限，挥动魔杖时 尽量别离电脑太远。","text_tokens":["tips","和","1","浏览器","尽量","为","。","后台","有些","挥动","中","code","建议","页面","的","魔法","id","叫声","把","别离","触发","默认","由于","范围","行为","当","猫叫","含义","猫叫声","在","ui",":","系统","时","桌面","(",")","scratch","编程","并置","魔杖","以上","太远","浏览","电脑","休眠","连接"," ","插件","开始","此外","有限","发出","web","蓝牙","软件","加载","会","积木","点击","kano","，","处于","可能"],"title":"步骤 5：加载 Kano Code 插件","title_tokens":[" ","插件","：","步骤","code","加载","5","kano"]},{"location":"extension_guide/Kano_Wand/#demo","text":"https://adapter.codelab.club/user_guide/gallery/#kano-wand","text_tokens":["https","/","-",":","kano","user","_","club","gallery","wand","codelab","adapter","#","guide","."],"title":"Demo","title_tokens":["demo"]},{"location":"extension_guide/MQTT_Broker/","text":"提醒 基于 hbmqtt ，该项目作者似乎不维护了， 目前存在一个bug 可能无法工作。 可以使用 CodeLab 公共的mqtt broker: mqtt://guest:test@iot.codelab.club . 建议到插件市场里下载最新插件。 插件说明 ¶ 使用方式: 到 插件市场 下载插件, 搜索 mqtt 插件类型: Adapter Extension 插件源码: extension_mqtt_broker.py 使用场景 ¶ extension_mqtt_broker.py 插件允许你轻松在本地启动一个轻量级 MQTT Broker。 一个典型的使用场景是将各类支持 mqtt client 的硬件，接入 Adapter（当然你需要写一个 extension, 我们已经构建了一个: MQTT_adapter ），这样方便你将 esp32、esp8266、掌控板等设备接入 Adapter 。 Demo ¶ hbmqtt_pub --url mqtt://127.0.0.1 -t /test -m some_data hbmqtt_sub --url mqtt://127.0.0.1 -t /test 当然你可以使用任何mqtt client 高性能 ¶ 基于高性能的 hbmqtt 。 基于协程的并发能力，足以让你在树莓派上支撑起整个学校的物联网。 进阶 ¶ 你可以修改 broker 配置项，为其增加 auth 之类的功能, 详情参考 hbmqtt 文档。 参考 ¶ hbmqtt","text_tokens":["¶","让你在","参考","127.0","为","、","不","目前","esp8266","树莓","方式","板","整个",":","增加","构建","市场","联网","到","hbmqtt",",","能力","掌控","支持","基于","demo","sub","轻松","_","支撑","你","量级","接入","典型","是","的",".","作者","配置","最新","允许","项目","使用","codelab","在","搜索","里","@","派","似乎","0.1","需要","t","轻量级"," ","/","（","我们","足以","说明","高性","将","）","提醒","mqtt","可能","可以","py","guest","。","存在","该","工作","并发","详情","性能","硬件","维护","test","一个","上","源码","协程","本地","adapter","esp32","起","当然","-","broker","修改","各类","启动","之类","bug","项","，","场景","任何","auth","some","建议","物","设备","其","下载","类型","pub","club","iot","m","了","extension","等","高性能","url","data","无法","方便","文档","进阶","公共","插件","client","已经","学校","这样","轻量","写","功能"],"title":"MQTT Broker","title_tokens":[" ","broker","mqtt"]},{"location":"extension_guide/MQTT_Broker/#_1","text":"使用方式: 到 插件市场 下载插件, 搜索 mqtt 插件类型: Adapter Extension 插件源码: extension_mqtt_broker.py","text_tokens":["py",".","下载","类型","使用","方式","extension",":","搜索","源码","市场","到",",","adapter"," ","插件","broker","_","mqtt"],"title":"插件说明","title_tokens":["插件","说明"]},{"location":"extension_guide/MQTT_Broker/#_2","text":"extension_mqtt_broker.py 插件允许你轻松在本地启动一个轻量级 MQTT Broker。 一个典型的使用场景是将各类支持 mqtt client 的硬件，接入 Adapter（当然你需要写一个 extension, 我们已经构建了一个: MQTT_adapter ），这样方便你将 esp32、esp8266、掌控板等设备接入 Adapter 。","text_tokens":["量级","接入","场景","典型","py","。","、","是",".","的","设备","硬件","允许","esp8266","使用","了","extension","一个","板","等","在",":","构建",",","方便","本地","mqtt","adapter","需要","esp32","掌控","轻量级"," ","broker","插件","支持","各类","client","（","当然","，","我们","已经","启动","轻松","_","这样","轻量","将","）","你","写"],"title":"使用场景","title_tokens":["使用","场景"]},{"location":"extension_guide/MQTT_Broker/#demo","text":"hbmqtt_pub --url mqtt://127.0.0.1 -t /test -m some_data hbmqtt_sub --url mqtt://127.0.0.1 -t /test 当然你可以使用任何mqtt client","text_tokens":["可以","任何","127.0","some",".","你","pub","test","使用","m",":","url","data","hbmqtt","0.1","t","当然"," ","-","/","client","sub","_","mqtt"],"title":"Demo","title_tokens":["demo"]},{"location":"extension_guide/MQTT_Broker/#_3","text":"基于高性能的 hbmqtt 。 基于协程的并发能力，足以让你在树莓派上支撑起整个学校的物联网。","text_tokens":["让你在","。","并发","的","物","性能","树莓","高性能","上","整个","协程","联网","派","hbmqtt","能力","起"," ","基于","足以","学校","高性","支撑","，"],"title":"高性能","title_tokens":["性能","高性","高性能"]},{"location":"extension_guide/MQTT_Broker/#_4","text":"你可以修改 broker 配置项，为其增加 auth 之类的功能, 详情参考 hbmqtt 文档。","text_tokens":["可以","参考","为","详情","。","auth","的","配置","你","其","增加",",","hbmqtt","文档","修改"," ","broker","之类","项","，","功能"],"title":"进阶","title_tokens":["进阶"]},{"location":"extension_guide/MQTT_Broker/#_5","text":"hbmqtt","text_tokens":["hbmqtt"],"title":"参考","title_tokens":["参考"]},{"location":"extension_guide/MQTT_adapter/","text":"Tutorial ¶ 插件说明 ¶ 使用方式: 到 插件市场 下载插件, 搜索 mqtt 插件类型: Adapter Extension 插件源码: extension_mqtt_adapter.py 使用场景 ¶ extension_mqtt_adapter.py 插件桥接 mqtt 与 Scratch。 原理很简单，它将来自mqtt的消息(mqtt topic: to_scratch )，转发到 eim 中，将eim中的消息转发到mqtt(mqtt topic: from_scratch ). （下文有例子） 提醒 你需要首先选择一个mqtt broker， extension_mqtt_adapter.py 假设你在本地运行了一个mqtt broker(mqtt 127.0.0.1 1883)。你可以使用任何mqtt broker。在 Adapter 3.2 中，将自带一个轻量级高性能的 mqtt broker: MQTT Broker 将消息从mqtt client 发往Scratch: hbmqtt_pub --url mqtt://127.0.0.1 -t to_scratch -m \"mqtt message\" 当然你可以使用任何 mqtt client代替 hbmqtt_pub Scratch -> mqtt ¶ 将消息从Scratch 发往 mqtt client 先启动 mqtt client 的消息订阅。当然你可以使用任何 mqtt client代替 hbmqtt_sub hbmqtt_sub --url mqtt://127.0.0.1 -t from_scratch Scratch 相关源码 ¶ Scratch-mqtt-adapter","text_tokens":["¶","订阅","消息","127.0","选择","简单","往","先","方式","自带",":","市场","假设","到",",","scratch","(","hbmqtt","发","桥接","原理","sub","_","tutorial","3.2","你","首先","eim","量级","有","下文",".","的","to","使用",">","在","搜索","它",")","0.1","需要","t","轻量级"," ","（","/","说明","来自","高性","将","）","提醒","mqtt","可以","py","。","发往","性能","运行","转发","与","from","topic","一个","1883","源码","本地","adapter","当然","-","broker","很","启动","\"","，","相关","场景","任何","从","中","message","例子","下载","类型","pub","m","了","extension","高性能","url","插件","client","代替","轻量"],"title":"MQTT Adapter","title_tokens":[" ","mqtt","adapter"]},{"location":"extension_guide/MQTT_adapter/#tutorial","text":"","text_tokens":[],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/MQTT_adapter/#_1","text":"使用方式: 到 插件市场 下载插件, 搜索 mqtt 插件类型: Adapter Extension 插件源码: extension_mqtt_adapter.py","text_tokens":[" ","插件","下载","类型",":","搜索","源码",".","py","市场","到",",","_","使用","方式","adapter","extension","mqtt"],"title":"插件说明","title_tokens":["插件","说明"]},{"location":"extension_guide/MQTT_adapter/#_2","text":"extension_mqtt_adapter.py 插件桥接 mqtt 与 Scratch。 原理很简单，它将来自mqtt的消息(mqtt topic: to_scratch )，转发到 eim 中，将eim中的消息转发到mqtt(mqtt topic: from_scratch ). （下文有例子） 提醒 你需要首先选择一个mqtt broker， extension_mqtt_adapter.py 假设你在本地运行了一个mqtt broker(mqtt 127.0.0.1 1883)。你可以使用任何mqtt broker。在 Adapter 3.2 中，将自带一个轻量级高性能的 mqtt broker: MQTT Broker 将消息从mqtt client 发往Scratch: hbmqtt_pub --url mqtt://127.0.0.1 -t to_scratch -m \"mqtt message\" 当然你可以使用任何 mqtt client代替 hbmqtt_pub","text_tokens":["eim","可以","量级","当然","任何","py","消息","127.0","。","从","有","中","message","下文",".","的","选择","发往","你","性能","简单","to","例子","运行","转发","与","from","pub","使用","m","了","自带","extension","topic","一个","高性能","在","1883",":","它","url","假设","(","到","scratch",")","0.1","mqtt","本地","hbmqtt","adapter","需要","t","轻量级"," ","插件","（","桥接","原理","很","broker","client","-","/","_","来自","代替","3.2","高性","将","轻量","）","\"","提醒","，","首先"],"title":"使用场景","title_tokens":["使用","场景"]},{"location":"extension_guide/MQTT_adapter/#scratch-mqtt","text":"将消息从Scratch 发往 mqtt client 先启动 mqtt client 的消息订阅。当然你可以使用任何 mqtt client代替 hbmqtt_sub hbmqtt_sub --url mqtt://127.0.0.1 -t from_scratch","text_tokens":["可以","订阅","任何","消息","127.0","。","从","的",".","往","先","from","使用",":","url","hbmqtt","scratch","0.1","发","mqtt","t","当然"," ","-","/","client","启动","sub","_","代替","将","你"],"title":"Scratch -&gt; mqtt","title_tokens":[" ","-","gt","scratch","&",";","mqtt"]},{"location":"extension_guide/MQTT_adapter/#scratch","text":"Scratch-mqtt-adapter","text_tokens":["-","scratch","mqtt","adapter"],"title":"Scratch 相关源码","title_tokens":[" ","scratch","相关","源码"]},{"location":"extension_guide/NetworkZero/","text":"Tutorial ¶ NetworkZero 的目标是让局域网通信变得简单。 基于 networkzero 包装，保留与其一致的接口 注意 如果你无法在两台局域网电脑之间通信，可能需要关闭电脑的系统防火墙 demo ¶ 收信人: 地址 (地址名)，并 接收 来自这个地址的消息。 寄信人: 往 目标地址 发送 信息 允许任何人公布通信地址，所以可以轻松构建网状结构。 典型应用场景 ¶ 局域网联机游戏 局域网聊天 多人联机控制机器人 与Python程序(诸如树莓派机器人)互动 可与 基于 networkzero 的程序互操作。","text_tokens":["¶","互操作","消息","让","简单","往","关闭","树莓","地址","通信地址","networkzero","寄信人",":","系统","构建","(","电脑","联机","基于","demo","轻松","tutorial","互动","两台","你","多人","典型","结构","局域","是","与其","的","允许","一致","之间","机器人","在","可","网状结构","网状","派",")","需要"," ","名","机器","火墙","注意","来自","python","可能","可以","公布","接口","。","任何人","何人","应用","与","目标","通信","保留","所以","包装","并","信息","操作","，","收信人","防火","场景","任何","控制","如果","诸如","局域网","寄信","程序","这个","无法","发送","防火墙","接收","聊天","变得","游戏","收信"],"title":"NetworkZero","title_tokens":["networkzero"]},{"location":"extension_guide/NetworkZero/#tutorial","text":"NetworkZero 的目标是让局域网通信变得简单。 基于 networkzero 包装，保留与其一致的接口 注意 如果你无法在两台局域网电脑之间通信，可能需要关闭电脑的系统防火墙","text_tokens":["防火","接口","局域","。","如果","是","与其","的","让","你","简单","一致","关闭","目标","通信","保留","之间","networkzero","包装","在","系统","无法","防火墙","需要","电脑"," ","基于","火墙","变得","注意","两台","局域网","，","可能"],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/NetworkZero/#demo","text":"收信人: 地址 (地址名)，并 接收 来自这个地址的消息。 寄信人: 往 目标地址 发送 信息 允许任何人公布通信地址，所以可以轻松构建网状结构。","text_tokens":["可以","公布","任何","消息","结构","。","任何人","何人","寄信","的","往","允许","目标","通信","所以","地址","通信地址","寄信人",":","网状结构","这个","构建","网状","(",")","发送","并","接收"," ","信息","名","轻松","来自","收信","，","收信人"],"title":"demo","title_tokens":["demo"]},{"location":"extension_guide/NetworkZero/#_1","text":"局域网联机游戏 局域网聊天 多人联机控制机器人 与Python程序(诸如树莓派机器人)互动 可与 基于 networkzero 的程序互操作。","text_tokens":["多人","互操作","控制","局域","诸如","。","的","与","树莓","程序","机器人","networkzero","可","派","(",")","联机"," ","基于","机器","聊天","操作","互动","python","游戏","局域网"],"title":"典型应用场景","title_tokens":["典型","应用","场景"]},{"location":"extension_guide/Pando/","text":"Pando ¶ 文档参考: 当遇到 Scratch3-Codelab，Pando 觉醒了！","text_tokens":[" ","¶","-","参考",":","遇到","！","pando","scratch3","codelab","了","文档","当","，","觉醒"],"title":"Pando Robot(正在迁移中)","title_tokens":[" ","正在","(","pando",")","robot","中","迁移"]},{"location":"extension_guide/Pando/#pando","text":"文档参考: 当遇到 Scratch3-Codelab，Pando 觉醒了！","text_tokens":[" ","-",":","参考","遇到","！","pando","scratch3","codelab","了","文档","当","，","觉醒"],"title":"Pando","title_tokens":["pando"]},{"location":"extension_guide/ROS/","text":"ROS ¶ 步骤 1：打开 CodeLab Scratch ¶ 下载 CodeLab Scratch Desktop（离线版） ，并运行它。 ps: 要求 CodeLab Scratch Desktop >= 1.2.1 步骤 2：运行 ROS ¶ 运行 ROS。 步骤 3：运行桥接程序 ¶ 运行桥接程序。 步骤 4：开始使用 ¶ 选择 scratch3 中的 ROS 插件： 开始使用。","text_tokens":["¶","1","版","。","3","中","ps",".","选择","的","1.2","下载","运行","：","4","程序","使用","codelab",">","=",":","ros","打开","它","离线","scratch","步骤","并"," ","（","开始","桥接","插件","要求","2","desktop","scratch3","）","，"],"title":"ROS(正在迁移中)","title_tokens":["ros","正在","(",")","中","迁移"]},{"location":"extension_guide/ROS/#ros","text":"","text_tokens":[],"title":"ROS","title_tokens":["ros"]},{"location":"extension_guide/ROS/#1-codelab-scratch","text":"下载 CodeLab Scratch Desktop（离线版） ，并运行它。 ps: 要求 CodeLab Scratch Desktop >= 1.2.1","text_tokens":["1","版","。","ps",".","1.2","下载","运行","codelab",">","=",":","它","离线","）","scratch","并"," ","（","desktop","要求","，"],"title":"步骤 1：打开 CodeLab Scratch","title_tokens":[" ","1","打开","：","scratch","步骤","codelab"]},{"location":"extension_guide/ROS/#2-ros","text":"运行 ROS。","text_tokens":[" ","。","运行","ros"],"title":"步骤 2：运行 ROS","title_tokens":[" ","运行","ros","2","：","步骤"]},{"location":"extension_guide/ROS/#3","text":"运行桥接程序。","text_tokens":["程序","桥接","运行","。"],"title":"步骤 3：运行桥接程序","title_tokens":[" ","桥接","运行","：","程序","步骤","3"]},{"location":"extension_guide/ROS/#4","text":"选择 scratch3 中的 ROS 插件： 开始使用。","text_tokens":[" ","插件","开始","ros","：","。","中","使用","scratch3","的","选择"],"title":"步骤 4：开始使用","title_tokens":[" ","开始","：","4","步骤","使用"]},{"location":"extension_guide/RoboMaster/","text":"RoboMaster ¶ RoboMaster EP 提醒 目前只支持RoboMaster EP(暂不支持S1)，受限于大疆的开放接口: RoboMaster SDK 新手入门 - EP 篇 Tutorial ¶ 依赖 ¶ 安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器. 步骤 1：打开 Codelab Adapter ¶ 双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。 步骤 2：打开 Codelab Scratch3 ¶ 点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常 步骤 3：将 RoboMaster 接入局域网里 ¶ 开启 RoboMaster ， 将其接入局域网里 步骤 4：hello world ¶ 现在让我们利用 Scratch3 控制 RoboMaster: 使用键盘的上下左右/空格来控制机器人移动和发射水弹。 更多 ¶ 协议细节参考 robomaster-dev 协议内容 提醒 如果你希望做一些更复杂的事，建议直接使用社区里的 Python SDK与 设备交互，之后使用 Adapter Node 将其接入Adapter环境中。","text_tokens":["¶","团队","hello","左右","参考","现阶段","为","或者","更","页面","让","多","不","目前","默认","篇",":","打开","图中","(","ep","scratch","步骤",",","内容","陆续","支持","做","tutorial","firefox","你","浏览器","接入","1","robomaster","只","局域","3","上下","直接","的",".","呈现","4","使用","机器人","codelab","开启","在","阶段","里",")","暂","连接"," ","/","我们","限于","箭头","小圆点","机器","之后","说明","将","python","点击","提醒","这儿","接口","。","效果","dev","空格","官方","复杂","其设","world","与","移动","双击","新手入门","scratch3.0","发射","受限于","如下","协议","开放","最佳","上","现在","依赖","水弹","来","圆点","adapter","希望","-","一些","大疆","社区","2","web","启动","scratch3","，","和","受限","sdk","控制","如果","正常","中","建议","键盘","chrome","上下左右","细节","交互","设备","安装","其","版本","新手","：","利用","s1","环境","入门","链接","ui","事","浏览","绿色","node","所指","局域网"],"title":"RoboMaster","title_tokens":["robomaster"]},{"location":"extension_guide/RoboMaster/#robomaster","text":"RoboMaster EP 提醒 目前只支持RoboMaster EP(暂不支持S1)，受限于大疆的开放接口: RoboMaster SDK 新手入门 - EP 篇","text_tokens":["受限","sdk","接口","robomaster","只","的","不","目前","新手","新手入门","s1","受限于","开放","入门","篇",":","(","ep",")","暂"," ","支持","-","限于","大疆","提醒","，"],"title":"RoboMaster","title_tokens":["robomaster"]},{"location":"extension_guide/RoboMaster/#tutorial","text":"","text_tokens":[],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/RoboMaster/#_1","text":"安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器.","text_tokens":["团队","现阶段","为","更","效果","建议","chrome",".","官方","多","安装","其设","目前","版本","使用","默认","codelab","最佳","在","阶段","scratch","adapter","浏览","陆续"," ","支持","/","将","firefox","，","浏览器"],"title":"依赖","title_tokens":["依赖"]},{"location":"extension_guide/RoboMaster/#1-codelab-adapter","text":"双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。","text_tokens":[" ","浏览","打开","之后","启动","双击","。","默认","codelab","adapter","将","，","浏览器"],"title":"步骤 1：打开 Codelab Adapter","title_tokens":[" ","1","打开","：","步骤","codelab","adapter"]},{"location":"extension_guide/RoboMaster/#2-codelab-scratch3","text":"点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常","text_tokens":["这儿","或者","正常","页面","的","呈现","与","scratch3.0","如下","codelab","链接","上","ui",":","打开","图中",",","圆点","adapter","绿色","连接"," ","箭头","小圆点","web","所指","说明","scratch3","将","点击"],"title":"步骤 2：打开 Codelab Scratch3","title_tokens":[" ","打开","2","：","步骤","scratch3","codelab"]},{"location":"extension_guide/RoboMaster/#3-robomaster","text":"开启 RoboMaster ， 将其接入局域网里","text_tokens":[" ","其","接入","里","robomaster","局域","将","局域网","开启","，"],"title":"步骤 3：将 RoboMaster 接入局域网里","title_tokens":[" ","接入","里","robomaster","：","局域","步骤","3","将","局域网"]},{"location":"extension_guide/RoboMaster/#4hello-world","text":"现在让我们利用 Scratch3 控制 RoboMaster: 使用键盘的上下左右/空格来控制机器人移动和发射水弹。","text_tokens":["和","左右","robomaster","控制","。","键盘","空格","上下","的","上下左右","让","移动","利用","发射","使用","机器人","现在",":","水弹","来"," ","/","我们","机器","scratch3"],"title":"步骤 4：hello world","title_tokens":[" ","hello","world","：","4","步骤"]},{"location":"extension_guide/RoboMaster/#_2","text":"协议细节参考 robomaster-dev 协议内容 提醒 如果你希望做一些更复杂的事，建议直接使用社区里的 Python SDK与 设备交互，之后使用 Adapter Node 将其接入Adapter环境中。","text_tokens":["接入","参考","sdk","robomaster","如果","更","。","中","建议","dev","直接","的","细节","复杂","交互","设备","其","与","使用","环境","协议","事","里","adapter","内容","希望"," ","-","一些","node","社区","，","之后","做","python","将","提醒","你"],"title":"更多","title_tokens":["更","多"]},{"location":"extension_guide/SimplePyboard/","text":"Tutorial ¶ 支持大多数的 pyboard (烧录 micropython 的 board)， 诸如 esp32、esp8266、micro:bit、 掌控板、bpi:bit... 采用的是 micropyhton 的 REPL 机制（串口）","text_tokens":["¶","采用","bpi","board","诸如","、","是","的","esp8266","机制","烧录","串口","板","pyboard",":","(",")","micropyhton","大多","micro","esp32","掌控"," ","支持","（","bit","大多数","tutorial","...","）","，","micropython","repl","多数"],"title":"SimplePyboard","title_tokens":["simplepyboard"]},{"location":"extension_guide/SimplePyboard/#tutorial","text":"支持大多数的 pyboard (烧录 micropython 的 board)， 诸如 esp32、esp8266、micro:bit、 掌控板、bpi:bit... 采用的是 micropyhton 的 REPL 机制（串口）","text_tokens":["采用","bpi","board","诸如","、","是","的","esp8266","机制","烧录","串口","板","pyboard",":","(",")","micropyhton","大多","micro","esp32","掌控"," ","支持","（","bit","大多数","...","）","，","micropython","repl","多数"],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/Squeak/","text":"Squeak/Smalltalk ¶ 介绍 ¶ Squeak 是 Smalltalk 的现代实现. 有几位 Smalltalk-80 的实现者(他们之前在施乐实验室创造了 Smalltalk)都参与到了 Squeak 中，包括 Alan Kay 和 Daniel Ingall，这个项目依然在持续演进，他们抱有跟今天计算机整个领域不同的愿景。 MIT媒体实验室推动的OLPC计划，采用Squeak作为开发环境。 Etoys、Croquet、第一代的Scratch都是用 Squeak 实现的。 关于 Squeak 入门，可参考 Smalltalk 入门导览 接入 Adapter ¶ 有很多种方式将 Squeak 和 Adapter连在一起，诸如HTTP、Websocket、ZeroMQ，系统调用(Adapter python client提供系统命令)，你也可以自己写一个Adapter插件来连接两者。 目前我最喜欢的一种方式是使用 OSC , 由于最新的Adapter内置了 OSC server，所以我们可以轻松将Squeak用作 osc cleint， 消息流向是 Squeak->Adapter 。 demo ¶ 在Squeak中, 下载 OSC : OSC-SimonHolland , 之后拖到 Squeak 桌面，加载使用即可。 ( OSCMessage for: { '/eim/osc' . 1 }) sendTo: # [ 127 0 0 1 ] port: 12361 . \"turn right\" ( OSCMessage for: { '/eim/osc' . 0 }) sendTo: # [ 127 0 0 1 ] port: 12361 . \"forward\" ( OSCMessage for: { '/eim/osc' . -1 }) sendTo: # [ 127 0 0 1 ] port: 12361 . \"turn right\" 以上的代码将控制Scratch里的飞行器: squeak-scratch-demo 进阶 ¶ 你也可以在Squeak中运行 OSC server，此时消息流向是 Adapter -> Squeak 以上代码也可以运行在其他smalltalk方言中，诸如 Pharo。 参考 ¶ squeak osc","text_tokens":["¶","参考","消息","127","、","喜欢","推动","开发","飞行器","目前","smalltalk","系统命令","方式","[","http","daniel","整个","其他",":","系统","计算机","计划","(","到","scratch","调用","两者",",","etoys","cleint","方言","}","demo","zeromq","轻松","关于","最","for","计算","你","算机","eim","采用","接入","拖","1","者","alan","代码","依然","即可","演进","有","是","抱","croquet","的",".","一代","最新","不同","连在一起","项目","server","使用","由于","#","第一代",">","在","kay","几位","导览","持续","里","可","桌面","实验","80",")","连接","现代"," ","/","我们","之后","一起","加载","将","python","ingall","都","port","可以","包括","osc","'","。","oscmessage","我","websocket","运行","连在","参与","mit","一种","施乐","所以","用","一个","也","他们","用作","来","作为","愿景","以上","实验室","adapter","-","很","simonholland","第一","跟","0","飞行","内置","\"","，","sendto","forward","和","媒体","控制","诸如","中","流向","]","pharo","下载","自己","环境","了","入门","此时","这个","之前","多种","squeak","turn","olpc","12361","进阶","插件","{","client","领域","介绍","今天","实现","提供","right","创造","命令","写"],"title":"Squeak/Smalltalk","title_tokens":["squeak","/","smalltalk"]},{"location":"extension_guide/Squeak/#squeaksmalltalk","text":"","text_tokens":[],"title":"Squeak/Smalltalk","title_tokens":["squeak","/","smalltalk"]},{"location":"extension_guide/Squeak/#_1","text":"Squeak 是 Smalltalk 的现代实现. 有几位 Smalltalk-80 的实现者(他们之前在施乐实验室创造了 Smalltalk)都参与到了 Squeak 中，包括 Alan Kay 和 Daniel Ingall，这个项目依然在持续演进，他们抱有跟今天计算机整个领域不同的愿景。 MIT媒体实验室推动的OLPC计划，采用Squeak作为开发环境。 Etoys、Croquet、第一代的Scratch都是用 Squeak 实现的。 关于 Squeak 入门，可参考 Smalltalk 入门导览","text_tokens":["和","采用","媒体","包括","者","alan","参考","依然","。","演进","、","有","是","中","抱","croquet","推动","的",".","开发","一代","不同","参与","mit","项目","smalltalk","施乐","环境","了","第一代","入门","用","在","kay","几位","他们","daniel","持续","整个","导览","计算机","可","计划","这个","之前","实验","80","(",")","到","作为","scratch","愿景","实验室","squeak","etoys","olpc","现代"," ","-","领域","今天","第一","实现","跟","关于","创造","计算","ingall","，","都","算机"],"title":"介绍","title_tokens":["介绍"]},{"location":"extension_guide/Squeak/#adapter","text":"有很多种方式将 Squeak 和 Adapter连在一起，诸如HTTP、Websocket、ZeroMQ，系统调用(Adapter python client提供系统命令)，你也可以自己写一个Adapter插件来连接两者。 目前我最喜欢的一种方式是使用 OSC , 由于最新的Adapter内置了 OSC server，所以我们可以轻松将Squeak用作 osc cleint， 消息流向是 Squeak->Adapter 。","text_tokens":["可以","和","osc","消息","诸如","。","、","有","是","喜欢","流向","我","的","websocket","最新","你","目前","连在","连在一起","系统命令","自己","一种","server","使用","方式","由于","所以","了",">","一个","http","也","系统","用作","多种","(",",",")","调用","来","两者","adapter","squeak","cleint","连接"," ","插件","我们","client","-","很","zeromq","一起","提供","轻松","最","命令","将","python","内置","，","写"],"title":"接入 Adapter","title_tokens":[" ","接入","adapter"]},{"location":"extension_guide/Squeak/#demo","text":"在Squeak中, 下载 OSC : OSC-SimonHolland , 之后拖到 Squeak 桌面，加载使用即可。 ( OSCMessage for: { '/eim/osc' . 1 }) sendTo: # [ 127 0 0 1 ] port: 12361 . \"turn right\" ( OSCMessage for: { '/eim/osc' . 0 }) sendTo: # [ 127 0 0 1 ] port: 12361 . \"forward\" ( OSCMessage for: { '/eim/osc' . -1 }) sendTo: # [ 127 0 0 1 ] port: 12361 . \"turn right\" 以上的代码将控制Scratch里的飞行器: squeak-scratch-demo","text_tokens":["eim","拖","1","osc","127","代码","控制","即可","'","。","中","oscmessage","port",".","]","的","下载","飞行器","使用","[","#","forward","在",":","里","桌面","到",",","(",")","scratch","以上","squeak","turn","12361"," ","-","{","/","}","demo","simonholland","之后","0","right","加载","飞行","for","将","\"","，","sendto"],"title":"demo","title_tokens":["demo"]},{"location":"extension_guide/Squeak/#_2","text":"你也可以在Squeak中运行 OSC server，此时消息流向是 Adapter -> Squeak 以上代码也可以运行在其他smalltalk方言中，诸如 Pharo。","text_tokens":["可以","osc","消息","代码","诸如","。","中","流向","是","你","pharo","运行","server","smalltalk",">","也","在","其他","此时","以上","adapter","squeak","方言"," ","-","，"],"title":"进阶","title_tokens":["进阶"]},{"location":"extension_guide/Squeak/#_3","text":"squeak osc","text_tokens":["squeak"," ","osc"],"title":"参考","title_tokens":["参考"]},{"location":"extension_guide/Wekinator/","text":"Wekinator ¶ Wekinator 允许任何人使用机器学习来构建新的乐器、手势游戏控制器、计算机视觉或计算机听觉系统等。 Wekinator允许用户通过演示人类的动作和计算机的反应来构建新的交互系统，无需编写代码。 你可以使用 OSC 插件，与 Wekinator 互操作。 提醒 Teachable Machine 可视为Wekinator的后继者，在功能、可理解性和易用性上都做得更好，推荐大家使用。","text_tokens":["¶","编写","和","可以","后继","任何","代码","osc","控制","反应","互操作","。","手势","、","任何人","何人","的","交互","你","teachable","允许","与","算机","machine","听觉","使用","性","易用性","大家","推荐","得","视觉","学习","等","理解","在","上","更好","新","后继者","系统","演示","计算机","可","构建","易用","动作","来","控制器","人类"," ","插件","视为","用户","无需","机器","乐器","或","，","做","操作","计算","游戏","提醒","通过","都","wekinator","功能"],"title":"Wekinator","title_tokens":["wekinator"]},{"location":"extension_guide/Wekinator/#wekinator","text":"Wekinator 允许任何人使用机器学习来构建新的乐器、手势游戏控制器、计算机视觉或计算机听觉系统等。 Wekinator允许用户通过演示人类的动作和计算机的反应来构建新的交互系统，无需编写代码。 你可以使用 OSC 插件，与 Wekinator 互操作。 提醒 Teachable Machine 可视为Wekinator的后继者，在功能、可理解性和易用性上都做得更好，推荐大家使用。","text_tokens":["可以","编写","和","后继","任何","代码","osc","控制","反应","互操作","。","手势","、","任何人","何人","的","交互","你","teachable","允许","与","算机","machine","听觉","使用","性","易用性","大家","推荐","得","视觉","学习","等","理解","在","上","更好","新","后继者","系统","演示","计算机","可","构建","易用","动作","来","控制器","人类"," ","插件","视为","用户","无需","机器","乐器","或","，","做","操作","计算","游戏","提醒","通过","都","wekinator","功能"],"title":"Wekinator","title_tokens":["wekinator"]},{"location":"extension_guide/alphamini/","text":"悟空机器人(教育版) ¶ 使用说明 ¶ 目前该插件并未内置到 Adapter 中。 我们目前将插件构建为 Adapter Node ，可以在Adapter外部以普通Python文件运行，一旦运行起来，与普通Adapter插件是一样的，能够与Adapter体系的所有事物交互。 Python环境 ¶ 首先你本地需要有 Python 环境（ Python>=3.6 ） 你可以到 Python 官方 下载，也可以使用 CodeLab放在 国内的版本(Python3.7) 提醒 Mac 用户和 Linux 本地很可能内置了 Python3 安装依赖 ¶ pip install alphamini codelab_adapter_client --upgrade 开始！ ¶ 步骤 1：打开 CodeLab Scratch ¶ 运行CodeLab Adapter， 确保在线平台与Adapte连接正常。 看到 CodeLab Scratch 指示灯显示绿色，代表连接成功。 步骤 1：运行 node_alphamini.py ¶ 将 node_alphamini.py 插件下载到本地（随便放在一个文件夹里），在命令行中进入到这个文件夹，使用 python node_alphamini.py 运行它。 步骤 2：为 悟空机器人 配网 ¶ 将 悟空机器人 连上网络。（操作细节可以参考 悟空机器人 说明书） 步骤 3: 编程 ¶ 选择 scratch3 中的 EIM 插件. alphamini-demo2 以上 Demo 运行结果为: 进阶 ¶ 更多API参考文档: mini-python-sdk 悟空的 内置行为 ¶ 内置舞蹈 ¶ robot . play_behavior ( name = 'custom_0035' ) # 生日快乐 内置动作 ¶ robot . play_action ( action_name = '010' ) # 打招呼 内置表情 ¶ robot . play_expression ( express_name = 'codemao13' ) # 疑问 提醒 悟空内部运行一个安卓系统，带有内嵌 Python 环境 FAQ ¶ 有些网络无法扫描到悟空 ¶ 似乎和局域网内的设备发现机制（mdns？）有关。 通过以下脚本排查问题。如果以下脚本无法扫描到设备，请联系优必选客服人员。 注意将 00447 替换成你自己的设备号 # pip install alphamini # https://github.com/marklogg/mini_demo/blob/master/test/test_connect.py import asyncio import logging import mini.mini_sdk as MiniSdk from mini.dns.dns_browser import WiFiDevice \"\"\"根据机器人序列号后缀搜索设备 搜索指定序列号(在机器人屁股后面)的机器人, 可以只输入序列号尾部字符即可,长度任意, 建议5个字符以上可以准确匹配 \"\"\" device_name = \"00447\" async def test_get_device_by_name (): ''' 10秒超时 Returns: WiFiDevice: 包含机器人名称,ip,port等信息 ''' result : WiFiDevice = await MiniSdk . get_device_by_name ( device_name , 10 ) print ( f \"test_get_device_by_name result:{result}\" ) return result async def main (): device : WiFiDevice = await test_get_device_by_name () if device : print ( \"已发现设备\" ) else : print ( \"无法发现设备\" ) if __name__ == '__main__' : asyncio . run ( main ())","text_tokens":["¶","com","内","参考","为","一样","install","更","外部","脚本","指示灯","选择","长度","marklogg","多","https","？","后缀","个字符","目前","疑问","wifidevice","机制","github","替换成","排查","发现","带有","run",":","系统","打开","！","构建","有关","随便","(","到","普通","步骤","scratch","客服",",","字符","await","blob","f","mini","平台","}","3.6","demo","打招呼","else","10","_","并未","robot","安卓","所有","你","首先","eim","内部","1","linux","express","只","局域","即可","有","是","3","教育","的",".","命令行","__","文件","adapte","as","demo2","mdns","以下","悟空","python3","使用","机器人","一旦","codelab","已","#",">","国内","在","以","minisdk","browser","序列","超时","搜索","任意","里","它","秒","print","动作","似乎",")","编程","custom","需要","成功","连接"," ","（","我们","放在","/","机器","codemao13","if","配网","说明","注意","将","python","）","logging","提醒","名称","port","可能","可以","指定","dns","py","生日快乐","'","。","该","根据","网络","asyncio","输入","action","return","包含","官方","def","件夹","序列号","尾部","运行","与","结果","from","匹配","test","一个","也","上","事物","依赖","看到","快乐","准确","async","请","人员","本地","确保","以上","adapter","returns","python3.7","-","招呼","屁股","信息","by","很","换成","在线","2","替换","号","指示","import","connect","alphamini","get","操作","表情","scratch3","内置","\"","0035","内嵌","，","版","通过","问题","master","和","sdk","expression","device","如果","正常","有些","中","00447","建议","mac","细节","交互","设备","安装","下载","ip","代表","版本","优","显示","：","自己","环境","api","了","起来","行为","pip","等","=","连","这个","无法","能够","upgrade","faq","必选","5","文档","舞蹈","result","进阶","绿色","插件","{","node","client","用户","开始","name","进入","说明书","010","后面","扫描","文件夹","behavior","main","命令","联系","生日","play","体系","局域网"],"title":"悟空机器人(教育版)","title_tokens":["机器","(","悟空",")","机器人","教育","版"]},{"location":"extension_guide/alphamini/#_1","text":"","text_tokens":[],"title":"悟空机器人(教育版)","title_tokens":["机器","(","悟空",")","机器人","教育","版"]},{"location":"extension_guide/alphamini/#_2","text":"目前该插件并未内置到 Adapter 中。 我们目前将插件构建为 Adapter Node ，可以在Adapter外部以普通Python文件运行，一旦运行起来，与普通Adapter插件是一样的，能够与Adapter体系的所有事物交互。","text_tokens":["可以","为","一样","。","该","中","外部","是","的","交互","文件","运行","目前","与","一旦","起来","在","以","事物","构建","能够","到","普通","adapter","插件"," ","我们","node","并未","内置","将","python","体系","所有","，"],"title":"使用说明","title_tokens":["说明","使用"]},{"location":"extension_guide/alphamini/#python","text":"首先你本地需要有 Python 环境（ Python>=3.6 ） 你可以到 Python 官方 下载，也可以使用 CodeLab放在 国内的版本(Python3.7) 提醒 Mac 用户和 Linux 本地很可能内置了 Python3","text_tokens":["可以","和","linux","有","的","官方","mac","你","下载","版本","python3","环境","使用","codelab","了",">","国内","也","=","到","(",")","本地","需要","python3.7"," ","（","放在","3.6","用户","很","python","内置","）","提醒","，","首先","可能"],"title":"Python环境","title_tokens":["环境","python"]},{"location":"extension_guide/alphamini/#_3","text":"pip install alphamini codelab_adapter_client --upgrade","text_tokens":[" ","-","client","install","alphamini","_","upgrade","codelab","adapter","pip"],"title":"安装依赖","title_tokens":["安装","依赖"]},{"location":"extension_guide/alphamini/#_4","text":"","text_tokens":[],"title":"开始！","title_tokens":["开始","！"]},{"location":"extension_guide/alphamini/#1-codelab-scratch","text":"运行CodeLab Adapter， 确保在线平台与Adapte连接正常。 看到 CodeLab Scratch 指示灯显示绿色，代表连接成功。","text_tokens":["。","正常","指示灯","adapte","运行","代表","与","显示","codelab","看到","scratch","确保","adapter","成功","绿色","连接"," ","平台","在线","指示","，"],"title":"步骤 1：打开 CodeLab Scratch","title_tokens":[" ","1","打开","：","scratch","步骤","codelab"]},{"location":"extension_guide/alphamini/#1-node_alphaminipy","text":"将 node_alphamini.py 插件下载到本地（随便放在一个文件夹里），在命令行中进入到这个文件夹，使用 python node_alphamini.py 运行它。","text_tokens":["py","。","中",".","命令行","文件","件夹","下载","运行","使用","一个","在","里","它","这个","随便","到","本地"," ","插件","node","（","放在","进入","文件夹","alphamini","_","命令","将","python","）","，"],"title":"步骤 1：运行 node_alphamini.py","title_tokens":[" ","node","1","运行","py","：","_","alphamini","步骤","."]},{"location":"extension_guide/alphamini/#2","text":"将 悟空机器人 连上网络。（操作细节可以参考 悟空机器人 说明书）","text_tokens":[" ","上","（","可以","参考","机器","说明书","连","。","悟空","操作","说明","网络","机器人","将","）","细节"],"title":"步骤 2：为 悟空机器人 配网","title_tokens":[" ","机器","2","为","：","悟空","配网","步骤","机器人"]},{"location":"extension_guide/alphamini/#3","text":"选择 scratch3 中的 EIM 插件. alphamini-demo2 以上 Demo 运行结果为:","text_tokens":[" ","eim","插件","-",".","demo","运行",":","demo2","结果","为","alphamini","中","scratch3","以上","的","选择"],"title":"步骤 3: 编程","title_tokens":[" ",":","步骤","编程","3"]},{"location":"extension_guide/alphamini/#_5","text":"更多API参考文档: mini-python-sdk","text_tokens":[" ","-","参考",":","sdk","更","mini","api","python","文档","多"],"title":"进阶","title_tokens":["进阶"]},{"location":"extension_guide/alphamini/#_6","text":"","text_tokens":[],"title":"悟空的内置行为","title_tokens":["行为","的","内置","悟空"]},{"location":"extension_guide/alphamini/#_7","text":"robot . play_behavior ( name = 'custom_0035' ) # 生日快乐","text_tokens":[" ","name","=","生日快乐","behavior","'","_","(",")","robot","#","快乐","custom","生日","play","0035","."],"title":"内置舞蹈","title_tokens":["舞蹈","内置"]},{"location":"extension_guide/alphamini/#_8","text":"robot . play_action ( action_name = '010' ) # 打招呼","text_tokens":[" ","招呼","010","name","=","打招呼","'","_","(",")","robot","action","play","#","."],"title":"内置动作","title_tokens":["内置","动作"]},{"location":"extension_guide/alphamini/#_9","text":"robot . play_expression ( express_name = 'codemao13' ) # 疑问 提醒 悟空内部运行一个安卓系统，带有内嵌 Python 环境","text_tokens":["内部","expression","express","'",".","运行","疑问","悟空","环境","#","一个","带有","=","系统","(",")"," ","name","codemao13","_","robot","安卓","python","play","提醒","内嵌","，"],"title":"内置表情","title_tokens":["表情","内置"]},{"location":"extension_guide/alphamini/#faq","text":"","text_tokens":[],"title":"FAQ","title_tokens":["faq"]},{"location":"extension_guide/alphamini/#_10","text":"似乎和局域网内的设备发现机制（mdns？）有关。 通过以下脚本排查问题。如果以下脚本无法扫描到设备，请联系优必选客服人员。 注意将 00447 替换成你自己的设备号 # pip install alphamini # https://github.com/marklogg/mini_demo/blob/master/test/test_connect.py import asyncio import logging import mini.mini_sdk as MiniSdk from mini.dns.dns_browser import WiFiDevice \"\"\"根据机器人序列号后缀搜索设备 搜索指定序列号(在机器人屁股后面)的机器人, 可以只输入序列号尾部字符即可,长度任意, 建议5个字符以上可以准确匹配 \"\"\" device_name = \"00447\" async def test_get_device_by_name (): ''' 10秒超时 Returns: WiFiDevice: 包含机器人名称,ip,port等信息 ''' result : WiFiDevice = await MiniSdk . get_device_by_name ( device_name , 10 ) print ( f \"test_get_device_by_name result:{result}\" ) return result async def main (): device : WiFiDevice = await test_get_device_by_name () if device : print ( \"已发现设备\" ) else : print ( \"无法发现设备\" ) if __name__ == '__main__' : asyncio . run ( main ())","text_tokens":["com","内","install","脚本","长度","marklogg","https","？","后缀","个字符","wifidevice","机制","github","排查","发现","run",":","有关","到","(",",","await","客服","字符","blob","f","mini","}","demo","else","10","_","你","只","即可","局域","的",".","__","as","mdns","以下","机器人","已","#","minisdk","在","超时","序列","browser","print","搜索","任意","秒","似乎",")","（"," ","/","机器","if","注意","将","名称","）","port","指定","可以","dns","py","'","。","根据","asyncio","输入","return","包含","def","序列号","尾部","from","匹配","test","准确","async","请","人员","returns","以上","信息","屁股","换成","号","替换","import","get","by","connect","alphamini","\"","master","，","通过","问题","和","sdk","device","如果","局域网","00447","建议","设备","ip","优","自己","pip","等","=","无法","必选","5","result","{","后面","name","扫描","main","联系","logging","替换成"],"title":"有些网络无法扫描到悟空","title_tokens":["扫描","无法","到","有些","悟空","网络"]},{"location":"extension_guide/android/","text":"","text_tokens":[],"title":"Android","title_tokens":["android"]},{"location":"extension_guide/arduino_UNO/","text":"Tutorial ¶ 依赖 ¶ 安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器. 步骤 1：打开 Codelab Adapter ¶ 双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。 步骤 2：打开 Codelab Scratch3 ¶ 点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常 步骤 3：连接设备，加载插件 ¶ 步骤 3.1：为 Arduino UNO 烧入固件：FirmataExpress ¶ 安装 Arduino IDE 将 FirmataExpress 安装到 IDE 中 打开 Arduino IDE 并选择工具/管理库（Tools/Manage）。当出现库管理器时，在搜索框中输入 FirmataExpress ，然后单击安装。 安装超声波库：FirmataExpress 还依赖 Erick Simões 的超声库。再次使用 Arduino 库管理器搜索超声波，选择 Erick Simoes 的版本。 将 FirmataPlus 编译并上传到 Arduino： 选择文件/示例（File/Examples），然后从下拉列表中选择 FirmataExpress。 上传到 Arduino。 至此，我们就完成了 Arduino 相关的工作。 步骤 3.2：重置 Arduino ¶ 每次使用前，按下 Arduino 的重置按钮。 步骤 3.3：加载插件 ¶ 在 CodeLab Adapter 中点击加载 Arduino UNO 插件： 点击加载插件之后，你应该会看到板子上的 LED 闪烁。如果一切正常，大约 5 秒钟之后（连接时间由 pymata_express 决定），你将看到连接 Arduino UNO 成功的提醒。现在你可以开始在 Scratch 里编程了。 ps: Linux 用户注意，scratch3_adapter 使用 USB 串口与 Arduino 连接，Linux 下，使用 USB 串口需要做权限设置： sudo chmod 666 /dev/ttyACM0 步骤 4：hello world ¶ 现在让我们利用 CodeLab Scratch3 控制 Arduino。 选择对应的 Scratch3 插件：Arduino UNO。 选择对应拓展积木，点击运行。 提醒 引脚在设置具体值之前，不允许读取，否则会出现tx/rx持续轮询被占用(你可以观察到板子上的灯常亮)，这是 pymata_express 的机制决定的。遇到这种情况，请按下重置按钮重新连接。 感谢 ¶ 感谢 mryslab 在硬件驱动上的工作，该插件从他的工作中移植过来。 结语 ¶ 这个例子完整展示了 CodeLab Adapter 的使用流程 打开 CodeLab Adapter 打开 CodeLab Scratch3 接入你的设备（可以是任何开源硬件） 打开对应插件 选择对应拓展积木，在 Scratch 3.0 中与设备交互 如果你想接入的设备目前没有默认插件支持它（诸如 Arduino 的其他版本：Nano 之类的），你可以自己来写，CodeLab Adapter 允许你将任何硬件接入 Scratch 3.0 中，别害怕，需要的代码很少也很简单，详情参见 开发手册 。我们支持使用任何编程语言来写拓展，目前我们自己主要使用 Python。 我们也将在 extension guide 中介绍各种社区插件的使用方法。","text_tokens":["¶","团队","连接时间","主要","按","hello","现阶段","为","或者","更","uno","页面","选择","具体","让","多","单击","不","详情","简单","开发","语言","目前","机制","默认","情况","simoes","manage","然后","其他","展示",":","完成","打开","图中","声波","大约","由","到",",","scratch","步骤","(","设置","usb","陆续","支持","rx","3.0","tx","õ","按下","做","流程","_","列表","框中","tutorial","3.2","会","firefox","遇到","你","浏览器","ttyacm0","mryslab","接入","各种","1","linux","代码","3.3","express","chmod","否则","3","是","库","读取","再次",".","的","file","文件","呈现","开源","允许","没有","值","接时","4","观察","使用","codelab","理器","在","结语","阶段","持续","搜索","里","它","时","这是",")","编程","需要","成功","连接","应该"," ","/","（","我们","箭头","小圆点","轮询","之后","666","说明","管理","注意","加载","很少","将","python","）","出现","点击","提醒","积木","可以","秒钟","这儿","还","tools","引脚","。","工作","效果","对应","输入","该","烧入","ps","firmataplus","dev","手册","官方","arduino","传到","一切正常","sudo","编译","硬件","管理器","其设","world","与","运行","被","双击","scratch3.0","灯常亮","led","如下","最佳","当","guide","串口","上","感谢","也","现在","想","依赖","下","看到","请","来","圆点","es","adapter","一切","移植","nano","并","3.1","firmataexpress","很","社区","2","web","启动","拓展","方法","害怕","参见","驱动","之类","scratch3","示例","板子","，","examples","相关","固件","任何","控制","重置","如果","正常","工具","从","中","诸如","建议","chrome","他","完整","交互","设备","安装","超声","决定","例子","版本","erick","：","利用","自己","sim","了","extension","链接","ide","超声波","按钮","过来","就","重新","ui","这个","之前","拉","pymata","别","前","浏览","5","绿色","插件","编程语言","开始","用户","权限","这种","介绍","占用","至此","所指","每次","闪烁","时间","写"],"title":"arduino UNO","title_tokens":[" ","arduino","uno"]},{"location":"extension_guide/arduino_UNO/#tutorial","text":"","text_tokens":[],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/arduino_UNO/#_1","text":"安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器.","text_tokens":["团队","现阶段","为","更","效果","建议","chrome",".","官方","多","安装","其设","目前","版本","使用","默认","codelab","最佳","在","阶段","scratch","adapter","浏览","陆续"," ","支持","/","将","firefox","，","浏览器"],"title":"依赖","title_tokens":["依赖"]},{"location":"extension_guide/arduino_UNO/#1-codelab-adapter","text":"双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。","text_tokens":[" ","浏览","打开","之后","启动","双击","。","默认","codelab","adapter","将","，","浏览器"],"title":"步骤 1：打开 Codelab Adapter","title_tokens":[" ","1","打开","：","步骤","codelab","adapter"]},{"location":"extension_guide/arduino_UNO/#2-codelab-scratch3","text":"点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常","text_tokens":["这儿","或者","正常","页面","的","呈现","与","scratch3.0","如下","codelab","链接","上","ui",":","打开","图中",",","圆点","adapter","绿色","连接"," ","箭头","小圆点","web","所指","说明","scratch3","将","点击"],"title":"步骤 2：打开 Codelab Scratch3","title_tokens":[" ","打开","2","：","步骤","scratch3","codelab"]},{"location":"extension_guide/arduino_UNO/#3","text":"","text_tokens":[],"title":"步骤 3：连接设备，加载插件","title_tokens":[" ","设备","插件","：","步骤","3","加载","，","连接"]},{"location":"extension_guide/arduino_UNO/#31-arduino-uno-firmataexpress","text":"安装 Arduino IDE 将 FirmataExpress 安装到 IDE 中 打开 Arduino IDE 并选择工具/管理库（Tools/Manage）。当出现库管理器时，在搜索框中输入 FirmataExpress ，然后单击安装。 安装超声波库：FirmataExpress 还依赖 Erick Simões 的超声库。再次使用 Arduino 库管理器搜索超声波，选择 Erick Simoes 的版本。 将 FirmataPlus 编译并上传到 Arduino： 选择文件/示例（File/Examples），然后从下拉列表中选择 FirmataExpress。 上传到 Arduino。 至此，我们就完成了 Arduino 相关的工作。","text_tokens":["相关","还","tools","。","从","工具","工作","中","输入","库","firmataplus","再次","的","选择","arduino","传到","文件","单击","安装","超声","编译","file","管理器","版本","erick","：","使用","sim","simoes","理器","了","当","manage","ide","然后","超声波","在","上","就","依赖","搜索","打开","下","声波","完成","时","到","拉","es","并"," ","/","firmataexpress","（","我们","õ","至此","出现","列表","管理","框中","将","示例","）","，","examples"],"title":"步骤 3.1：为 Arduino UNO 烧入固件：FirmataExpress","title_tokens":[" ","3.1","firmataexpress","固件","为","：","步骤","uno","烧入","arduino"]},{"location":"extension_guide/arduino_UNO/#32-arduino","text":"每次使用前，按下 Arduino 的重置按钮。","text_tokens":[" ","arduino","按下","重置","。","每次","使用","前","的","，","按钮"],"title":"步骤 3.2：重置 Arduino","title_tokens":[" ","：","重置","步骤","3.2","arduino"]},{"location":"extension_guide/arduino_UNO/#33","text":"在 CodeLab Adapter 中点击加载 Arduino UNO 插件： 点击加载插件之后，你应该会看到板子上的 LED 闪烁。如果一切正常，大约 5 秒钟之后（连接时间由 pymata_express 决定），你将看到连接 Arduino UNO 成功的提醒。现在你可以开始在 Scratch 里编程了。 ps: Linux 用户注意，scratch3_adapter 使用 USB 串口与 Arduino 连接，Linux 下，使用 USB 串口需要做权限设置： sudo chmod 666 /dev/ttyACM0","text_tokens":["可以","秒钟","连接时间","linux","express","chmod","。","如果","正常","中","uno","ps","dev","的","arduino","sudo","一切正常","决定","与","：","接时","led","使用","codelab","了","提醒","串口","在","上","现在",":","大约","下","看到","里","由","pymata","）","scratch","编程","设置","usb","adapter","一切","5","需要","成功","应该","连接"," ","插件","（","开始","用户","/","权限","，","之后","做","_","666","闪烁","注意","加载","会","将","时间","板子","scratch3","点击","你","ttyacm0"],"title":"步骤 3.3：加载插件","title_tokens":[" ","插件","3.3","：","步骤","加载"]},{"location":"extension_guide/arduino_UNO/#4hello-world","text":"现在让我们利用 CodeLab Scratch3 控制 Arduino。 选择对应的 Scratch3 插件：Arduino UNO。 选择对应拓展积木，点击运行。 提醒 引脚在设置具体值之前，不允许读取，否则会出现tx/rx持续轮询被占用(你可以观察到板子上的灯常亮)，这是 pymata_express 的机制决定的。遇到这种情况，请按下重置按钮重新连接。","text_tokens":["可以","按","控制","引脚","否则","。","express","对应","重置","uno","板子","读取","的","选择","arduino","让","具体","不","你","决定","被","运行","允许","遇到","值","利用","：","灯常亮","机制","观察","情况","codelab","提醒","按钮","在","上","现在","持续","重新","下","之前","这是","(","到",")","pymata","请","设置","轮询","连接"," ","插件","我们","/","rx","tx","这种","占用","拓展","_","会","scratch3","出现","积木","点击","，"],"title":"步骤 4：hello world","title_tokens":[" ","hello","world","：","4","步骤"]},{"location":"extension_guide/arduino_UNO/#_2","text":"感谢 mryslab 在硬件驱动上的工作，该插件从他的工作中移植过来。","text_tokens":[" ","感谢","mryslab","在","硬件","上","插件","。","工作","该","从","中","驱动","他","移植","的","，","过来"],"title":"感谢","title_tokens":["感谢"]},{"location":"extension_guide/arduino_UNO/#_3","text":"这个例子完整展示了 CodeLab Adapter 的使用流程 打开 CodeLab Adapter 打开 CodeLab Scratch3 接入你的设备（可以是任何开源硬件） 打开对应插件 选择对应拓展积木，在 Scratch 3.0 中与设备交互 如果你想接入的设备目前没有默认插件支持它（诸如 Arduino 的其他版本：Nano 之类的），你可以自己来写，CodeLab Adapter 允许你将任何硬件接入 Scratch 3.0 中，别害怕，需要的代码很少也很简单，详情参见 开发手册 。我们支持使用任何编程语言来写拓展，目前我们自己主要使用 Python。 我们也将在 extension guide 中介绍各种社区插件的使用方法。","text_tokens":["主要","选择","开发","简单","语言","目前","默认","其他","展示","打开","scratch","支持","3.0","流程","你","接入","各种","代码","是","的","开源","允许","没有","使用","codelab","在","它","编程","需要"," ","（","我们","很少","将","python","）","积木","可以","害怕","详情","对应","。","手册","arduino","硬件","与","guide","也","想","来","adapter","nano","很","社区","拓展","方法","参见","之类","scratch3","，","任何","如果","诸如","中","完整","交互","设备","例子","版本","：","自己","了","extension","这个","别","插件","编程语言","介绍","写"],"title":"结语","title_tokens":["结语"]},{"location":"extension_guide/bitbot/","text":"","text_tokens":[],"title":"Bitbot","title_tokens":["bitbot"]},{"location":"extension_guide/blender/","text":"Tutorial ¶ 系统依赖参考 EIM 教程 。 安装依赖 ¶ 我的环境是： MacOS blender 2.8 cd /Applications/blender.app/Contents/Resources/2.80/python/bin wget https://bootstrap.pypa.io/get-pip.py ./python3.7m ./get-pip.py --prefix /Applications/blender.app/Contents/Resources/2.80/python ./python3.7m pip3 install codelab_adapter_client --upgrade 在 blender 中运行 node_blender ¶ 在 blender 中运行 node_blender.py ，我们在 blender 2.79 和 2.80 两个版本中都做了测试。 在 blender 2.79b 中， 打开 Text Editor ，运行 node_blender.py ： 在 blender 2.80 中，我喜欢打开 Scripting 标签页（使用 Text Editor 也可以），运行 node_blender.py ： 提醒 如果你希望看到调试信息(log) 在命令行里启动blender， /Applications/blender.app/Contents/MacOS/blender （MacOS） 运行 CodeLab Adapter (作为消息中心) ¶ 开始使用 ¶ 打开 CodeLab Scratch3 ，开始使用。 如果遇到问题，请尝试刷新浏览器缓存。 Demo ¶ Scratch blender todo ¶ 将 node_blender (v2)写成 blender 插件。","text_tokens":["¶","text","参考","消息","install","喜欢","https","scripting","两个",":","系统","打开","(","scratch","2.8","demo","做","_","tutorial","遇到","todo","你","浏览器","eim","log","contents","resources","尝试","是","prefix","的",".","调试","命令行","editor","使用","codelab","标签","在","里","教程",")"," ","/","我们","（","pip3","python","将","）","app","提醒","bootstrap","都","可以","写成","py","。","macos","io","缓存","我","运行","applications","调试信息","b","也","依赖","看到","请","作为","adapter","希望","blender","-","python3.7","信息","get","启动","中心","cd","scratch3","，","问题","和","测试","如果","wget","bin","中","v2","pypa","安装","2.80","版本","：","环境","2.79","m","了","pip","页","upgrade","浏览","插件","node","client","开始","刷新","命令"],"title":"blender","title_tokens":["blender"]},{"location":"extension_guide/blender/#tutorial","text":"系统依赖参考 EIM 教程 。","text_tokens":[" ","eim","参考","依赖","系统","教程","。"],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/blender/#_1","text":"我的环境是： MacOS blender 2.8 cd /Applications/blender.app/Contents/Resources/2.80/python/bin wget https://bootstrap.pypa.io/get-pip.py ./python3.7m ./get-pip.py --prefix /Applications/blender.app/Contents/Resources/2.80/python ./python3.7m pip3 install codelab_adapter_client --upgrade","text_tokens":["contents","resources","py","install","wget","macos","是","bin","io","我","pypa","的",".","prefix","https","2.80","：","环境","applications","m","codelab","pip",":","upgrade","adapter","blender"," ","/","-","python3.7","client","2.8","get","_","cd","pip3","python","app","bootstrap"],"title":"安装依赖","title_tokens":["安装","依赖"]},{"location":"extension_guide/blender/#blender-node_blender","text":"在 blender 中运行 node_blender.py ，我们在 blender 2.79 和 2.80 两个版本中都做了测试。 在 blender 2.79b 中， 打开 Text Editor ，运行 node_blender.py ： 在 blender 2.80 中，我喜欢打开 Scripting 标签页（使用 Text Editor 也可以），运行 node_blender.py ： 提醒 如果你希望看到调试信息(log) 在命令行里启动blender， /Applications/blender.app/Contents/MacOS/blender （MacOS）","text_tokens":["text","可以","和","log","测试","app","contents","py","。","如果","macos","中","喜欢","我",".","命令行","调试","你","editor","2.80","运行","版本","scripting","：","使用","2.79","applications","了","标签","调试信息","两个","b","在","也","打开","看到","里","页","(",")","希望","blender"," ","（","node","我们","信息","/","做","启动","_","命令","）","提醒","，","都"],"title":"在 blender 中运行 node_blender","title_tokens":[" ","在","node","运行","_","中","blender"]},{"location":"extension_guide/blender/#codelab-adapter","text":"","text_tokens":[],"title":"运行  CodeLab Adapter (作为消息中心)","title_tokens":[" ","运行","消息","(","中心",")","作为","codelab","adapter"]},{"location":"extension_guide/blender/#_2","text":"打开 CodeLab Scratch3 ，开始使用。 如果遇到问题，请尝试刷新浏览器缓存。","text_tokens":[" ","开始","尝试","刷新","打开","。","如果","使用","请","scratch3","codelab","缓存","浏览","遇到","，","浏览器","问题"],"title":"开始使用","title_tokens":["使用","开始"]},{"location":"extension_guide/blender/#demo","text":"Scratch blender","text_tokens":[" ","scratch","blender"],"title":"Demo","title_tokens":["demo"]},{"location":"extension_guide/blender/#todo","text":"将 node_blender (v2)写成 blender 插件。","text_tokens":[" ","插件","node","写成","。","_","(",")","将","v2","blender"],"title":"todo","title_tokens":["todo"]},{"location":"extension_guide/cozmo/","text":"Cozmo ¶ Windows MacOS Linux iOS 需要安装iTunes 开箱可用 手动安装 Android 开箱可用 开箱可用 手动安装 运行 SDK 模式 ¶ 将 Cozmo 接入移动设备（手机/平板），并进入SDK模式。 使用数据线将手机/平板接入电脑。 详情参考: 官方文档 Download Codelab Adapter ¶ Download Codelab Adapter run it Open Scratch 3.0 ¶ open CodeLab Scratch3 Open extension_cozmo ¶ open extension_cozmo in CodeLab Adapter Enjoy it :) Tip Cozmo 有数百种动作/行为（它们只是字符串），可以使用 运行 和 执行 积木触发。浏览这些丰富的行为可以使用这个工具： Cozmo-Explorer-Tool 。 Advanced ¶ You can create your own custom blocks based on the exec block . Almost all Cozmo SDK API work. linux user ¶ install codelab_adapter_client ¶ Python >= 3.6 Linux/MacOS user: python3 -m pip install codelab_adapter_client --upgrade --user Install the SDK on your system ¶ Follow Cozmo official tutorial: Initial Setup If the following code ( hello_world.py ) runs smoothly, go to the next step. ''' linux: /usr/bin/python3 hello_world.py ''' import cozmo from codelab_adapter_client import AdapterNode def cozmo_program ( robot : cozmo . robot . Robot ): robot . say_text ( \"Hello World\" ) . wait_for_completed () cozmo . run_program ( cozmo_program ) 进阶 ¶ 参考 Cozmo API ，建议在 jupyterlab 中做实验(已经内置好了Cozmo环境) 提醒 如果你希望做一些更复杂的事，建议直接使用社区里的 Python SDK与 设备交互，之后使用 Adapter Node 将其接入Adapter环境中。","text_tokens":["¶","text","参考","almost","hello","install","更","code","can","step","usr","好","数百种","cozmo","android","触发","in","following","runs","explorer","run",":","这些","tip","(",",","scratch","字符","电脑","执行","next","3.0","可用","3.6","做","_","只是","robot","平板","tutorial","for","completed","你","接入","it","linux","windows","模式","有","直接","的",".","all","adapternode","to","python3","使用","you","codelab","它们",">","在","数据线","里","实验","动作","百种",")","say","custom","your","exec","需要","tool"," ","（","/","enjoy","之后","user","if","based","将","python","）","积木","提醒","work","可以","py","'","。","详情","macos","官方","advanced","initial","def","复杂","运行","移动","world","ios","setup","from","与","own","wait","数百","手动","adapter","并","smoothly","希望","-","follow","一些","社区","import","手机","create","system","scratch3","go","数据","the","\"","内置","，","和","sdk","字符串","download","开箱","如果","工具","block","bin","中","建议","open","交互","设备","安装","其","blocks","：","环境","api","m","了","行为","on","extension","pip","丰富","=","official","事","这个","upgrade","浏览","文档","进阶","node","client","已经","program","进入","jupyterlab","itunes"],"title":"Cozmo","title_tokens":["cozmo"]},{"location":"extension_guide/cozmo/#cozmo","text":"Windows MacOS Linux iOS 需要安装iTunes 开箱可用 手动安装 Android 开箱可用 开箱可用 手动安装","text_tokens":[" ","安装","可用","linux","ios","windows","开箱","macos","android","手动","需要","itunes"],"title":"Cozmo","title_tokens":["cozmo"]},{"location":"extension_guide/cozmo/#sdk","text":"将 Cozmo 接入移动设备（手机/平板），并进入SDK模式。 使用数据线将手机/平板接入电脑。 详情参考: 官方文档","text_tokens":["接入","参考","sdk","。","模式","详情","官方","设备","移动","cozmo","使用","数据线",":","电脑","文档","并"," ","（","/","进入","手机","平板","将","数据","）","，"],"title":"运行 SDK 模式","title_tokens":[" ","模式","运行","sdk"]},{"location":"extension_guide/cozmo/#download-codelab-adapter","text":"Download Codelab Adapter run it","text_tokens":[" ","run","it","download","codelab","adapter"],"title":"Download Codelab Adapter","title_tokens":[" ","download","codelab","adapter"]},{"location":"extension_guide/cozmo/#open-scratch-30","text":"open CodeLab Scratch3","text_tokens":[" ","open","scratch3","codelab"],"title":"Open Scratch 3.0","title_tokens":[" ","scratch","open","3.0"]},{"location":"extension_guide/cozmo/#open-extension_cozmo","text":"open extension_cozmo in CodeLab Adapter Enjoy it :) Tip Cozmo 有数百种动作/行为（它们只是字符串），可以使用 运行 和 执行 积木触发。浏览这些丰富的行为可以使用这个工具： Cozmo-Explorer-Tool 。","text_tokens":["可以","和","it","字符串","。","工具","有","open","的","运行","数百种","：","cozmo","使用","触发","codelab","行为","in","extension","它们","explorer","丰富",":","这些","tip","这个","动作","百种",")","字符","数百","adapter","浏览","tool","执行"," ","/","（","-","enjoy","_","只是","）","积木","，"],"title":"Open extension_cozmo","title_tokens":[" ","_","cozmo","extension","open"]},{"location":"extension_guide/cozmo/#advanced","text":"You can create your own custom blocks based on the exec block . Almost all Cozmo SDK API work.","text_tokens":["almost","sdk","block","all",".","can","blocks","cozmo","api","you","own","on","custom","your","exec"," ","create","based","the","work"],"title":"Advanced","title_tokens":["advanced"]},{"location":"extension_guide/cozmo/#linux-user","text":"","text_tokens":[],"title":"linux user","title_tokens":[" ","user","linux"]},{"location":"extension_guide/cozmo/#install-codelab_adapter_client","text":"Python >= 3.6 Linux/MacOS user: python3 -m pip install codelab_adapter_client --upgrade --user","text_tokens":["linux","install","macos","python3","m","codelab",">","pip","=",":","upgrade","adapter"," ","/","-","client","3.6","user","_","python"],"title":"install codelab_adapter_client","title_tokens":[" ","client","install","_","codelab","adapter"]},{"location":"extension_guide/cozmo/#install-the-sdk-on-your-system","text":"Follow Cozmo official tutorial: Initial Setup If the following code ( hello_world.py ) runs smoothly, go to the next step. ''' linux: /usr/bin/python3 hello_world.py ''' import cozmo from codelab_adapter_client import AdapterNode def cozmo_program ( robot : cozmo . robot . Robot ): robot . say_text ( \"Hello World\" ) . wait_for_completed () cozmo . run_program ( cozmo_program )","text_tokens":["text","hello","linux","py","'","bin","code",".","initial","adapternode","def","step","usr","to","world","setup","from","python3","cozmo","codelab","following","runs","run","official",":","(",",",")","say","wait","adapter","smoothly","follow"," ","/","next","client","program","import","if","_","robot","tutorial","go","for","the","completed","\""],"title":"Install the SDK on your system","title_tokens":[" ","sdk","install","system","your","the","on"]},{"location":"extension_guide/cozmo/#_1","text":"参考 Cozmo API ，建议在 jupyterlab 中做实验(已经内置好了Cozmo环境) 提醒 如果你希望做一些更复杂的事，建议直接使用社区里的 Python SDK与 设备交互，之后使用 Adapter Node 将其接入Adapter环境中。","text_tokens":["接入","参考","sdk","如果","更","。","中","建议","直接","的","复杂","交互","你","设备","好","其","与","cozmo","环境","api","使用","了","在","事","里","实验","(",")","adapter","希望"," ","一些","node","已经","社区","jupyterlab","做","之后","内置","python","将","提醒","，"],"title":"进阶","title_tokens":["进阶"]},{"location":"extension_guide/creating-coding/","text":"创意编程(creative-coding) ¶ If I can't picture it, I can't understand it. -- Albert Einstein 创意编程(creative-coding)社区将计算机视为一种表达媒介，这是我们关注该领域的原因。 创意编程(creative-coding)社区有许多流行项目， 我们尤其关注以下几个: mosaic openFrameworks openprocessing Processing oscP5 p5js p5js-osc Sonic Pi ptsjs nannou 这些项目大多数都内置 OSC 支持。 由于 Adapter 内置了 OSC Server 和 Client , 所以可以轻松与创意编程(creative-coding)生态的设施互操作！ 参考 ¶ awesome-creative-coding","text_tokens":["¶","参考","互操作","can","oscp5",":","这些","计算机","！","p5js","(",",","albert","支持","许多","轻松","awesome","计算","ptsjs","算机","it","有","einstein","表达",".","的","openframeworks","设施","项目","以下","server","由于","创意","openprocessing","这是",")","编程","t"," ","我们","if","pi","mosaic","将","尤其","i","都","可以","osc","'","。","该","processing","与","一种","所以","媒介","原因","adapter","-","流行","社区","生态","creative","操作","内置","，","几个","多数","关注","和","nannou","coding","了","picture","sonic","大多","视为","client","领域","大多数","understand"],"title":"创意编程","title_tokens":["创意","编程"]},{"location":"extension_guide/creating-coding/#creative-coding","text":"If I can't picture it, I can't understand it. -- Albert Einstein 创意编程(creative-coding)社区将计算机视为一种表达媒介，这是我们关注该领域的原因。 创意编程(creative-coding)社区有许多流行项目， 我们尤其关注以下几个: mosaic openFrameworks openprocessing Processing oscP5 p5js p5js-osc Sonic Pi ptsjs nannou 这些项目大多数都内置 OSC 支持。 由于 Adapter 内置了 OSC Server 和 Client , 所以可以轻松与创意编程(creative-coding)生态的设施互操作！","text_tokens":["互操作","can","oscp5",":","这些","计算机","！","p5js","(",",","albert","支持","许多","轻松","计算","ptsjs","算机","it","有","einstein","表达",".","的","openframeworks","设施","项目","以下","server","由于","创意","openprocessing","这是",")","编程","t"," ","我们","if","pi","mosaic","将","尤其","i","都","可以","osc","'","。","该","processing","与","一种","所以","媒介","原因","adapter","-","流行","社区","生态","creative","操作","内置","，","几个","多数","关注","和","nannou","coding","了","picture","sonic","大多","视为","client","领域","大多数","understand"],"title":"创意编程(creative-coding)","title_tokens":["-","creative","(",")","编程","coding","创意"]},{"location":"extension_guide/creating-coding/#_1","text":"awesome-creative-coding","text_tokens":["-","awesome","creative","coding"],"title":"参考","title_tokens":["参考"]},{"location":"extension_guide/digimon/","text":"digimon ¶ 插件介绍: Neverland2.0原型之 兴趣的【指向】 插件源码: node_digimon.py . digimon 插件本质上是webserver（改编(remix)自 node_webserver_flask.py ），将 web 请求转化为 EIM message。 Scratch Demo ¶ Scratch digimon demo","text_tokens":["¶","eim","py","为","】","digimon","。","是","message","请求","的",".","remix","指向","webserver","原型","neverland2.0","【","上",":","源码","转化","自","(",")","scratch","本质","兴趣","改编"," ","插件","node","（","flask","demo","介绍","web","_","之","将","）","，"],"title":"digimon","title_tokens":["digimon"]},{"location":"extension_guide/digimon/#digimon","text":"插件介绍: Neverland2.0原型之 兴趣的【指向】 插件源码: node_digimon.py . digimon 插件本质上是webserver（改编(remix)自 node_webserver_flask.py ），将 web 请求转化为 EIM message。","text_tokens":["eim","py","为","】","digimon","。","是","message","请求","的",".","remix","指向","webserver","原型","neverland2.0","【","上",":","源码","转化","自","(",")","本质","兴趣","改编","插件"," ","node","（","flask","介绍","web","_","之","将","）","，"],"title":"digimon","title_tokens":["digimon"]},{"location":"extension_guide/digimon/#scratch-demo","text":"Scratch digimon demo","text_tokens":[" ","scratch","demo","digimon"],"title":"Scratch Demo","title_tokens":[" ","scratch","demo"]},{"location":"extension_guide/eim/","text":"Tutorial ¶ 依赖 ¶ 安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器. 步骤 1：打开 Codelab Adapter ¶ 双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。 步骤 2：打开 Codelab Scratch3 ¶ 点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常 步骤 3：加载 EIM 插件 ¶ 在 Web UI 中点击加载 EIM 插件: eim 每秒钟更新一次数值，将数值报告给 Scratch3。 步骤 4：hello world ¶ 选择对应的 Scratch3 插件：EIM 我们可以让 Scratch3 的角色读出 EIM 每秒更新一次的数值：","text_tokens":["¶","团队","hello","现阶段","为","或者","更","页面","选择","让","多","目前","默认",":","打开","图中",",","scratch","步骤","陆续","支持","给","每秒","tutorial","firefox","一次","浏览器","eim","1","3",".","的","呈现","4","使用","codelab","在","阶段","连接","报告"," ","/","数值","我们","箭头","小圆点","之后","角色","说明","加载","将","点击","可以","秒钟","更新","这儿","。","效果","对应","官方","其设","world","与","双击","scratch3.0","如下","最佳","上","依赖","圆点","adapter","2","web","启动","scratch3","，","正常","中","建议","chrome","安装","版本","：","每秒钟","链接","ui","浏览","绿色","插件","读出","所指"],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/eim/#tutorial","text":"","text_tokens":[],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/eim/#_1","text":"安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器.","text_tokens":["团队","现阶段","为","更","效果","建议","chrome",".","官方","多","安装","其设","目前","版本","使用","默认","codelab","最佳","在","阶段","scratch","adapter","浏览","陆续"," ","支持","/","将","firefox","，","浏览器"],"title":"依赖","title_tokens":["依赖"]},{"location":"extension_guide/eim/#1-codelab-adapter","text":"双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。","text_tokens":[" ","浏览","打开","之后","启动","双击","。","默认","codelab","adapter","将","，","浏览器"],"title":"步骤 1：打开 Codelab Adapter","title_tokens":[" ","1","打开","：","步骤","codelab","adapter"]},{"location":"extension_guide/eim/#2-codelab-scratch3","text":"点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常","text_tokens":["这儿","或者","正常","页面","的","呈现","与","scratch3.0","如下","codelab","链接","上","ui",":","打开","图中",",","圆点","adapter","绿色","连接"," ","箭头","小圆点","web","所指","说明","scratch3","将","点击"],"title":"步骤 2：打开 Codelab Scratch3","title_tokens":[" ","打开","2","：","步骤","scratch3","codelab"]},{"location":"extension_guide/eim/#3-eim","text":"在 Web UI 中点击加载 EIM 插件: eim 每秒钟更新一次数值，将数值报告给 Scratch3。","text_tokens":["eim","秒钟","更新","。","一次","中","每秒钟","在","ui",":","报告"," ","插件","数值","给","web","每秒","加载","scratch3","将","点击","，"],"title":"步骤 3：加载 EIM 插件","title_tokens":[" ","eim","插件","：","步骤","3","加载"]},{"location":"extension_guide/eim/#4hello-world","text":"选择对应的 Scratch3 插件：EIM 我们可以让 Scratch3 的角色读出 EIM 每秒更新一次的数值：","text_tokens":[" ","插件","eim","我们","可以","读出","更新","数值","每秒","：","对应","角色","一次","scratch3","的","选择","让"],"title":"步骤 4：hello world","title_tokens":[" ","hello","world","：","4","步骤"]},{"location":"extension_guide/eim_monitor/","text":"EIM Monitor ¶ 插件介绍 ¶ 通过 extension_eim_monitor 插件， Scratcher 可以轻松使用 Python 拓展 Scratch 的能力。 当 extension_eim_monitor 启用时， 来自 Scratch EIM 插件的消息将被 ~/codelab_adapter/extensions/eim_monitor.py 脚本处理， 处理结果返回给 Scratch。 我们将这种对 Scratch 消息的响应机制称为 monitor 。 默认的脚本，会在Scratch的消息结尾加上 from monitor 并返回。 脚本源码 （简单的 Python 代码）为： def monitor ( content , logger ): return content + ' from monitor' 你可以随意修改 monitor 脚本代码，改变处理规则。 依赖 ¶ 安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器. 步骤 1：打开 Codelab Adapter ¶ 双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。 步骤 2：打开 Codelab Scratch3 ¶ 点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常 步骤 3：加载 extension_eim_monitor 插件 ¶ 在 Web UI 中点击加载 extension_eim_monitor 插件 步骤 4：hello world ¶ 选择对应的 Scratch3 插件：EIM 往 CodeLab Adapter 发送消息，观看 Python 对其的处理结果： 步骤 5：自定义 eim_monitor 逻辑 ¶ 修改 eim_monitor.py 代码后，需要重启勾选 extension_eim_monitor 插件。 运行 extension_eim_monitor 插件后， monitor 函数会被重复调用，通过修改 monitor 函数的返回值，可以让 Scratch 中发送任意数据。 Help 如何找到 eim_monitor.py 文件? ~/codelab_adapter/extensions/eim_monitor.py 其他用例 ¶ import webbrowser def monitor ( content , logger ): ''' 打开网页 ''' webbrowser . open ( content ) return \"ok\" 在 Scratch EIM 中传递消息 https://www.codelab.club 试试。 提醒 如果你想引入第三方库，请使用 node_eim_monitor. 参考 ¶ 使用 Python 拓展 Scratch 的能力","text_tokens":["¶","规则","团队","hello","参考","消息","为","现阶段","或者","逻辑","更","处理","脚本","页面","响应","选择","勾选","多","让","https","简单","往","目前","www","启用","机制","默认","后","其他",":","打开","图中","(",",","scratch","能力","步骤","调用","传递","陆续","支持","给","结尾","如何","轻松","_","试试","返回值","会","ok","firefox","你","浏览器","eim","1","代码","3","库","用例","的",".","网页","文件","呈现","4","使用","codelab","logger","help","在","阶段","任意","scratcher","monitor","时","函数",")","需要","连接"," ","/","我们","（","箭头","小圆点","之后","三方","观看","说明","来自","加载","python","将","）","对","点击","提醒","可以","称为","处理结果","这儿","py","'","。","效果","对应","return","官方","def","被","其设","world","结果","与","运行","from","双击","scratch3.0","如下","返回","最佳","当","自定义","?","上","想","依赖","源码","content","改变","请","圆点","adapter","并","修改","2","web","import","加上","拓展","启动","引入","extensions","scratch3","数据","\"","找到","通过","，","自定","+","定义","第三方","webbrowser","如果","正常","~","中","建议","chrome","open","安装","其","版本","随意","：","club","extension","第三","链接","重复","ui","发送","5","浏览","绿色","插件","node","这种","介绍","重启","所指"],"title":"EIM Monitor","title_tokens":["eim"," ","monitor"]},{"location":"extension_guide/eim_monitor/#eim-monitor","text":"","text_tokens":[],"title":"EIM Monitor","title_tokens":["eim"," ","monitor"]},{"location":"extension_guide/eim_monitor/#_1","text":"通过 extension_eim_monitor 插件， Scratcher 可以轻松使用 Python 拓展 Scratch 的能力。 当 extension_eim_monitor 启用时， 来自 Scratch EIM 插件的消息将被 ~/codelab_adapter/extensions/eim_monitor.py 脚本处理， 处理结果返回给 Scratch。 我们将这种对 Scratch 消息的响应机制称为 monitor 。 默认的脚本，会在Scratch的消息结尾加上 from monitor 并返回。 脚本源码 （简单的 Python 代码）为： def monitor ( content , logger ): return content + ' from monitor' 你可以随意修改 monitor 脚本代码，改变处理规则。","text_tokens":["eim","可以","+","称为","处理结果","规则","消息","py","代码","为","'","。","~","处理","return","脚本","通过","的",".","响应","def","你","简单","被","结果","启用","from","：","随意","机制","使用","默认","返回","codelab","logger","当","extension","在",":","源码","content","scratcher","monitor","时","(","）","scratch","能力",",",")","改变","adapter","并","修改"," ","插件","/","我们","（","给","这种","结尾","加上","拓展","轻松","_","来自","会","extensions","python","将","对","，"],"title":"插件介绍","title_tokens":["插件","介绍"]},{"location":"extension_guide/eim_monitor/#_2","text":"安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器.","text_tokens":["团队","现阶段","为","更","效果","建议","chrome",".","官方","多","安装","其设","目前","版本","使用","默认","codelab","最佳","在","阶段","scratch","adapter","浏览","陆续"," ","支持","/","将","firefox","，","浏览器"],"title":"依赖","title_tokens":["依赖"]},{"location":"extension_guide/eim_monitor/#1-codelab-adapter","text":"双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。","text_tokens":[" ","浏览","打开","之后","启动","双击","。","默认","codelab","adapter","将","，","浏览器"],"title":"步骤 1：打开 Codelab Adapter","title_tokens":[" ","1","打开","：","步骤","codelab","adapter"]},{"location":"extension_guide/eim_monitor/#2-codelab-scratch3","text":"点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常","text_tokens":["这儿","或者","正常","页面","的","呈现","与","scratch3.0","如下","codelab","链接","上","ui",":","打开","图中",",","圆点","adapter","绿色","连接"," ","箭头","小圆点","web","所指","说明","scratch3","将","点击"],"title":"步骤 2：打开 Codelab Scratch3","title_tokens":[" ","打开","2","：","步骤","scratch3","codelab"]},{"location":"extension_guide/eim_monitor/#3-extension_eim_monitor","text":"在 Web UI 中点击加载 extension_eim_monitor 插件","text_tokens":[" ","在","eim","插件","ui","web","monitor","_","中","加载","点击","extension"],"title":"步骤 3：加载 extension_eim_monitor 插件","title_tokens":[" ","eim","插件","：","monitor","_","步骤","3","加载","extension"]},{"location":"extension_guide/eim_monitor/#4hello-world","text":"选择对应的 Scratch3 插件：EIM 往 CodeLab Adapter 发送消息，观看 Python 对其的处理结果：","text_tokens":["eim","处理结果","消息","对应","处理","的","选择","其","往","结果","：","codelab","发送","adapter"," ","插件","观看","scratch3","python","对","，"],"title":"步骤 4：hello world","title_tokens":[" ","hello","world","：","4","步骤"]},{"location":"extension_guide/eim_monitor/#5-eim_monitor","text":"修改 eim_monitor.py 代码后，需要重启勾选 extension_eim_monitor 插件。 运行 extension_eim_monitor 插件后， monitor 函数会被重复调用，通过修改 monitor 函数的返回值，可以让 Scratch 中发送任意数据。 Help 如何找到 eim_monitor.py 文件? ~/codelab_adapter/extensions/eim_monitor.py","text_tokens":["eim","可以","py","代码","。","中","~","通过",".","的","勾选","让","文件","被","运行","返回","codelab","后","extension","?","重复","help","任意","monitor","函数","scratch","调用","发送","adapter","需要","修改"," ","插件","/","重启","如何","_","返回值","会","extensions","数据","找到","，"],"title":"步骤 5：自定义 eim_monitor 逻辑","title_tokens":[" ","自定","eim","定义","：","monitor","_","逻辑","步骤","5","自定义"]},{"location":"extension_guide/eim_monitor/#_3","text":"import webbrowser def monitor ( content , logger ): ''' 打开网页 ''' webbrowser . open ( content ) return \"ok\" 在 Scratch EIM 中传递消息 https://www.codelab.club 试试。 提醒 如果你想引入第三方库，请使用 node_eim_monitor.","text_tokens":["eim","第三方","消息","webbrowser","'","。","如果","中","库","return","open",".","网页","def","https","www","club","使用","codelab","logger","第三","在","想",":","打开","content","monitor","(",",",")","scratch","请","传递"," ","/","node","，","import","三方","_","试试","引入","ok","\"","提醒","你"],"title":"其他用例","title_tokens":["用例","其他"]},{"location":"extension_guide/eim_monitor/#_4","text":"使用 Python 拓展 Scratch 的能力","text_tokens":[" ","拓展","scratch","使用","能力","python","的"],"title":"参考","title_tokens":["参考"]},{"location":"extension_guide/eim_trigger/","text":"EIM Trigger ¶ 插件介绍 ¶ 通过 extension_eim_trigger 插件， Scratcher 可以轻松使用 Python 拓展 Scratch 的能力。 extension_eim_trigger 通过调用 ~/codelab_adapter/extensions/eim_trigger.py 脚本，往 Scratch 发送消息。 我们将其称为消息的触发机制( trigger )。 默认的脚本，每隔 1s，往 Scratch 中发送一次时间戳， 脚本源码 （简单的 Python 代码）为： import time def trigger (): timestamp = time . time () time . sleep ( 1 ) return timestamp 你可以随意修改 trigger 脚本代码，往 Scratch 中发送任意数据。 依赖 ¶ 安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器. 步骤 1：打开 Codelab Adapter ¶ 双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。 步骤 2：打开 Codelab Scratch3 ¶ 点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常 步骤 3：加载 extension_eim_trigger 插件 ¶ 在 Web UI 中点击加载 extension_eim_trigger 插件 步骤 4：hello world ¶ 开启 extension_eim_trigger 插件后 选择对应的 Scratch3 插件：EIM 让 Scratch3 的角色读出每秒更新一次的时间戳： 步骤 5：自定义 eim_trigger 逻辑 ¶ 默认的逻辑是 每秒更新一次时间戳 ，相应代码为： import time def trigger (): timestamp = time . time () time . sleep ( 1 ) return timestamp 运行 extension_eim_trigger 插件后， trigger 函数会被重复调用，通过修改 trigger 函数的返回值，可以让 Scratch 中发送任意数据。 Help 如何找到 eim_trigger.py 文件? ~/codelab_adapter/extensions/eim_trigger.py 其他用例 ¶ import time i = 0 def trigger (): global i i += 1 time . sleep ( 1 ) return i 参考 ¶ 使用 Python 拓展 Scratch 的能力","text_tokens":["¶","团队","hello","参考","消息","为","现阶段","或者","逻辑","更","脚本","页面","选择","让","多","简单","往","目前","机制","触发","默认","后","trigger","其他",":","打开","图中","(",",","scratch","能力","调用","步骤","陆续","支持","每秒","如何","轻松","_","返回值","会","firefox","一次","你","浏览器","eim","1","代码","3","是","用例","的",".","戳","文件","呈现","4","使用","codelab","开启","1s","help","在","阶段","任意","scratcher","函数",")","连接"," ","/","我们","（","箭头","小圆点","之后","角色","说明","加载","python","将","）","点击","i","可以","称为","更新","这儿","py","。","效果","对应","return","官方","def","被","其设","world","与","运行","双击","scratch3.0","如下","返回","最佳","自定义","?","上","依赖","源码","圆点","adapter","修改","2","web","import","拓展","启动","0","sleep","extensions","scratch3","数据","找到","time","通过","，","自定","+","定义","正常","~","中","建议","chrome","安装","其","版本","每隔","随意","：","extension","链接","重复","=","ui","global","发送","相应","5","浏览","绿色","插件","读出","介绍","timestamp","所指","时间"],"title":"EIM Trigger","title_tokens":["eim"," ","trigger"]},{"location":"extension_guide/eim_trigger/#eim-trigger","text":"","text_tokens":[],"title":"EIM Trigger","title_tokens":["eim"," ","trigger"]},{"location":"extension_guide/eim_trigger/#_1","text":"通过 extension_eim_trigger 插件， Scratcher 可以轻松使用 Python 拓展 Scratch 的能力。 extension_eim_trigger 通过调用 ~/codelab_adapter/extensions/eim_trigger.py 脚本，往 Scratch 发送消息。 我们将其称为消息的触发机制( trigger )。 默认的脚本，每隔 1s，往 Scratch 中发送一次时间戳， 脚本源码 （简单的 Python 代码）为： import time def trigger (): timestamp = time . time () time . sleep ( 1 ) return timestamp 你可以随意修改 trigger 脚本代码，往 Scratch 中发送任意数据。","text_tokens":["eim","可以","称为","时间","1","time","py","消息","代码","为","。","一次","~","中","return","脚本","通过","的",".","戳","def","你","其","简单","往","每隔","随意","：","机制","使用","触发","默认","codelab","extension","1s","trigger","=",":","源码","任意","scratcher","(","scratch","能力","调用","发送",")","adapter","修改"," ","插件","/","我们","（","timestamp","import","拓展","轻松","_","sleep","数据","extensions","python","将","）","，"],"title":"插件介绍","title_tokens":["插件","介绍"]},{"location":"extension_guide/eim_trigger/#_2","text":"安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器.","text_tokens":["团队","现阶段","为","更","效果","建议","chrome",".","官方","多","安装","其设","目前","版本","使用","默认","codelab","最佳","在","阶段","scratch","adapter","浏览","陆续"," ","支持","/","将","firefox","，","浏览器"],"title":"依赖","title_tokens":["依赖"]},{"location":"extension_guide/eim_trigger/#1-codelab-adapter","text":"双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。","text_tokens":[" ","浏览","打开","之后","启动","双击","。","默认","codelab","adapter","将","，","浏览器"],"title":"步骤 1：打开 Codelab Adapter","title_tokens":[" ","1","打开","：","步骤","codelab","adapter"]},{"location":"extension_guide/eim_trigger/#2-codelab-scratch3","text":"点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常","text_tokens":["这儿","或者","正常","页面","的","呈现","与","scratch3.0","如下","codelab","链接","上","ui",":","打开","图中",",","圆点","adapter","绿色","连接"," ","箭头","小圆点","web","所指","说明","scratch3","将","点击"],"title":"步骤 2：打开 Codelab Scratch3","title_tokens":[" ","打开","2","：","步骤","scratch3","codelab"]},{"location":"extension_guide/eim_trigger/#3-extension_eim_trigger","text":"在 Web UI 中点击加载 extension_eim_trigger 插件","text_tokens":[" ","在","eim","插件","ui","web","_","中","加载","点击","extension","trigger"],"title":"步骤 3：加载 extension_eim_trigger 插件","title_tokens":[" ","eim","插件","：","_","步骤","3","加载","extension","trigger"]},{"location":"extension_guide/eim_trigger/#4hello-world","text":"开启 extension_eim_trigger 插件后 选择对应的 Scratch3 插件：EIM 让 Scratch3 的角色读出每秒更新一次的时间戳：","text_tokens":["eim","更新","对应","的","选择","让","戳","：","后","extension","开启","trigger"," ","插件","读出","每秒","_","角色","scratch3","时间","一次"],"title":"步骤 4：hello world","title_tokens":[" ","hello","world","：","4","步骤"]},{"location":"extension_guide/eim_trigger/#5-eim_trigger","text":"默认的逻辑是 每秒更新一次时间戳 ，相应代码为： import time def trigger (): timestamp = time . time () time . sleep ( 1 ) return timestamp 运行 extension_eim_trigger 插件后， trigger 函数会被重复调用，通过修改 trigger 函数的返回值，可以让 Scratch 中发送任意数据。 Help 如何找到 eim_trigger.py 文件? ~/codelab_adapter/extensions/eim_trigger.py","text_tokens":["eim","可以","更新","1","time","代码","为","py","逻辑","。","一次","是","中","~","return","通过","的",".","让","def","戳","文件","被","运行","：","默认","返回","codelab","后","extension","?","trigger","重复","help","=",":","任意","函数","(",")","调用","scratch","发送","相应","adapter","修改"," ","插件","/","每秒","timestamp","import","如何","sleep","_","数据","返回值","会","extensions","时间","找到","，"],"title":"步骤 5：自定义 eim_trigger 逻辑","title_tokens":[" ","自定","eim","定义","：","逻辑","_","步骤","5","自定义","trigger"]},{"location":"extension_guide/eim_trigger/#_3","text":"import time i = 0 def trigger (): global i i += 1 time . sleep ( 1 ) return i","text_tokens":[" ","+",".","=",":","global","1","import","trigger","0","(","sleep",")","return","i","time","def"],"title":"其他用例","title_tokens":["用例","其他"]},{"location":"extension_guide/eim_trigger/#_4","text":"使用 Python 拓展 Scratch 的能力","text_tokens":[" ","拓展","scratch","使用","能力","python","的"],"title":"参考","title_tokens":["参考"]},{"location":"extension_guide/etoys/","text":"Etoys ¶ 介绍 ¶ Etoys 是: 一种教育工具，向孩子们传授强大的思想(powerful ideas) 丰富的媒体创作环境和可视化编程系统 开放系统，几乎适用于所有个人电脑 Etoys 的开发始于迪斯尼，由艾伦·凯（Alan Kay）主导，受 Seymour Papert 的 Logo 语言影响，支持建构主义学习。 开发团队包括：Scott Wallace、Ted Kaehler、John Maloney 和 Dan Ingalls。 极大影响了 Scratch（John Maloney 是 Scratch 的首席架构师） 截图 ¶ 接入 Adapter ¶ Etoys 的最后一次更新是 2012 年（5.0 版本）。 我们试图通过将其接入 Adatper，使其得到 Adapter 连接的整个生态：物联网、AI、开源硬件... 使 Etoys 强大的表达能力与新的技术融合。 思路 ¶ 接入的思路是\"hack\"。 Etoys与外部通信的方式并不多，在 百宝箱 里，仅发现了Scratch客户端，可以与外部通信。 于是我们通过将 Adapter 伪装成 Scratch 1.3，来与Etoys通信，消息流向是( Etoys->Adatper->Scratch3.0 ) 由于百宝箱里的 Scratch客户端是socket client，所以更复杂的通信也是可能的，但 Etoys->Adatper->Scratch3.0 是我自己的典型使用场景。 更多细节参考: Etoys 学习笔记: 与 Scratch 互操作 . 也欢迎你自己进行hack ：） 使用 ¶ 使用方式很简单，在Adapter 中开启 extension_socket_server 插件（如果不存在该插件，到 插件市场 下载即可），源码在 extension_socket_server.py 开启插件后，加载demo程序，并点击绿旗运行它。 Scratch-Etoys 之后在 Etoys 里使用 broadcask 积木 即可： 提醒 在使用具体积木时，需要先建立连接，点击 Etoys里Scratch客户端即可，如果连接顺利，猫的眼睛会睁开。 以下是一个简单的例子： 使用Etoys里的按钮打开本地目录和CodeLab主页，背后利用到了 Adapter Python Extension的能力: 一切都是消息！ Etoys 与 Scratch 对比 ¶ Scratch适合入门，它通过给定清晰的结构，提供更多确定性，让入门变得容易（不必担心搞乱环境）。 随着项目变得更复杂，Etoys是更理想的选择，因其拥有继承自Smalltalk的强大环境和表达能力，惊人的一致性，彻底的面向对象，随着项目逐渐生长，复杂度总是在可控的范围内(因为消息-对象隐喻）。 随着项目变得复杂，Scratch用户需要掌握越来越多的“技巧”，编程成为一件搜罗和记忆许多技巧（特例）的乏味工作（就像传统计算机教育），环境无法提供更多的支持。 Etoys/Squeak 为“Scratch下一步是什么？”提供了理想的答案: Scratch -> Etoys -> Squeak(Smalltalk) 教育者 ¶ Alan Kay 和 Etoys社区围绕Etoys写了许多精彩的文章，推荐阅读。也许是有史以来关于向孩子传授 powerful ideas 最精彩的文章之一。 诸如: Squeak Etoys Authoring & Media Kedama: A GUI-based Interactive Massively Parallel Particle Programming System 更多文章可以从 Etoy resources 和 Viewpoints Research Institute 里找 进阶 ¶ 你可以参考 Etoys 学习笔记: 与 Scratch 互操作 自行构建功能更丰富的Server，使用 Adapter Node 将其接入Adapter生态。 参考 ¶ Etoys 学习笔记: 与 Scratch 互操作","text_tokens":["a","参考","消息","hack","可视","得到","具体","·","先","smalltalk","向","范围","后","个人","发现","技巧","整个","新","有史以来","联网","由","市场","scratch","etoys","电脑","搞乱","睁开","_","笔记","gui","resources","结构","一件","教育","变得复杂","以下","围绕","kay","里","它","我们","最后","加载","...","将","python","理想","积木","点击","可能","更新","答案","logo","工作","media","影响","传统","ted","maloney","自","particle","本地","并","-","像","社区","\"","顺利","和","research","kaehler","如果","viewpoints","其","例子","孩子","自己","extension","年","之一","目录","kedama","架构师","client","介绍","找","内","5.0","容易","外部","清晰","开发","掌握","欢迎","不必","方式","面向对象",":","打开","能力","继承","表达能力","但","定性","最","即可","于","主导","对象","开源","server","由于","眼睛","自行",">","在","伪装成","时","以来","需要","连接"," ","之后","截图","复杂度","提醒","极大","教育者","。","一致性","开放系统","始于","推荐","开放","创作","学习","一切都是","拥有","ideas","wallace","很","操作","powerful","broadcask","媒体","诸如","从","百宝箱","1.3","细节","思想","下载","：","程序","环境","特例","scott","建构","papert","思路","squeak","建构主义","插件","node","用户","彻底","变得","写","¶","更","institute","选择","让","多","语言","系统","programming","计算机","！","构建","强大","(","一步","背后","因","确定","对比","许多","乏味","成为","会","因为","所有","一次","接入","是","表达","文章","的","也许","首席","给定","项目","记忆","codelab","开启","可视化","融合","迪斯尼",")","编程","宝箱","/","可以","“","们","包括","适合","仅","”","硬件","与","通信","一种","所以","不多","适用","一个","装成","下","来","adapter","一切","massively","传授","隐喻","system","阅读","ai","通过","socket","技术","工具","流向","中","可控","版本","什么","利用","了","按钮","无法","受","etoy","进阶","并不多","客户端","猫","总是","使","越来越","功能","团队","互操作","为","、","越来","绿旗","不","？","简单","进行","凯","到","支持","demo","关于","计算","你","算机","典型","alan","&","建立",".","伪装","一致","john","使用","authoring","惊人","几乎","精彩","dan","（","生长","based","搜罗","）","随着","py","存在","该","我","确定性","复杂","运行","艾伦","scratch3.0","ingalls","interactive","seymour","也","面向","2012","源码","于是","parallel","生态","主页","，","场景","adatper","百宝","物","主义","逐渐","试图","入门","就","丰富","个人电脑","计算机教育","担心","提供","架构","客户"],"title":"Etoys","title_tokens":["etoys"]},{"location":"extension_guide/etoys/#etoys","text":"","text_tokens":[],"title":"Etoys","title_tokens":["etoys"]},{"location":"extension_guide/etoys/#_1","text":"Etoys 是: 一种教育工具，向孩子们传授强大的思想(powerful ideas) 丰富的媒体创作环境和可视化编程系统 开放系统，几乎适用于所有个人电脑 Etoys 的开发始于迪斯尼，由艾伦·凯（Alan Kay）主导，受 Seymour Papert 的 Logo 语言影响，支持建构主义学习。 开发团队包括：Scott Wallace、Ted Kaehler、John Maloney 和 Dan Ingalls。 极大影响了 Scratch（John Maloney 是 Scratch 的首席架构师）","text_tokens":["团队","、","可视","开发","·","语言","凯","向","个人",":","系统","由","强大","(","scratch","etoys","电脑","支持","所有","alan","于","是","教育","主导","的","首席","john","可视化","kay","几乎","迪斯尼",")","编程","dan"," ","（","）","极大","们","包括","logo","。","开放系统","始于","艾伦","一种","ingalls","影响","开放","适用","创作","学习","seymour","ted","maloney","传授","ideas","wallace","powerful","，","和","媒体","kaehler","工具","思想","孩子","主义","：","环境","了","scott","建构","丰富","papert","受","个人电脑","架构师","建构主义","架构"],"title":"介绍","title_tokens":["介绍"]},{"location":"extension_guide/etoys/#_2","text":"","text_tokens":[],"title":"截图","title_tokens":["截图"]},{"location":"extension_guide/etoys/#adapter","text":"Etoys 的最后一次更新是 2012 年（5.0 版本）。 我们试图通过将其接入 Adatper，使其得到 Adapter 连接的整个生态：物联网、AI、开源硬件... 使 Etoys 强大的表达能力与新的技术融合。","text_tokens":["更新","接入","ai","技术","adatper","5.0","。","一次","、","是","表达","的","得到","物","其","开源","硬件","版本","与","：","试图","年","整个","新","2012","使","融合","联网","强大","能力","adapter","etoys","连接"," ","（","我们","表达能力","生态","，","最后","...","将","）","通过"],"title":"接入 Adapter","title_tokens":[" ","接入","adapter"]},{"location":"extension_guide/etoys/#_3","text":"接入的思路是\"hack\"。 Etoys与外部通信的方式并不多，在 百宝箱 里，仅发现了Scratch客户端，可以与外部通信。 于是我们通过将 Adapter 伪装成 Scratch 1.3，来与Etoys通信，消息流向是( Etoys->Adatper->Scratch3.0 ) 由于百宝箱里的 Scratch客户端是socket client，所以更复杂的通信也是可能的，但 Etoys->Adatper->Scratch3.0 是我自己的典型使用场景。 更多细节参考: Etoys 学习笔记: 与 Scratch 互操作 . 也欢迎你自己进行hack ：）","text_tokens":["可以","socket","接入","参考","场景","典型","消息","adatper","互操作","。","更","是","hack","外部","百宝箱","流向","通过","仅","1.3","百宝","的","复杂","我","伪装","多","细节",".","你","进行","与","欢迎","通信","自己","：","scratch3.0","所以","方式","由于","不多","了","使用",">","学习","装成","发现","在","也","可能",":","里","于是","伪装成","思路","(","scratch","来",")","adapter","etoys","宝箱"," ","并不多","客户端","我们","-","client","但","操作","将","笔记","）","\"","，","客户"],"title":"思路","title_tokens":["思路"]},{"location":"extension_guide/etoys/#_4","text":"使用方式很简单，在Adapter 中开启 extension_socket_server 插件（如果不存在该插件，到 插件市场 下载即可），源码在 extension_socket_server.py 开启插件后，加载demo程序，并点击绿旗运行它。 Scratch-Etoys 之后在 Etoys 里使用 broadcask 积木 即可： 提醒 在使用具体积木时，需要先建立连接，点击 Etoys里Scratch客户端即可，如果连接顺利，猫的眼睛会睁开。 以下是一个简单的例子： 使用Etoys里的按钮打开本地目录和CodeLab主页，背后利用到了 Adapter Python Extension的能力: 一切都是消息！","text_tokens":["消息","绿旗","具体","不","简单","先","方式","后",":","打开","！","市场","到","scratch","能力","背后","etoys","demo","睁开","_","会","即可","是","建立",".","的","以下","server","使用","眼睛","codelab","开启","在","它","里","时","需要","连接"," ","（","之后","加载","python","）","积木","提醒","点击","py","。","存在","该","运行","一个","一切都是","源码","本地","adapter","一切","并","-","很","主页","，","顺利","socket","broadcask","和","如果","中","例子","下载","：","利用","程序","了","extension","按钮","目录","插件","客户端","猫","客户"],"title":"使用","title_tokens":["使用"]},{"location":"extension_guide/etoys/#etoys-scratch","text":"Scratch适合入门，它通过给定清晰的结构，提供更多确定性，让入门变得容易（不必担心搞乱环境）。 随着项目变得更复杂，Etoys是更理想的选择，因其拥有继承自Smalltalk的强大环境和表达能力，惊人的一致性，彻底的面向对象，随着项目逐渐生长，复杂度总是在可控的范围内(因为消息-对象隐喻）。 随着项目变得复杂，Scratch用户需要掌握越来越多的“技巧”，编程成为一件搜罗和记忆许多技巧（特例）的乏味工作（就像传统计算机教育），环境无法提供更多的支持。 Etoys/Squeak 为“Scratch下一步是什么？”提供了理想的答案: Scratch -> Etoys -> Squeak(Smalltalk)","text_tokens":["内","消息","为","容易","更","越来","选择","清晰","让","多","？","掌握","smalltalk","不必","范围","面向对象","技巧",":","计算机","强大","(","scratch","能力","一步","etoys","搞乱","因","继承","表达能力","支持","确定","许多","乏味","定性","成为","因为","计算","算机","结构","一件","是","表达","教育","对象","的","给定","一致","变得复杂","项目","记忆",">","在","惊人","它",")","编程","需要","（"," ","/","生长","复杂度","搜罗","理想","）","“","随着","答案","适合","。","工作","一致性","确定性","复杂","”","面向","传统","下","自","拥有","-","像","隐喻","，","通过","和","可控","其","逐渐","什么","环境","特例","了","入门","就","无法","squeak","计算机教育","担心","用户","彻底","提供","变得","总是","越来越"],"title":"Etoys 与 Scratch 对比","title_tokens":[" ","与","对比","scratch","etoys"]},{"location":"extension_guide/etoys/#_5","text":"Alan Kay 和 Etoys社区围绕Etoys写了许多精彩的文章，推荐阅读。也许是有史以来关于向孩子传授 powerful ideas 最精彩的文章之一。 诸如: Squeak Etoys Authoring & Media Kedama: A GUI-based Interactive Massively Parallel Particle Programming System 更多文章可以从 Etoy resources 和 Viewpoints Research Institute 里找","text_tokens":["可以","gui","和","a","resources","research","alan","。","诸如","更","从","是","&","institute","viewpoints","文章","的","多","也许","media","孩子","向","interactive","了","推荐","authoring","之一","围绕","kay","有史以来",":","programming","里","以来","精彩","particle","kedama","squeak","etoys","massively","传授","ideas","etoy"," ","-","parallel","社区","许多","based","system","关于","最","阅读","找","powerful","，","写"],"title":"教育者","title_tokens":["教育者","教育"]},{"location":"extension_guide/etoys/#_6","text":"你可以参考 Etoys 学习笔记: 与 Scratch 互操作 自行构建功能更丰富的Server，使用 Adapter Node 将其接入Adapter生态。","text_tokens":["可以","接入","参考","互操作","更","。","的","其","与","server","使用","自行","学习","丰富",":","构建","scratch","adapter","etoys"," ","node","生态","，","操作","将","笔记","你","功能"],"title":"进阶","title_tokens":["进阶"]},{"location":"extension_guide/etoys/#_7","text":"Etoys 学习笔记: 与 Scratch 互操作","text_tokens":[" ",":","与","互操作","scratch","操作","笔记","etoys","学习"],"title":"参考","title_tokens":["参考"]},{"location":"extension_guide/extension_market/","text":"Extension Market ¶ CodeLab Adapter 3.0 有一个统一的插件市场，可以方便下载到新的插件，就像我们在 vscode 或 sublime text 里的体验的那种插件系统，有个体面的 UI，而不是使用 curl 或者 wget 去 github 里手动下载。 作为演示我们下载了插件市场里的一个番茄工作法插件，这个插件的功能很简单(源码也是公开的): 每 25 分钟提醒编程者起来看看窗外风景。 下载完成之后，不需要重启软件，即可在 Scratch 和 Web UI 中看到新下载的插件，点击运行它：每 25 分钟，你就会收到一条信息提示你做个短途休息。 提交自定义插件到插件市场 ¶ 只需要将你自定义的 Adapter Extension 或者 Adapter Node 提交到 codelab_adapter_extensions , 提交合并之后，它将出现在插件市场中。 提醒 3.1.0 版本增加了对 Adapter Node 的支持。Adapter Node 脚本可以托管在互联网的任何位置。 这是目前所有可用的插件都在： codelab_adapter_extensions 。源码以 GPL 协议开放。研究与学习可以随意使用它。 codelab.club 内部在使用的一些插件近期也在整理源码，将陆续开放出来。欢迎大家一起改进它们。 你可以用这些插件将 Scratch 3.0/blockly: 接入 Python kernel 接入四轴飞行器 接入 Cozmo/Vector 接入任何用 Python 写的 AI 程序 接入眼动仪 接入 Minecraft 接入 blender ……","text_tokens":["¶","text","提交","或者","脚本","不","简单","飞行器","目前","欢迎","github","cozmo","去","新",":","系统","演示","完成","增加","托管","联网","市场","这些","到","(","scratch",",","陆续","法","支持","3.0","可用","vscode","做","_","统一","会","所有","你","kernel","内部","接入","者","gpl","即可","只","休息","…","有","是","位置","近期","vector","sublime","的",".","合并","整理","一条","而","使用","codelab","收到","有个","短途","它们","风景","在","以","里","它","这是",")","编程","需要"," ","/","我们","体面","那种","之后","一起","窗外","25","将","出现","对","提醒","点击","公开","都","python","可以","看看","。","工作","不是","运行","与","大家","协议","开放","互联网","出来","一个","自定义","学习","用","也","源码","看到","minecraft","作为","adapter","手动","提示","研究","信息","3.1","blender","一些","很","四轴","像","web","或","0","软件","飞行","extensions","ai","，","自定","和","定义","改进","任何","体验","wget","中","互联","分钟","下载","版本","market","番茄","随意","：","club","程序","了","每","起来","extension","就","blockly","ui","这个","个","方便","插件","node","眼动仪","重启","curl","写","功能"],"title":"extension market","title_tokens":[" ","extension","market"]},{"location":"extension_guide/extension_market/#extension-market","text":"CodeLab Adapter 3.0 有一个统一的插件市场，可以方便下载到新的插件，就像我们在 vscode 或 sublime text 里的体验的那种插件系统，有个体面的 UI，而不是使用 curl 或者 wget 去 github 里手动下载。 作为演示我们下载了插件市场里的一个番茄工作法插件，这个插件的功能很简单(源码也是公开的): 每 25 分钟提醒编程者起来看看窗外风景。 下载完成之后，不需要重启软件，即可在 Scratch 和 Web UI 中看到新下载的插件，点击运行它：每 25 分钟，你就会收到一条信息提示你做个短途休息。","text_tokens":["text","或者","不","简单","github","去","新",":","系统","演示","完成","市场","到","(","scratch","法","3.0","vscode","做","统一","会","你","者","即可","休息","有","是","sublime","的","一条","而","使用","codelab","收到","有个","短途","风景","在","里","它",")","编程","需要"," ","我们","体面","那种","之后","窗外","25","提醒","点击","公开","可以","看看","。","工作","不是","运行","一个","也","源码","看到","作为","adapter","手动","提示","信息","很","像","web","或","软件","，","和","体验","wget","中","分钟","下载","番茄","：","了","每","起来","就","ui","这个","个","方便","插件","重启","curl","功能"],"title":"Extension Market","title_tokens":[" ","extension","market"]},{"location":"extension_guide/extension_market/#_1","text":"只需要将你自定义的 Adapter Extension 或者 Adapter Node 提交到 codelab_adapter_extensions , 提交合并之后，它将出现在插件市场中。 提醒 3.1.0 版本增加了对 Adapter Node 的支持。Adapter Node 脚本可以托管在互联网的任何位置。 这是目前所有可用的插件都在： codelab_adapter_extensions 。源码以 GPL 协议开放。研究与学习可以随意使用它。 codelab.club 内部在使用的一些插件近期也在整理源码，将陆续开放出来。欢迎大家一起改进它们。 你可以用这些插件将 Scratch 3.0/blockly: 接入 Python kernel 接入四轴飞行器 接入 Cozmo/Vector 接入任何用 Python 写的 AI 程序 接入眼动仪 接入 Minecraft 接入 blender ……","text_tokens":["提交","或者","脚本","飞行器","目前","欢迎","cozmo","托管",":","这些","增加","联网","市场","到",",","scratch","陆续","支持","3.0","可用","_","所有","你","kernel","内部","接入","gpl","只","…","近期","位置","vector","的",".","合并","整理","使用","codelab","它们","在","以","它","这是","需要"," ","/","之后","一起","将","python","对","出现","提醒","都","可以","。","与","大家","协议","开放","互联网","出来","自定义","学习","用","也","源码","minecraft","adapter","研究","blender","3.1","一些","四轴","0","飞行","extensions","ai","，","自定","定义","改进","任何","中","互联","版本","随意","：","club","程序","了","extension","blockly","插件","node","眼动仪","写"],"title":"提交自定义插件到插件市场","title_tokens":["自定","提交","插件","定义","市场","到","自定义"]},{"location":"extension_guide/extension_python_kernel/","text":"Python eval kernel ¶ 依赖 ¶ 安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器. 步骤 1：打开 Codelab Adapter ¶ 双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。 步骤 2：打开 Codelab Scratch3 ¶ 点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常 步骤 3：hello world ¶ 选择对应的 Scratch3 插件：Python 插件 在 Scratch Python 插件里使用 插件启停积木 启动 CodeLab Adapter Python 插件。 执行 Python 代码: Python 插件将以 eval 执行 Python 代码(只能执行表达式)，如果你想使用 exec ，文末有指导。 你可以在插件中添加新的类，来自定义新功能, 我们做了一个范例: PyHelper 源码 。你可以使用 PyHelper.open_url(\"https://www.codelab.club\") 来为 Scratch 引入打开网页的功能。 你甚至可以更进一步，在 Scratch 中自定义积木！不需要编程 JavaScript，通过 Python 来扩展 Scratch！让我们构建一个打开网页的积木（Scratch本身没有打开网页的功能）: 点击制作新的积木: 制作自定义积木， 添加输入项目 : url 参数. 接下来我们开始定义这个积木的功能，完成之后我们就可以使用它了 以上例子的功能是按下空格，打开 CodeLab 主页。 你可以在插件里添加更多的类似 PyHelper 的自定义类，来为 Scratch 引入更多新的能力，使用 Python 就行！ 延伸 ¶ 再来做一个例子， @HansonXie 给我写了封邮件，说想写一个extension或者node来进行文件存储，希望用Python来做，而不是Javascript。在此我写个简单例子 我们可以使用 Jupyterlab 编辑 extension_python.py . 在其中增加一个新的助手类，来负责存储文件 class StorageHelp : def save_text_to_file ( text , filename ): with open ( filename , \"w\" ): filename . write ( text ) 之后,将其添加到eval中（使其可用)。 eval ( code , { \"__builtins__\" : None }, { \"PyHelper\" : self . PyHelper , \"StorageHelp\" : StorageHelp () }) 完成后，重新勾选extension_python.py（stop and start，不需要重启 Adapter）。 此次，自定义的积木，包括两个参数：存储的文本(text) 和 文件名(filename) 提醒 注意文件名和内容都是字符串，有引号 \"xxxxx\" 点击运行新的积木, 在jupyterlab中，可以看到新创建的文件已经在 extensions 目录里 提醒 exec 可能带来各种安全风险，暂时将其从插件市场移走了。eval也更符合我们采用的 对象/消息 隐喻。 如果你确实需要exec，可以自行构建插件， 参考 python_exec.py 内置在 Adapter 里的 Python 插件以 eval 执行 Python 代码(只能执行表达式)，如果你希望以功能更轻大的 exec (可执行任何 Python 语句)执行 Python 代码，可以在 插件市场 里下载 extension_python_exec 插件 。 关于 eval 和 exec 的区别，参考: 深度辨析 Python 的 eval() 与 exec() What's the difference between eval, exec, and compile? 我们之没有将 extension_python_exec 内置在 Adapter 中，而是希望用户在需要时自行下载，因为它的功能过于强大，可能会带来一下风险，所以选择权交由使用者。强大的能力通常会伴随风险，当然我们不会做太多限制，由你决定：） 参考 ¶ 将 codelab-adapter 用作 Python 解释器","text_tokens":["参考","消息","code","页面","后","接下来","新","增加","写个","新创","市场","由","scratch","陆续","}","做太多","给","_","各种","1","3","网页","文件","to","以","里","它","我们","用者","来自","注意","python","将","更轻大","积木","点击","可能","'","空格","不是","语句","官方","双击","用","看到","圆点","此次","希望","-","启动","助手","\"","difference","和","如果","正常","深度","安装","其","例子","club","extension","eval","目录","url","定义新","延伸","已经","所指","text","按","创建","目前","save","释器","类似",":","打开","其中","能力","步骤","执行","负责","可用","不会","使用者","浏览器","代码","write","文末","带来","对象","file","封","选择权","呈现","xxxxx","storagehelp","而","自行","而是","在","时","确实","需要","连接"," ","箭头","之后","提醒","解释","。","输入","def","world","存储","表达式","自定义","以上","web","解释器","the","此","任何","从","建议","下载","：","and","重新","新创建","浏览","下来","插件","开始","node","用户","with","写","¶","hello","符合","现阶段","更","选择","让","多","邮件","start","www","默认","hansonxie","两个","图中","！","构建","(",",","更轻","一步","强大","内容","filename","会","因为","firefox","pyhelper","是","表达","就行","的","项目","codelab","过于","一下","可","@",")","辨析","编程","exec","太多","/","说明","可以","这儿","启停","包括","引号","进一步","接下","其设","与","所以","如下","最佳","一个","?","达式","下","通常","来","adapter","当然","2","扩展","隐喻","文件名","scratch3","extensions","内置","通过","builtins","只能","中","更进一步","open","决定","版本","了","what","绿色","{","stop","jupyterlab","文本","之","使","限制","交由","功能","团队","移走","为","或者","类","勾选","https","不","简单","进行","暂时","区别","说","完成","到","字符","javascript","支持","再来","做","关于","between","你","kernel","采用","本身","有",".","__","没有","使用","编辑","阶段","compile","（","self","小圆点","none","）","都","风险","s","py","效果","对应","安全","我","运行","添加","scratch3.0","甚至","上","也","伴随","想","依赖","源码","用作","引入","主页","，","自定","定义","参数","字符串","chrome","内置在","链接","就","ui","范例","制作","这个","w","重启","指导","class"],"title":"Python eval kernel","title_tokens":[" ","eval","python","kernel"]},{"location":"extension_guide/extension_python_kernel/#python-eval-kernel","text":"","text_tokens":[],"title":"Python eval kernel","title_tokens":[" ","eval","python","kernel"]},{"location":"extension_guide/extension_python_kernel/#_1","text":"安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器.","text_tokens":["团队","现阶段","为","更","效果","建议","chrome",".","官方","多","安装","其设","目前","版本","使用","默认","codelab","最佳","在","阶段","scratch","adapter","浏览","陆续"," ","支持","/","将","firefox","，","浏览器"],"title":"依赖","title_tokens":["依赖"]},{"location":"extension_guide/extension_python_kernel/#1-codelab-adapter","text":"双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。","text_tokens":[" ","浏览","打开","之后","启动","双击","。","默认","codelab","adapter","将","，","浏览器"],"title":"步骤 1：打开 Codelab Adapter","title_tokens":[" ","1","打开","：","步骤","codelab","adapter"]},{"location":"extension_guide/extension_python_kernel/#2-codelab-scratch3","text":"点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常","text_tokens":["这儿","或者","正常","页面","的","呈现","与","scratch3.0","如下","codelab","链接","上","ui",":","打开","图中",",","圆点","adapter","绿色","连接"," ","箭头","小圆点","web","所指","说明","scratch3","将","点击"],"title":"步骤 2：打开 Codelab Scratch3","title_tokens":[" ","打开","2","：","步骤","scratch3","codelab"]},{"location":"extension_guide/extension_python_kernel/#3hello-world","text":"选择对应的 Scratch3 插件：Python 插件 在 Scratch Python 插件里使用 插件启停积木 启动 CodeLab Adapter Python 插件。 执行 Python 代码: Python 插件将以 eval 执行 Python 代码(只能执行表达式)，如果你想使用 exec ，文末有指导。 你可以在插件中添加新的类，来自定义新功能, 我们做了一个范例: PyHelper 源码 。你可以使用 PyHelper.open_url(\"https://www.codelab.club\") 来为 Scratch 引入打开网页的功能。 你甚至可以更进一步，在 Scratch 中自定义积木！不需要编程 JavaScript，通过 Python 来扩展 Scratch！让我们构建一个打开网页的积木（Scratch本身没有打开网页的功能）: 点击制作新的积木: 制作自定义积木， 添加输入项目 : url 参数. 接下来我们开始定义这个积木的功能，完成之后我们就可以使用它了 以上例子的功能是按下空格，打开 CodeLab 主页。 你可以在插件里添加更多的类似 PyHelper 的自定义类，来为 Scratch 引入更多新的能力，使用 Python 就行！","text_tokens":["按","为","类","更","选择","让","多","https","不","www","类似","接下来","新",":","完成","打开","！","构建","(",",","scratch","一步","能力","javascript","执行","做","_","pyhelper","你","代码","本身","文末","有","是","表达","就行","的",".","网页","没有","项目","使用","codelab","在","以","里","它",")","编程","exec","需要"," ","/","我们","（","之后","来自","python","将","）","积木","点击","可以","启停","。","对应","进一步","输入","接下","空格","添加","甚至","表达式","一个","自定义","想","达式","源码","下","来","以上","adapter","扩展","启动","引入","主页","scratch3","\"","，","通过","自定","定义","参数","只能","如果","中","更进一步","open","例子","：","club","了","eval","就","url","范例","制作","这个","定义新","下来","插件","开始","指导","功能"],"title":"步骤 3：hello world","title_tokens":[" ","hello","world","：","步骤","3"]},{"location":"extension_guide/extension_python_kernel/#_2","text":"再来做一个例子， @HansonXie 给我写了封邮件，说想写一个extension或者node来进行文件存储，希望用Python来做，而不是Javascript。在此我写个简单例子 我们可以使用 Jupyterlab 编辑 extension_python.py . 在其中增加一个新的助手类，来负责存储文件 class StorageHelp : def save_text_to_file ( text , filename ): with open ( filename , \"w\" ): filename . write ( text ) 之后,将其添加到eval中（使其可用)。 eval ( code , { \"__builtins__\" : None }, { \"PyHelper\" : self . PyHelper , \"StorageHelp\" : StorageHelp () }) 完成后，重新勾选extension_python.py（stop and start，不需要重启 Adapter）。 此次，自定义的积木，包括两个参数：存储的文本(text) 和 文件名(filename) 提醒 注意文件名和内容都是字符串，有引号 \"xxxxx\" 点击运行新的积木, 在jupyterlab中，可以看到新创建的文件已经在 extensions 目录里 提醒 exec 可能带来各种安全风险，暂时将其从插件市场移走了。eval也更符合我们采用的 对象/消息 隐喻。 如果你确实需要exec，可以自行构建插件， 参考 python_exec.py 内置在 Adapter 里的 Python 插件以 eval 执行 Python 代码(只能执行表达式)，如果你希望以功能更轻大的 exec (可执行任何 Python 语句)执行 Python 代码，可以在 插件市场 里下载 extension_python_exec 插件 。 关于 eval 和 exec 的区别，参考: 深度辨析 Python 的 eval() 与 exec() What's the difference between eval, exec, and compile? 我们之没有将 extension_python_exec 内置在 Adapter 中，而是希望用户在需要时自行下载，因为它的功能过于强大，可能会带来一下风险，所以选择权交由使用者。强大的能力通常会伴随风险，当然我们不会做太多限制，由你决定：）","text_tokens":["text","移走","参考","符合","消息","或者","类","更","code","选择","创建","邮件","勾选","start","不","简单","进行","save","hansonxie","后","两个","暂时","区别","新","说",":","完成","其中","增加","写个","新创","市场","构建","(",",","到","更轻","强大","字符","能力","javascript","内容","执行","负责","filename","}","可用","做太多","给","再来","做","_","不会","关于","会","between","使用者","因为","pyhelper","你","采用","各种","代码","write","有","是","带来","表达","对象",".","封","的","file","文件","__","选择权","to","xxxxx","没有","storagehelp","交由","而","使用","自行","编辑","而是","过于","一下","在","以","里","可","它","@","确实","时",")","辨析","compile","exec","需要","太多","class"," ","（","我们","/","self","用者","之后","注意","python","将","none","）","积木","提醒","点击","都","风险","可能","可以","包括","s","py","引号","'","。","安全","我","不是","语句","def","运行","与","添加","所以","存储","表达式","一个","用","自定义","?","也","伴随","想","达式","看到","通常","来","adapter","此次","希望","当然","隐喻","助手","文件名","extensions","内置","the","\"","difference","，","自定","和","此","定义","参数","builtins","字符串","任何","只能","如果","从","深度","中","open","决定","其","例子","下载","：","内置在","了","extension","eval","and","目录","重新","由","新创建","what","w","更轻大","{","插件","node","已经","用户","stop","jupyterlab","文本","重启","之","使","with","限制","写","功能"],"title":"延伸","title_tokens":["延伸"]},{"location":"extension_guide/extension_python_kernel/#_3","text":"将 codelab-adapter 用作 Python 解释器","text_tokens":[" ","-","用作","解释器","释器","codelab","adapter","将","python","解释"],"title":"参考","title_tokens":["参考"]},{"location":"extension_guide/faceapi/","text":"Tutorial ¶ hello world","text_tokens":[" ","¶","hello","world","tutorial"],"title":"faceapi","title_tokens":["faceapi"]},{"location":"extension_guide/faceapi/#tutorial","text":"hello world","text_tokens":[" ","hello","world"],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/ha/","text":"Tutorial ¶ hello world 参考 安装和配置 Home Assistant","text_tokens":[" ","¶","安装","和","assistant","hello","world","参考","tutorial","home","配置"],"title":"home assistant","title_tokens":[" ","home","assistant"]},{"location":"extension_guide/ha/#tutorial","text":"hello world 参考 安装和配置 Home Assistant","text_tokens":[" ","安装","和","assistant","参考","hello","world","home","配置"],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/imageData/","text":"Tutorial ¶ 用于获取和设置舞台区数据，具体而言: 获取当前舞台图像、当前视频图像 这些数据的消费者包括: extension_stage.py node_physical_blocks2.py 获取/设置当前角色的自定义造型 demo ¶ 大多数的 physical blocks 项目都使用到了 获取当前视频图像 . 而以下项目使用到了 获取/设置当前角色的自定义造型 : 与 physical blocks 2.0 配合使用 ¶ 提醒 如果你想切换分辨率，Adapter的版本需要 >=3.7.4 , 或者到插件市场下载最新的physical blocks 2.0插件。 此外值得注意的是，分辨率越高，刷新率越慢（很大原因是因为传输的数据大造成的）","text_tokens":["¶","造型","或者","、","具体","切换","大",":","这些","刷新率","市场","到",",","设置","而言","demo","_","tutorial","因为","你","越慢","是","传输","是因为","的",".","最新","项目","以下","4","而","使用",">","需要"," ","/","（","角色","注意","）","提醒","消费者","都","配合","包括","py","。","区","与","当前","blocks2","physical","分辨","自定义","想","用于","舞台","图像","原因","消费","adapter","视频","越高","数据","，","多数","自定","和","定义","如果","下载","blocks","版本","很大","分辨率","了","值得注意","造成","extension","=","辨率","值得","大多","stage","插件","node","此外","刷新","大多数","2.0","3.7","获取"],"title":"imageData","title_tokens":["imagedata"]},{"location":"extension_guide/imageData/#tutorial","text":"用于获取和设置舞台区数据，具体而言: 获取当前舞台图像、当前视频图像 这些数据的消费者包括: extension_stage.py node_physical_blocks2.py 获取/设置当前角色的自定义造型","text_tokens":["自定","和","定义","包括","py","造型","、","区","的",".","具体","当前","获取","blocks2","physical","extension","自定义","舞台","用于",":","图像","这些","消费","设置","而言","stage"," ","视频","node","/","_","角色","数据","消费者","，"],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/imageData/#demo","text":"大多数的 physical blocks 项目都使用到了 获取当前视频图像 . 而以下项目使用到了 获取/设置当前角色的自定义造型 :","text_tokens":["自定","定义","造型","的",".","blocks","项目","当前","以下","而","使用","physical","了","自定义",":","图像","到","设置","大多"," ","视频","/","大多数","角色","获取","都","多数"],"title":"demo","title_tokens":["demo"]},{"location":"extension_guide/imageData/#physical-blocks-20","text":"提醒 如果你想切换分辨率，Adapter的版本需要 >=3.7.4 , 或者到插件市场下载最新的physical blocks 2.0插件。 此外值得注意的是，分辨率越高，刷新率越慢（很大原因是因为传输的数据大造成的）","text_tokens":["或者","如果","。","是","传输","是因为",".","的","最新","你","下载","blocks","版本","切换","4","很大","分辨率","physical","值得注意","造成","分辨",">","大","想","=","刷新率","原因","市场","辨率","到",",","值得","）","adapter","需要"," ","插件","（","此外","刷新","越高","3.7","2.0","注意","数据","因为","提醒","，","越慢"],"title":"与 physical blocks 2.0 配合使用","title_tokens":[" ","blocks","配合","与","2.0","使用","physical"]},{"location":"extension_guide/introduction/","text":"Extension Guide ¶ 我们将在此介绍 CodeLab Adapter 各种插件的用法，我们已通过 CodeLab Adapter extension 将一些有趣的硬件和 AI 接入到了 scratch 3.0 中。 目前已接入的设备参考 主页 。 如果已有的插件中，没有你期待的，你可以使用 CodeLab Adapter extension 自行将喜欢的硬件或 AI 等系统接入 Scratch 3.0，参考 开发手册 。 也可以参考已有的例子，我们正在陆续把我们写的 extensions 放入 codelab_adapter_extensions ，欢迎 fork，欢迎分享 : )","text_tokens":["¶","可以","和","此","各种","接入","参考","已有","。","如果","中","喜欢","手册","分享","的","开发","设备","你","例子","硬件","把","目前","没有","欢迎","正在","用法","使用","已","codelab","了","自行","放入","guide","extension","等","在","也",":","系统","到","scratch",")","adapter","陆续","fork"," ","插件","我们","一些","有趣","3.0","期待","介绍","，","或","_","主页","extensions","将","ai","通过","写"],"title":"介绍(introduction)","title_tokens":["介绍",")","introduction","("]},{"location":"extension_guide/introduction/#extension-guide","text":"我们将在此介绍 CodeLab Adapter 各种插件的用法，我们已通过 CodeLab Adapter extension 将一些有趣的硬件和 AI 接入到了 scratch 3.0 中。 目前已接入的设备参考 主页 。 如果已有的插件中，没有你期待的，你可以使用 CodeLab Adapter extension 自行将喜欢的硬件或 AI 等系统接入 Scratch 3.0，参考 开发手册 。 也可以参考已有的例子，我们正在陆续把我们写的 extensions 放入 codelab_adapter_extensions ，欢迎 fork，欢迎分享 : )","text_tokens":["可以","和","此","各种","接入","参考","已有","。","如果","中","喜欢","手册","分享","的","开发","设备","你","例子","硬件","把","目前","没有","欢迎","正在","用法","使用","已","codelab","了","自行","放入","extension","等","在","也",":","系统","到","scratch",")","adapter","陆续","fork"," ","插件","我们","一些","有趣","3.0","期待","介绍","，","或","_","主页","extensions","将","ai","通过","写"],"title":"Extension Guide","title_tokens":[" ","guide","extension"]},{"location":"extension_guide/iot/","text":"Tutorial ¶ hello world","text_tokens":[" ","¶","hello","world","tutorial"],"title":"iot","title_tokens":["iot"]},{"location":"extension_guide/iot/#tutorial","text":"hello world","text_tokens":[" ","hello","world"],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/json/","text":"Tutorial ¶ json 插件。 使用说明 ¶ 不允许将 Scratch 变量设置为字符串之外的东西。 如果你要讲来自Adapter的json数据存入Scratch变量，请先将数据序列化为字符串(json stringify)，以下是一个例子: Scratch-json-var","text_tokens":["¶","序列化","字符串","为","。","如果","是","东西","的","json","不","例子","允许","先","stringify","以下","使用","一个","序列",":","存入","(","scratch","请",")","设置","字符","var","adapter"," ","插件","-","，","变量","要","说明","来自","tutorial","将","数据","之外","你","讲"],"title":"json","title_tokens":["json"]},{"location":"extension_guide/json/#tutorial","text":"json 插件。","text_tokens":[" ","插件","。","json"],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/json/#_1","text":"不允许将 Scratch 变量设置为字符串之外的东西。 如果你要讲来自Adapter的json数据存入Scratch变量，请先将数据序列化为字符串(json stringify)，以下是一个例子: Scratch-json-var","text_tokens":["序列化","字符串","为","。","如果","是","东西","的","json","不","例子","允许","先","stringify","以下","一个","序列",":","存入","(","scratch","请",")","设置","字符","var","adapter"," ","-","，","变量","要","来自","将","数据","之外","你","讲"],"title":"使用说明","title_tokens":["说明","使用"]},{"location":"extension_guide/jupyterlab/","text":"JupyterLab ¶ JupyterLab 是 jupyter notebook 的下一代产品。 Jupyter Notebook（前身是IPython Notebook）是一个基于Web的交互式计算环境。 如果你正在学习 Python/数据科学/人工智能，它是你绝佳的编程环境。 CodeLab Adapter 将其集成到插件，如果想编辑代码，诸如 编辑 CodeLab Adapter的配置文件 使用 Python 扩展 Scratch的能力 构建新插件 它都是我们推荐的工具。 或者任何时候你想学习 Python ，JupyterLab 都是你理想的伙伴。 Tutorial ¶ 依赖 ¶ 安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器. 步骤 1：打开 Codelab Adapter ¶ 双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。 运行 extention_jupyterlab 插件。 提醒 完整版已经内置了一切依赖。 如果你是有精简版，确保你已经 安装了 Python3 。 你不必手动安装 jupyterlab ，运行插件，CodeLab Adapter 会为你其余的一切。 当然你也可以在命令行里手动安装它。 步骤 2：使用 jupyterlab ¶ jupyterlab 默认将打开 Adapter主目录 。 Adapter主目录 存放有: 用户配置文件 extensions 目录（可以在此修改 extension 的行为（如 eim_monitor ,修改完后，重新勾选插件即可，不必重启 Adapter） nodes 目录（可以在此修改 Adapter Node 的行为，修改完后，重新勾选插件即可，不必重启 Adapter） jupyter notebooks (用于存放Python代码，你可以从这里开始你的Python之旅) 资源文件(诸如 webui 的 html 文件，你可以自由修改！) Adapter 运行日志，当你需要 调试 extension 时，查看日志将很有帮助。 你可以使用 jupyterlab 随意修改它们。别担心改坏了。如果发现修改后 Adapter无法正常运行。则将整个 Adapter 主目录 删除即可，重启 Adapter，你将得到一个崭新的 Adapter 主目录。它是为你学习而构建的环境，别担心玩坏它，尽情探索吧。","text_tokens":["¶","团队","现阶段","或者","为","extention","如","更","计算环境","得到","勾选","多","玩坏","智能","配置文件","目前","精简版","正在","webui","不必","默认","后","运行日志","发现","整个","绝佳","新",":","打开","日志","！","构建","到",",","scratch","能力","步骤","(","陆续","支持","基于","notebook","崭新","科学","_","tutorial","计算","firefox","你","浏览器","完整版","主目录","eim","ipython","1","代码","即可","有","是","之旅","的","下一代",".","配置","一代","文件","前身","命令行","调试","探索","notebooks","自由","python3","而","使用","codelab","编辑","它们","查看","在","阶段","它","里","时","monitor",")","编程","需要","完后"," ","（","/","我们","其余","之后","nodes","这里","python","理想","）","将","提醒","html","都","可以","jupyter","。","效果","集成","精简","官方","资源","其设","运行","产品","双击","会为","删除","存放","推荐","最佳","当","帮助","一个","学习","也","改坏","想","依赖","用于","时候","确保","adapter","一切","手动","则","当然","修改","很","web","扩展","2","启动","extensions","内置","数据","吧","，","此","任何","如果","诸如","工具","从","人工智能","正常","建议","chrome","完整","交互","安装","其","版本","随意","：","环境","伙伴","了","行为","extension","目录","重新","交互式","整版","无法","别","浏览","插件","担心","node","开始","已经","用户","尽情","jupyterlab","重启","命令","人工"],"title":"jupyterlab","title_tokens":["jupyterlab"]},{"location":"extension_guide/jupyterlab/#jupyterlab","text":"JupyterLab 是 jupyter notebook 的下一代产品。 Jupyter Notebook（前身是IPython Notebook）是一个基于Web的交互式计算环境。 如果你正在学习 Python/数据科学/人工智能，它是你绝佳的编程环境。 CodeLab Adapter 将其集成到插件，如果想编辑代码，诸如 编辑 CodeLab Adapter的配置文件 使用 Python 扩展 Scratch的能力 构建新插件 它都是我们推荐的工具。 或者任何时候你想学习 Python ，JupyterLab 都是你理想的伙伴。","text_tokens":["ipython","jupyter","代码","或者","任何","计算","。","如果","诸如","集成","是","人工智能","工具","的","下一代","计算环境","交互","一代","配置","前身","其","文件","智能","产品","配置文件","正在","环境","使用","伙伴","codelab","推荐","编辑","一个","学习","交互式","绝佳","想","新","它","时候","构建","到","scratch","能力","编程","adapter","理想"," ","（","基于","/","插件","notebook","我们","web","科学","jupyterlab","，","扩展","python","数据","）","人工","将","你","都"],"title":"JupyterLab","title_tokens":["jupyterlab"]},{"location":"extension_guide/jupyterlab/#tutorial","text":"","text_tokens":[],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/jupyterlab/#_1","text":"安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器.","text_tokens":["团队","现阶段","为","更","效果","建议","chrome",".","官方","多","安装","其设","目前","版本","使用","默认","codelab","最佳","在","阶段","scratch","adapter","浏览","陆续"," ","支持","/","将","firefox","，","浏览器"],"title":"依赖","title_tokens":["依赖"]},{"location":"extension_guide/jupyterlab/#1-codelab-adapter","text":"双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。 运行 extention_jupyterlab 插件。 提醒 完整版已经内置了一切依赖。 如果你是有精简版，确保你已经 安装了 Python3 。 你不必手动安装 jupyterlab ，运行插件，CodeLab Adapter 会为你其余的一切。 当然你也可以在命令行里手动安装它。","text_tokens":["可以","extention","。","如果","有","是","精简","完整","的","命令行","你","安装","运行","精简版","双击","python3","会为","不必","默认","codelab","了","也","在","依赖","打开","里","它","整版","完整版","确保","adapter","浏览","一切","手动","当然"," ","插件","已经","其余","之后","jupyterlab","启动","_","命令","将","内置","提醒","，","浏览器"],"title":"步骤 1：打开 Codelab Adapter","title_tokens":[" ","1","打开","：","步骤","codelab","adapter"]},{"location":"extension_guide/jupyterlab/#2-jupyterlab","text":"jupyterlab 默认将打开 Adapter主目录 。 Adapter主目录 存放有: 用户配置文件 extensions 目录（可以在此修改 extension 的行为（如 eim_monitor ,修改完后，重新勾选插件即可，不必重启 Adapter） nodes 目录（可以在此修改 Adapter Node 的行为，修改完后，重新勾选插件即可，不必重启 Adapter） jupyter notebooks (用于存放Python代码，你可以从这里开始你的Python之旅) 资源文件(诸如 webui 的 html 文件，你可以自由修改！) Adapter 运行日志，当你需要 调试 extension 时，查看日志将很有帮助。 你可以使用 jupyterlab 随意修改它们。别担心改坏了。如果发现修改后 Adapter无法正常运行。则将整个 Adapter 主目录 删除即可，重启 Adapter，你将得到一个崭新的 Adapter 主目录。它是为你学习而构建的环境，别担心玩坏它，尽情探索吧。","text_tokens":["为","如","得到","勾选","玩坏","配置文件","webui","不必","默认","后","运行日志","发现","整个","日志",":","打开","！","构建","(",",","崭新","_","你","主目录","eim","代码","即可","有","是","之旅","的","调试","配置","文件","探索","notebooks","自由","而","使用","它们","查看","在","它","时","monitor",")","需要","完后"," ","（","nodes","这里","将","python","）","html","可以","jupyter","。","资源","运行","删除","存放","当","帮助","一个","学习","改坏","用于","adapter","则","修改","很","extensions","吧","，","此","诸如","从","如果","正常","随意","环境","了","行为","extension","目录","重新","无法","别","插件","担心","node","开始","用户","尽情","jupyterlab","重启"],"title":"步骤 2：使用 jupyterlab","title_tokens":[" ","2","jupyterlab","：","步骤","使用"]},{"location":"extension_guide/knn/","text":"Tutorial ¶ hello world !!! 提醒 推荐使用 Teachable Machine , 目前已经部署在国内。","text_tokens":[" ","¶","在","国内","已经","teachable","hello","world","目前","machine","推荐","。",",","使用","tutorial","!","提醒","部署"],"title":"knn","title_tokens":["knn"]},{"location":"extension_guide/knn/#tutorial","text":"hello world !!! 提醒 推荐使用 Teachable Machine , 目前已经部署在国内。","text_tokens":[" ","在","国内","已经","teachable","hello","world","目前","machine","推荐","。",",","使用","!","提醒","部署"],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/leapmotion/","text":"","text_tokens":[],"title":"leap motion","title_tokens":[" ","motion","leap"]},{"location":"extension_guide/lidar/","text":"交互激光雷达 ¶ 将房间变成 Scratch 舞台区！","text_tokens":[" ","激光雷达","¶","变成","舞台","！","scratch","交互","区","将","雷达","激光","房间"],"title":"交互激光雷达","title_tokens":["激光雷达","激光","交互","雷达"]},{"location":"extension_guide/lidar/#_1","text":"将房间变成 Scratch 舞台区！","text_tokens":[" ","变成","舞台","！","scratch","区","将","房间"],"title":"交互激光雷达","title_tokens":["激光雷达","激光","交互","雷达"]},{"location":"extension_guide/microbit/","text":"Tutorial ¶ 提醒 microbit v2 用户，请使用这个 固件 。目前需要手动刷新，Adapter的下个版本我们将提供更好的支持。 提醒 microbit radio插件 与 usb microbit插件 不能同时使用. 依赖 ¶ 安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器. 步骤 1：打开 Codelab Adapter ¶ 双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。 步骤 2：打开 Codelab Scratch3 ¶ 点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常 步骤 3：连接 micro:bit，加载插件 ¶ 使用数据线将 micro:bit 接入电脑。 ps: Windows 7 用户注意，为了能发现并连接 micro:bit，需要 安装驱动 （和使用 mu-editor 操作相同） 在 CodeLab Adapter 中点击加载 usb micro:bit 插件: 如果你是第一次连接，会自动烧录固件（背面LED灯快速闪烁）。刷完之后，重新连接，连接之后，你应该看到 micro:bit 背后的信号灯高频闪烁，如果它没有高频闪烁，则按一下 micro:bit 背部的复位按钮 ps: linux 用户注意，scratch3_adapter 使用 usb 串口与 micro:bit 连接，linux 下，使用 usb 串口需要做权限设置： sudo chmod 666 /dev/ttyACM0 提醒 如果你遇到问题，可手动烧录 固件(v1) (保存文件到本地，并拖到 Microbit盘里)。 microbit v2 用户，请使用这个 固件 步骤 4：hello world ¶ 现在让我们利用 Scratch3 控制 micro:bit，让它在点阵屏上打印 hello world 选择对应的 Scratch3 插件：usb microbit。 选择对应拓展积木，点击运行 结语 ¶ 这个例子完整展示了 CodeLab Adapter 的使用流程 打开 CodeLab Adapter 打开 CodeLab Scratch3 接入你的设备（可以是任何开源硬件） 打开对应插件 选择对应拓展积木，在 Scratch 3.0 中与设备交互 如果你想接入的设备目前没有默认插件支持它，你可以自己来写，CodeLab Adapter 允许你将任何硬件接入 scratch 3.0 中，别害怕，需要的代码很少也很简单，详情参见 开发手册 。我们支持使用任何编程语言来写拓展，目前我们自己主要使用 Python。 我们也将在 extension guide 中介绍各种社区插件的使用方法。 !!! usb_Microbit_firmware.hex的源码 。 采用 python.microbit.org 生成hex","text_tokens":["¶","团队","主要","按","hello","现阶段","为","或者","下个","更","页面","选择","让","多","开发","简单","语言","目前","默认","快速","发现","展示",":","打开","图中","7","(",",","scratch","步骤","到","背后","设置","usb","micro","刷","陆续","电脑","高频","支持","3.0","流程","做","_","tutorial","会","firefox","遇到","你","浏览器","一次","ttyacm0","同时","接入","拖","1","linux","各种","采用","代码","v1","windows","chmod","3","是","能","的",".","文件","editor","呈现","开源","允许","没有","4","使用","codelab","保存","信号","一下","在","数据线","结语","阶段","它","可",")","radio","mu","编程","生成","!","需要","连接","应该"," ","/","我们","（","箭头","小圆点","org","点阵","之后","666","说明","注意","很少","加载","将","python","）","积木","点击","提醒","不能","为了","可以","这儿","打印","。","害怕","效果","对应","详情","第一次","ps","手册","dev","官方","sudo","硬件","其设","world","与","运行","双击","scratch3.0","屏上","led","烧录","如下","最佳","guide","串口","上","完","也","现在","想","依赖","下","源码","看到","请","来","本地","圆点","手动","adapter","自动","则","并","-","灯","很","社区","2","web","第一","启动","拓展","方法","参见","操作","驱动","scratch3","数据","信号灯","，","问题","和","固件","任何","控制","如果","正常","中","建议","v2","chrome","盘里","完整","交互","复位","安装","设备","例子","版本","背部","：","利用","自己","hex","了","extension","链接","按钮","重新","ui","这个","别","浏览","绿色","插件","编程语言","用户","bit","刷新","权限","介绍","背面","microbit","提供","所指","闪烁","firmware","相同","更好","写"],"title":"micro:bit","title_tokens":[":","bit","micro"]},{"location":"extension_guide/microbit/#tutorial","text":"提醒 microbit v2 用户，请使用这个 固件 。目前需要手动刷新，Adapter的下个版本我们将提供更好的支持。 提醒 microbit radio插件 与 usb microbit插件 不能同时使用.","text_tokens":["同时","固件","。","下个","v2","的",".","目前","版本","与","使用","这个","请","radio","usb","手动","需要","adapter"," ","支持","我们","插件","用户","刷新","microbit","提供","将","提醒","，","更好","不能"],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/microbit/#_1","text":"安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器.","text_tokens":["团队","现阶段","为","更","效果","建议","chrome",".","官方","多","安装","其设","目前","版本","使用","默认","codelab","最佳","在","阶段","scratch","adapter","浏览","陆续"," ","支持","/","将","firefox","，","浏览器"],"title":"依赖","title_tokens":["依赖"]},{"location":"extension_guide/microbit/#1-codelab-adapter","text":"双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。","text_tokens":[" ","浏览","打开","之后","启动","双击","。","默认","codelab","adapter","将","，","浏览器"],"title":"步骤 1：打开 Codelab Adapter","title_tokens":[" ","1","打开","：","步骤","codelab","adapter"]},{"location":"extension_guide/microbit/#2-codelab-scratch3","text":"点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常","text_tokens":["这儿","或者","正常","页面","的","呈现","与","scratch3.0","如下","codelab","链接","上","ui",":","打开","图中",",","圆点","adapter","绿色","连接"," ","箭头","小圆点","web","所指","说明","scratch3","将","点击"],"title":"步骤 2：打开 Codelab Scratch3","title_tokens":[" ","打开","2","：","步骤","scratch3","codelab"]},{"location":"extension_guide/microbit/#3-microbit","text":"使用数据线将 micro:bit 接入电脑。 ps: Windows 7 用户注意，为了能发现并连接 micro:bit，需要 安装驱动 （和使用 mu-editor 操作相同） 在 CodeLab Adapter 中点击加载 usb micro:bit 插件: 如果你是第一次连接，会自动烧录固件（背面LED灯快速闪烁）。刷完之后，重新连接，连接之后，你应该看到 micro:bit 背后的信号灯高频闪烁，如果它没有高频闪烁，则按一下 micro:bit 背部的复位按钮 ps: linux 用户注意，scratch3_adapter 使用 usb 串口与 micro:bit 连接，linux 下，使用 usb 串口需要做权限设置： sudo chmod 666 /dev/ttyACM0 提醒 如果你遇到问题，可手动烧录 固件(v1) (保存文件到本地，并拖到 Microbit盘里)。 microbit v2 用户，请使用这个 固件","text_tokens":["按","快速","发现",":","7","(","到","背后","设置","micro","高频","usb","电脑","刷","做","_","会","遇到","一次","你","ttyacm0","接入","拖","linux","v1","windows","chmod","是","能","的","文件","editor","没有","使用","codelab","保存","信号","一下","在","数据线","它","可",")","mu","需要","连接","应该"," ","（","/","之后","666","注意","加载","将","）","点击","提醒","为了","。","第一次","ps","dev","sudo","与","led","烧录","串口","完","下","看到","请","本地","adapter","手动","则","自动","并","-","灯","第一","操作","驱动","scratch3","数据","信号灯","，","问题","和","固件","如果","中","v2","盘里","复位","安装","背部","：","按钮","重新","这个","插件","用户","bit","权限","背面","microbit","闪烁","相同"],"title":"步骤 3：连接 micro:bit，加载插件","title_tokens":[" ","插件","bit",":","：","步骤","3","加载","micro","，","连接"]},{"location":"extension_guide/microbit/#4hello-world","text":"现在让我们利用 Scratch3 控制 micro:bit，让它在点阵屏上打印 hello world 选择对应的 Scratch3 插件：usb microbit。 选择对应拓展积木，点击运行","text_tokens":["hello","控制","打印","。","对应","的","选择","让","world","运行","利用","：","屏上","在","现在",":","它","micro","usb"," ","插件","我们","bit","点阵","microbit","拓展","scratch3","积木","点击","，"],"title":"步骤 4：hello world","title_tokens":[" ","hello","world","：","4","步骤"]},{"location":"extension_guide/microbit/#_2","text":"这个例子完整展示了 CodeLab Adapter 的使用流程 打开 CodeLab Adapter 打开 CodeLab Scratch3 接入你的设备（可以是任何开源硬件） 打开对应插件 选择对应拓展积木，在 Scratch 3.0 中与设备交互 如果你想接入的设备目前没有默认插件支持它，你可以自己来写，CodeLab Adapter 允许你将任何硬件接入 scratch 3.0 中，别害怕，需要的代码很少也很简单，详情参见 开发手册 。我们支持使用任何编程语言来写拓展，目前我们自己主要使用 Python。 我们也将在 extension guide 中介绍各种社区插件的使用方法。 !!! usb_Microbit_firmware.hex的源码 。 采用 python.microbit.org 生成hex","text_tokens":["主要","选择","开发","简单","语言","目前","默认","展示","打开","scratch","usb","支持","3.0","流程","_","你","接入","各种","采用","代码","是","的",".","开源","允许","没有","使用","codelab","在","它","编程","生成","!","需要"," ","（","我们","org","很少","将","python","）","积木","可以","害怕","详情","对应","。","手册","硬件","与","guide","也","想","源码","来","adapter","很","社区","拓展","方法","参见","scratch3","，","任何","如果","中","完整","交互","设备","例子","自己","hex","了","extension","这个","别","插件","编程语言","介绍","microbit","firmware","写"],"title":"结语","title_tokens":["结语"]},{"location":"extension_guide/microbit_radio/","text":"Tutorial ¶ 提醒 使用micro:bit v2的话，需要手动在 makecode 里刷入固件（推荐使用v1） micro:bit v1 和 micro:bit v2 的radio可以通信。 只能用于 makecode radio， makecode radio 与 micropython radio不兼容。 Adapter 3.7.4 支持切换 radio channel。 介绍 ¶ 我们在 CodeLab Adapter 深度连接 micro:bit （makecode）生态 中提到 我们将一块 micro:bit 接入电脑，用作中转站（类似 usb dongle），用于在 CodeLab Adapter 和任何 micro:bit 套件做中转站。这里的一个背景知识是，任何的 micro:bit 直接可以通过 radio（简易的无线连接）方便地彼此通信。 在这个思路中，获得的一个意外收获是：能让任何电脑与 microbit 无线连接！即便没有蓝牙！ ps：在这个教程中，需要准备 2 块 micro:bit。其中一块用作消息中转（暂且称其为 中转站 ），另一块用于实现项目功能（暂且称其为 功能板 ）。 依赖 ¶ 安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器. 步骤 1：hello MakeCode ¶ 从一个简单的例子开始： radio_node （ Adapter > 3.4 ） 将上述代码 download 到 功能板 (2 块 micro:bit 中的一块)。 上述代码的功能是: 当 功能板 收到来自 CodeLab Scratch 的消息时, 将在矩阵屏上显示出消息。 当 功能板 的 A 按钮 被按下时，发送字符 a , B 按钮 被按下时，发送字符 b （ microbit -> scratch ）， 当用力摇晃时，发送字符 shake 这样便完成了 Scratch--无线microbot 的双向通信: * `scratch -> microbit` * `microbit -> scratch` 注意 功能板收到的所有消息都是 字符串 步骤 2：拔下 功能板 ，接上 中转站 ，加载固件 ¶ 使用数据线将 中转站 micro:bit 接入电脑，刷入 固件 。 提醒 Windows 7用户注意，无法发现 micro:bit，需要 安装驱动 （和使用 mu-editor 操作相同） linux 用户注意，CodeLab Adapter 使用 usb 串口与 micro:bit 连接，linux 下，使用 usb 串口需要做权限设置： sudo chmod 666 /dev/ttyACM0 步骤 3：打开 Codelab Adapter ¶ 双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。 点击加载 extension_microbit_radio 插件 步骤 4：打开 Codelab Scratch3 ，构建自己的应用 ¶ 点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常 在此展示一个简单例子：使用 A、B 按钮让角色出现和消失。你可以在线打开它 radio_hello_world_demo 总结 ¶ 根据以上的模版，加以调整，你可以自行构建自己的应用。 完整项目 ¶ fire！ ¶ 我们使用 micro:bit 来赋予淘宝上的普通魔杖以魔法。一共需要 3 个 micro:bit，一个用作中转站，一个用作可穿戴手表（micro:bit 绑在表带上），一个用作投石器。 当我们挥动魔杖时，触发投石器开关，fire！ 以下是源码 micro:bit 可穿戴设备源码 投石器源码 Scratch wand_catapult 我们来关注下以上 2 个 micro:bit 中信息的流向， 可穿戴设备，信息的流向是： micro:bit -> Scratch 投石器信息的流向为： Scratch -> micro:bit 提醒 运行项目时，记得把 CodeLab Adapter 运行起来。 Scratch 翻页笔 ¶ 硬件方面，使用了2个microbit: 作为翻页笔的手持的microbit: 固件 作为中转站(dongle)的microbit: 固件 它们之间基于 radio 通信（ micro:bit radio ） Scratch 程序参考 Scratch-翻页笔-demo.sb3","text_tokens":["¶","团队","a","一块","称其为","按","hello","总结","参考","消息","现阶段","为","或者","手表","更","笔","、","页面","让","中转站","不","多","简单","目前","切换","类似","触发","默认","microbot","板","发现","接上","准备","套件","展示",":","完成","打开","其中","7","！","构建","图中","到","(","scratch","步骤","上述","即便",",","micro","usb","字符","电脑","陆续","设置","调整","支持","基于","demo","做","_","tutorial","firefox","所有","你","channel","micropython","里刷入","浏览器","ttyacm0","接入","1","*","linux","代码","v1","windows","chmod","转站","表","是","3","直接","能","兼容","无线连接","的",".","彼此","普通","收获","editor","呈现","魔法","中转","简易","没有","赋予","项目","以下","4","之间","使用","codelab","收到","自行","穿戴","它们",">","在","数据线","以","阶段","的话","它","可","时","教程","地","radio",")","mu","wand","需要","连接","摇晃"," ","（","我们","提到","另","/","箭头","小圆点","一共","翻页","这里","之后","sb3","666","说明","来自","注意","加载","角色","将","）","出现","提醒","点击","都","魔杖","可以","出","方面","这儿","知识","。","效果","根据","ps","dev","catapult","官方","sudo","应用","硬件","被","其设","world","与","运行","通信","双击","屏上","scratch3.0","淘宝","如下","推荐","最佳","石器","makecode","当","串口","一个","b","消失","开关","上","用于","依赖","下","用作","源码","来","作为","圆点","以上","手动","adapter","`","信息","-","投","模版","绑","无线","生态","2","web","在线","加以","3.4","启动","操作","驱动","dongle","scratch3","数据","刷入","通过","，","和","此","关注","固件","任何","download","双向","字符串","只能","深度","从","正常","挥动","中","流向","建议","v2","chrome","完整","设备","安装","意外","例子","shake","记得","版本","把","显示","：","自己","程序","了","拔","起来","矩阵","便","extension","链接","按钮","用力","ui","这个","思路","暂且","无法","个","发送","带上","方便","背景","手持","浏览","绿色","插件","开始","node","用户","bit","权限","介绍","蓝牙","microbit","实现","所指","fire","3.7","获得","这样","双向通信","块","相同","功能"],"title":"micro:bit radio","title_tokens":[" ","bit",":","radio","micro"]},{"location":"extension_guide/microbit_radio/#tutorial","text":"提醒 使用micro:bit v2的话，需要手动在 makecode 里刷入固件（推荐使用v1） micro:bit v1 和 micro:bit v2 的radio可以通信。 只能用于 makecode radio， makecode radio 与 micropython radio不兼容。 Adapter 3.7.4 支持切换 radio channel。","text_tokens":["可以","和","固件","v1","只能","。","v2","兼容","的",".","不","与","通信","切换","4","使用","推荐","makecode","在",":","用于","的话","radio","channel","micro","手动","需要","adapter"," ","（","支持","bit","3.7","micropython","）","提醒","，","里刷入"],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/microbit_radio/#_1","text":"我们在 CodeLab Adapter 深度连接 micro:bit （makecode）生态 中提到 我们将一块 micro:bit 接入电脑，用作中转站（类似 usb dongle），用于在 CodeLab Adapter 和任何 micro:bit 套件做中转站。这里的一个背景知识是，任何的 micro:bit 直接可以通过 radio（简易的无线连接）方便地彼此通信。 在这个思路中，获得的一个意外收获是：能让任何电脑与 microbit 无线连接！即便没有蓝牙！ ps：在这个教程中，需要准备 2 块 micro:bit。其中一块用作消息中转（暂且称其为 中转站 ），另一块用于实现项目功能（暂且称其为 功能板 ）。","text_tokens":["一块","称其为","消息","让","中转站","类似","板","准备","套件",":","其中","！","即便","micro","usb","电脑","做","接入","转站","是","直接","能","彼此","无线连接","的","收获","中转","简易","没有","项目","codelab","在","教程","地","radio","需要","连接"," ","（","我们","提到","另","这里","将","）","可以","知识","。","ps","与","通信","makecode","一个","用于","用作","adapter","无线","生态","2","dongle","通过","，","和","任何","深度","中","意外","：","这个","思路","暂且","方便","背景","bit","蓝牙","microbit","实现","获得","块","功能"],"title":"介绍","title_tokens":["介绍"]},{"location":"extension_guide/microbit_radio/#_2","text":"安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器.","text_tokens":["团队","现阶段","为","更","效果","建议","chrome",".","官方","多","安装","其设","目前","版本","使用","默认","codelab","最佳","在","阶段","scratch","adapter","浏览","陆续"," ","支持","/","将","firefox","，","浏览器"],"title":"依赖","title_tokens":["依赖"]},{"location":"extension_guide/microbit_radio/#1hello-makecode","text":"从一个简单的例子开始： radio_node （ Adapter > 3.4 ） 将上述代码 download 到 功能板 (2 块 micro:bit 中的一块)。 上述代码的功能是: 当 功能板 收到来自 CodeLab Scratch 的消息时, 将在矩阵屏上显示出消息。 当 功能板 的 A 按钮 被按下时，发送字符 a , B 按钮 被按下时，发送字符 b （ microbit -> scratch ）， 当用力摇晃时，发送字符 shake 这样便完成了 Scratch--无线microbot 的双向通信: * `scratch -> microbit` * `microbit -> scratch` 注意 功能板收到的所有消息都是 字符串","text_tokens":["出","a","一块","按","*","字符串","双向","代码","download","消息","。","从","中","是","的","例子","简单","被","shake","显示","通信","：","屏上","codelab","收到","了","microbot","当",">","矩阵","一个","板","按钮","b","在","用力","便",":","下","完成","时","到","(","上述","radio",")","scratch",",","micro","adapter","发送","字符","`","摇晃"," ","（","开始","node","-","bit","无线","2","3.4","microbit","_","来自","这样","双向通信","块","将","注意","）","所有","，","都","功能"],"title":"步骤 1：hello MakeCode","title_tokens":[" ","1","hello","：","步骤","makecode"]},{"location":"extension_guide/microbit_radio/#2","text":"使用数据线将 中转站 micro:bit 接入电脑，刷入 固件 。 提醒 Windows 7用户注意，无法发现 micro:bit，需要 安装驱动 （和使用 mu-editor 操作相同） linux 用户注意，CodeLab Adapter 使用 usb 串口与 micro:bit 连接，linux 下，使用 usb 串口需要做权限设置： sudo chmod 666 /dev/ttyACM0","text_tokens":["和","接入","linux","固件","windows","chmod","转站","。","dev","sudo","中转站","安装","editor","中转","与","：","使用","相同","codelab","串口","发现","数据线",":","下","7","无法","mu","设置","micro","adapter","需要","电脑","usb","连接"," ","（","-","/","用户","bit","权限","做","数据","666","操作","注意","驱动","将","刷入","）","提醒","，","ttyacm0"],"title":"步骤 2：拔下功能板，接上中转站，加载固件","title_tokens":[" ","接上","中转站","下","2","中转","固件","：","转站","步骤","加载","拔","，","板","功能"]},{"location":"extension_guide/microbit_radio/#3-codelab-adapter","text":"双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。 点击加载 extension_microbit_radio 插件","text_tokens":["。","双击","默认","codelab","extension","打开","radio","adapter","浏览"," ","插件","之后","启动","microbit","_","加载","将","点击","，","浏览器"],"title":"步骤 3：打开 Codelab Adapter","title_tokens":[" ","打开","：","步骤","3","codelab","adapter"]},{"location":"extension_guide/microbit_radio/#4-codelab-scratch3","text":"点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常 在此展示一个简单例子：使用 A、B 按钮让角色出现和消失。你可以在线打开它 radio_hello_world_demo","text_tokens":["可以","a","此","和","这儿","hello","或者","。","正常","、","页面","的","让","呈现","简单","例子","world","与","：","scratch3.0","使用","如下","codelab","消失","链接","一个","b","按钮","上","在","展示","ui",":","打开","图中","它",",","radio","圆点","adapter","绿色","连接"," ","箭头","小圆点","demo","web","在线","所指","_","角色","说明","scratch3","将","出现","点击","你"],"title":"步骤 4：打开 Codelab Scratch3，构建自己的应用","title_tokens":[" ","应用","打开","构建","：","4","自己","步骤","scratch3","codelab","的","，"]},{"location":"extension_guide/microbit_radio/#_3","text":"根据以上的模版，加以调整，你可以自行构建自己的应用。","text_tokens":["你","可以","应用","模版","加以","构建","自己","。","根据","以上","自行","调整","的","，"],"title":"总结","title_tokens":["总结"]},{"location":"extension_guide/microbit_radio/#_4","text":"","text_tokens":[],"title":"完整项目","title_tokens":["完整","项目"]},{"location":"extension_guide/microbit_radio/#fire","text":"我们使用 micro:bit 来赋予淘宝上的普通魔杖以魔法。一共需要 3 个 micro:bit，一个用作中转站，一个用作可穿戴手表（micro:bit 绑在表带上），一个用作投石器。 当我们挥动魔杖时，触发投石器开关，fire！ 以下是源码 micro:bit 可穿戴设备源码 投石器源码 Scratch wand_catapult 我们来关注下以上 2 个 micro:bit 中信息的流向， 可穿戴设备，信息的流向是： micro:bit -> Scratch 投石器信息的流向为： Scratch -> micro:bit 提醒 运行项目时，记得把 CodeLab Adapter 运行起来。","text_tokens":["关注","为","手表","。","转站","表","挥动","3","是","中","流向","catapult","的","中转站","设备","记得","魔法","运行","中转","把","赋予","以下","：","项目","淘宝","使用","触发","codelab","起来","穿戴","石器","当","开关","一个",">","提醒","上","以","在",":","源码","下","用作","可","！","时","个","带上","普通","来","scratch","wand","micro","以上","需要","adapter","信息"," ","（","我们","绑","-","bit","一共","2","fire","_","）","投","，","魔杖"],"title":"fire！","title_tokens":["！","fire"]},{"location":"extension_guide/microbit_radio/#scratch","text":"硬件方面，使用了2个microbit: 作为翻页笔的手持的microbit: 固件 作为中转站(dongle)的microbit: 固件 它们之间基于 radio 通信（ micro:bit radio ） Scratch 程序参考 Scratch-翻页笔-demo.sb3","text_tokens":["方面","参考","固件","笔","转站","的",".","中转站","硬件","中转","通信","之间","程序","使用","了","它们",":","个","手持","(",")","radio","作为","scratch","micro"," ","（","基于","-","bit","demo","sb3","2","翻页","microbit","dongle","）","，"],"title":"Scratch 翻页笔","title_tokens":[" ","scratch","笔","翻页"]},{"location":"extension_guide/minecraft/","text":"Tutorial ¶ 插件说明 ¶ Windows 和 Mac 用户开箱可用。Linux用户将自动安装依赖 外部环境依赖 ¶ 需要配合 minecraft Pi edition 或者 raspberryjuice 使用。 开始使用 ¶ 运行 minecraft，使得 mcpi 能够接入minecraft，如果你不是使用树莓派，可能需要调整 插件源码 ， 细节参考 mcpi 文档。 启动 CodeLab Adapter，运行 node_minecraft 插件。 打开 Scratch 编程界面，我们已经制作了一个 demo: Scratch-mcTurtle (如果你打开出错，请清理浏览器缓存)， 你可以从这里起步，它是一个运行在Minecraft世界里的Turtle，它会出现在你周围 推荐你飞到空中(空格)去看它的运行轨迹。 如果你想做更多有趣的事，建议阅读 minecraft , 我们鼓励你去修改 插件源码 ，去支持更多的对象。欢迎把你的修改结果提交到 CodeLab 源码仓库，分享给社区里的其他人用 参考 ¶ Minecraft Minecraft API Minecraft Graphics Turtle Coding shapes in Minecraft Minecraft - Stuff Library TeachCraft https://projects.raspberrypi.org/en/projects/getting-started-with-minecraft-pi Python Coding for Minecraft mcpi minecraft-python","text_tokens":["¶","提交","参考","或者","更","外部","多","https","欢迎","树莓","去","in","其他",":","打开","(",",","scratch","到","外部环境","调整","周围","支持","有趣","可用","demo","空中","给","他人","做","_","tutorial","for","你","浏览器","飞到","接入","linux","windows","是","它会","对象","的","teachcraft",".","raspberryjuice","起步","使用","codelab","出错","在","它","里","library","派",")","编程","edition","需要","projects"," ","/","我们","org","这里","pi","说明","mcpi","shapes","将","python","出现","可能","可以","配合","。","缓存","空格","不是","分享","运行","结果","轨迹","推荐","en","一个","用","看","世界","想","依赖","源码","仓库","minecraft","请","adapter","自动","修改","-","社区","启动","清理","started","阅读","界面","，","和","raspberrypi","stuff","mcturtle","开箱","如果","从","coding","建议","mac","细节","安装","把","使得","环境","api","了","鼓励","graphics","事","制作","能够","其他人","浏览","文档","插件","开始","node","用户","已经","getting","turtle","with"],"title":"Minecraft","title_tokens":["minecraft"]},{"location":"extension_guide/minecraft/#tutorial","text":"","text_tokens":[],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/minecraft/#_1","text":"Windows 和 Mac 用户开箱可用。Linux用户将自动安装依赖","text_tokens":[" ","安装","和","用户","可用","linux","依赖","windows","开箱","。","将","自动","mac"],"title":"插件说明","title_tokens":["插件","说明"]},{"location":"extension_guide/minecraft/#_2","text":"需要配合 minecraft Pi edition 或者 raspberryjuice 使用。","text_tokens":[" ","配合","或者","minecraft","raspberryjuice","。","pi","使用","edition","需要"],"title":"外部环境依赖","title_tokens":["依赖","环境","外部","外部环境"]},{"location":"extension_guide/minecraft/#_3","text":"运行 minecraft，使得 mcpi 能够接入minecraft，如果你不是使用树莓派，可能需要调整 插件源码 ， 细节参考 mcpi 文档。 启动 CodeLab Adapter，运行 node_minecraft 插件。 打开 Scratch 编程界面，我们已经制作了一个 demo: Scratch-mcTurtle (如果你打开出错，请清理浏览器缓存)， 你可以从这里起步，它是一个运行在Minecraft世界里的Turtle，它会出现在你周围 推荐你飞到空中(空格)去看它的运行轨迹。 如果你想做更多有趣的事，建议阅读 minecraft , 我们鼓励你去修改 插件源码 ，去支持更多的对象。欢迎把你的修改结果提交到 CodeLab 源码仓库，分享给社区里的其他人用","text_tokens":["提交","参考","更","多","欢迎","树莓","去","其他",":","打开","(",",","scratch","到","调整","周围","支持","有趣","demo","空中","给","他人","做","_","你","浏览器","飞到","接入","是","它会","对象","的","起步","使用","codelab","出错","在","它","里","派",")","编程","需要"," ","我们","这里","mcpi","出现","可能","可以","。","缓存","空格","不是","分享","运行","结果","轨迹","推荐","一个","用","看","世界","想","仓库","源码","minecraft","请","adapter","修改","-","社区","启动","清理","阅读","界面","，","mcturtle","如果","从","建议","细节","把","使得","了","鼓励","事","制作","能够","其他人","浏览","文档","插件","node","已经","turtle"],"title":"开始使用","title_tokens":["使用","开始"]},{"location":"extension_guide/minecraft/#_4","text":"Minecraft Minecraft API Minecraft Graphics Turtle Coding shapes in Minecraft Minecraft - Stuff Library TeachCraft https://projects.raspberrypi.org/en/projects/getting-started-with-minecraft-pi Python Coding for Minecraft mcpi minecraft-python","text_tokens":["raspberrypi","stuff","coding",".","teachcraft","https","api","en","in","graphics",":","library","minecraft","projects"," ","-","/","org","getting","turtle","pi","mcpi","shapes","started","python","for","with"],"title":"参考","title_tokens":["参考"]},{"location":"extension_guide/motion_sensor/","text":"Tutorial ¶ coding kit, for movers, shakers and makers. 注意 Windows 和 Mac 用户开箱可用。 使用方式: 到 插件市场 下载插件, 搜索 motion 插件类型: Adapter Node 插件源码: node_motionSensor_proximity.py 、 node_motionSensor_gesture.py 提醒 node_motionSensor_proximity 和 node_motionSensor_gesture 插件，分别对应 motion sensor 距离模式 和 手势模式。两个插件不能同时运行，当需要切换到另一个插件时，需要把当前正在运行的插件给停止了。 Demo ¶ Scratch-robomaster-motion-sensor.sb3","text_tokens":["¶","同时","和","shakers","py","robomaster","windows","开箱","。","模式","、","对应","手势","coding",".","mac","motion","的","下载","类型","运行","把","当前","距离","切换","正在","sensor","停止","使用","方式","了","提醒","当","gesture","两个","一个","and",":","搜索","源码","motionsensor","时","市场","到",",","scratch","adapter","分别","需要","kit","movers"," ","插件","node","另","用户","可用","demo","给","-","sb3","_","注意","tutorial","for","proximity","makers","，","不能"],"title":"kano motion sensor","title_tokens":[" ","kano","sensor","motion"]},{"location":"extension_guide/motion_sensor/#tutorial","text":"coding kit, for movers, shakers and makers. 注意 Windows 和 Mac 用户开箱可用。 使用方式: 到 插件市场 下载插件, 搜索 motion 插件类型: Adapter Node 插件源码: node_motionSensor_proximity.py 、 node_motionSensor_gesture.py 提醒 node_motionSensor_proximity 和 node_motionSensor_gesture 插件，分别对应 motion sensor 距离模式 和 手势模式。两个插件不能同时运行，当需要切换到另一个插件时，需要把当前正在运行的插件给停止了。","text_tokens":["同时","和","shakers","py","windows","开箱","。","模式","、","对应","手势","coding",".","mac","motion","的","下载","类型","运行","把","当前","距离","切换","正在","sensor","停止","使用","方式","了","提醒","当","gesture","两个","一个","and",":","搜索","源码","motionsensor","时","市场","到",",","adapter","分别","需要","kit","movers"," ","插件","node","另","用户","可用","给","_","注意","for","proximity","makers","，","不能"],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/motion_sensor/#demo","text":"Scratch-robomaster-motion-sensor.sb3","text_tokens":["-","sb3","robomaster","sensor","scratch","motion","."],"title":"Demo","title_tokens":["demo"]},{"location":"extension_guide/mpfshell/","text":"mpfshell ¶ 文档参考： scratch3-eim-mpfshell mpfshell-lite","text_tokens":[" ","¶","-","eim","参考","：","lite","scratch3","文档","mpfshell"],"title":"mpfshell(正在迁移中)","title_tokens":["正在","(",")","中","迁移","mpfshell"]},{"location":"extension_guide/mpfshell/#mpfshell","text":"文档参考： scratch3-eim-mpfshell mpfshell-lite","text_tokens":[" ","-","eim","参考","：","lite","scratch3","文档","mpfshell"],"title":"mpfshell","title_tokens":["mpfshell"]},{"location":"extension_guide/neverland2/","text":"Neverland 2.0 ¶ demo3 原理 ¶ 项目包含以下部分: adapter master: 空间主节点，以 NEVERLAND_HUB 模式运行的Adapter,运行在树莓派上 adapter node: 空间功能节点，运行在树莓派上。在我们的视频里，有一个节点连接了makeymakey（makey node） user client: 运行在用户计算机上的 Adapter adapter master ¶ ADAPTER_MODE=3 ./codelab-adapter 关于 Adapter 的模式 adapter node ¶ python3 makey_node.py user client ¶ 正常运行Adapter即可","text_tokens":["¶","py","计算","即可","。","模式","正常","有","3","部分","包含","的",".","运行","demo3","项目","以下","树莓","python3","了","codelab","hub","一个","在","以","上","makeymakey","makey",":","=","节点","里","计算机","派",",","adapter","连接"," ","视频","node","我们","原理","（","client","用户","/","-","主","user","_","2.0","关于","neverland","mode","空间","）","master","，","算机","功能"],"title":"neverland2.0","title_tokens":["neverland2.0"]},{"location":"extension_guide/neverland2/#neverland-20","text":"demo3","text_tokens":["demo3"],"title":"Neverland 2.0","title_tokens":[" ","2.0","neverland"]},{"location":"extension_guide/neverland2/#_1","text":"项目包含以下部分: adapter master: 空间主节点，以 NEVERLAND_HUB 模式运行的Adapter,运行在树莓派上 adapter node: 空间功能节点，运行在树莓派上。在我们的视频里，有一个节点连接了makeymakey（makey node） user client: 运行在用户计算机上的 Adapter","text_tokens":["计算","。","模式","有","部分","的","包含","运行","以下","项目","树莓","了","hub","一个","在","以","上","makeymakey","makey",":","节点","里","计算机","派",",","adapter","连接"," ","视频","node","我们","（","client","用户","主","user","_","neverland","空间","）","master","，","算机","功能"],"title":"原理","title_tokens":["原理"]},{"location":"extension_guide/neverland2/#adapter-master","text":"ADAPTER_MODE=3 ./codelab-adapter 关于 Adapter 的模式","text_tokens":[" ","/","-","=","的","_","模式","关于","3","mode","codelab","adapter","."],"title":"adapter master","title_tokens":[" ","master","adapter"]},{"location":"extension_guide/neverland2/#adapter-node","text":"python3 makey_node.py","text_tokens":[" ","node","makey","py","_","python3","."],"title":"adapter node","title_tokens":[" ","node","adapter"]},{"location":"extension_guide/neverland2/#user-client","text":"正常运行Adapter即可","text_tokens":["adapter","即可","运行","正常"],"title":"user client","title_tokens":[" ","client","user"]},{"location":"extension_guide/opencv/","text":"OpenCV ¶ 参考： 运行在树莓派中的 codelab-adapter opencv 插件 。","text_tokens":[" ","¶","在","-","插件","参考","opencv","运行","树莓","：","派","。","中","codelab","adapter","的"],"title":"OpenCV(正在迁移中)","title_tokens":["opencv","正在","(",")","中","迁移"]},{"location":"extension_guide/opencv/#opencv","text":"参考： 运行在树莓派中的 codelab-adapter opencv 插件 。","text_tokens":[" ","在","-","插件","运行","参考","opencv","树莓","：","派","。","中","codelab","adapter","的"],"title":"OpenCV","title_tokens":["opencv"]},{"location":"extension_guide/osc/","text":"OSC (Open Sound Control) ¶ 介绍 ¶ OSC (Open Sound Control) 是一种用于将声音合成器、计算机和其他多媒体设备联网的协议，用于音乐表演或表演控制等目的。OSC 的优势包括互操作性，准确性，灵活性以及增强的组织和文档。 最新版的 CodeLab Adapter( >= 3.7.1 )内置了 OSC 服务，端口为 12361 CodeLab Adapter即可充当 OSC server，又可充当 OSC client， 两类积木都提供了 积木说明 ¶ 例子 ¶ demo ¶ demo 源码 ¶ osc 手写板 如果你使用 IPhone 或者其他支持压力输入的屏幕，则可以通过按压力度控制画笔粗细。 操作说明 ¶ 下载 OSC 软件(演示视频里用的是 Syntien ), 将其配置到 Adapter OSC Server 上（ Adapter_IP:12361 ） 之后进入 interface，开始操作即可。 输出的 osc 信号将进入 Adapter，继而可以在 Scratch 的 OSC 积木中访问它。 一则 osc 消息由 2 部分构成: address(地址，类似 url) args（参数，是个 list）, 每一个参数的含义请参考具体 OSC 软件的文档说明 address 和 args 可以在具体 osc 软件中找到。 提醒 ¶ 一切都是消息！ OSC 相关软件推荐(client) ¶ 我目前最喜欢的 OSC client 是: Syntien Unipad Syntien ¶ Syntien 提供了丰富的控制面板 它甚至允许你自定义面板！ Unipad ¶ Unipad 提供多种游戏手柄界面，这些可以很好地跟Scratch项目结合！ OSC 如此高的刷新率，几乎没有任何延迟 进阶 ¶ 接入支持OSC的软件玩起来： * 音乐: [SonicPi](/extension_guide/sonicPi/) * AI：[Wekinator](http://www.wekinator.org/)","text_tokens":["¶","参考","互操作","消息","为","或者","新版","优势","、","喜欢","玩起来","成器","具体","好","目前","www","类似","地址","[","含义","http","其他",":","演示","这些","计算机","刷新率","！","联网","由","(",",","到","scratch","输出","屏幕","支持","demo","address","_","最","高","计算","你","算机","接入","1","*","一则","即可","是","syntien","互操作性","部分","制面","的",".","手写","最新","配置","允许","没有","项目","server","sonicpi","使用","sound","codelab",">","控制面板","信号","在","几乎","里","可","它",")","地"," ","（","/","org","之后","增强","说明","将","以及","积木","）","提醒","都","wekinator","可以","包括","osc","。","表演","输入","我","准确性","interface","两类","手柄","画笔","服务","一种","甚至","面板","协议","推荐","guide","用","一个","自定义","上","组织","一切都是","用于","源码","list","灵活","压力","args","准确","请","adapter","一切","则","音乐","视频","最新版","很","iphone","粗细","或","2","跟","灵活性","操作","软件","内置","界面","ai","找到","目的","，","通过","自定","相关","和","手写板","定义","参数","媒体","如此","任何","控制","如果","control","中","力度","open","]","声音","多媒体","又","设备","其","例子","下载","ip","操作性","：","了","每","起来","按压","extension","等","活性","unipad","玩起","=","丰富","url","访问","个","多种","合成器","文档","12361","进阶","端口","结合","开始","client","刷新","进入","介绍","延迟","充当","提供","3.7","构成","合成","游戏","继而"],"title":"OSC","title_tokens":["osc"]},{"location":"extension_guide/osc/#osc-open-sound-control","text":"","text_tokens":[],"title":"OSC (Open Sound Control)","title_tokens":[" ","osc","(","control",")","sound","open"]},{"location":"extension_guide/osc/#_1","text":"OSC (Open Sound Control) 是一种用于将声音合成器、计算机和其他多媒体设备联网的协议，用于音乐表演或表演控制等目的。OSC 的优势包括互操作性，准确性，灵活性以及增强的组织和文档。 最新版的 CodeLab Adapter( >= 3.7.1 )内置了 OSC 服务，端口为 12361 CodeLab Adapter即可充当 OSC server，又可充当 OSC client， 两类积木都提供了","text_tokens":["和","1","媒体","包括","osc","互操作","为","控制","新版","即可","。","表演","control","、","是","优势","互操作性","准确性","open","成器","声音","多媒体","的","设备","最新",".","又","两类","服务","操作性","一种","server","sound","协议","codelab","了",">","等","活性","组织","其他","=","用于","计算机","灵活","可","联网","(","合成器",")","准确","以及","adapter","文档","12361","音乐","端口"," ","最新版","client","或","灵活性","增强","3.7","操作","充当","提供","合成","将","内置","计算","积木","目的","，","都","算机"],"title":"介绍","title_tokens":["介绍"]},{"location":"extension_guide/osc/#_2","text":"","text_tokens":[],"title":"积木说明","title_tokens":["积木","说明"]},{"location":"extension_guide/osc/#_3","text":"","text_tokens":[],"title":"例子","title_tokens":["例子"]},{"location":"extension_guide/osc/#demo","text":"","text_tokens":[],"title":"demo","title_tokens":["demo"]},{"location":"extension_guide/osc/#demo_1","text":"osc 手写板 如果你使用 IPhone 或者其他支持压力输入的屏幕，则可以通过按压力度控制画笔粗细。","text_tokens":["可以","手写板","osc","或者","控制","如果","。","输入","通过","力度","的","手写","你","画笔","使用","按压","其他","压力","屏幕","则"," ","支持","iphone","粗细","，"],"title":"demo 源码","title_tokens":[" ","demo","源码"]},{"location":"extension_guide/osc/#_4","text":"下载 OSC 软件(演示视频里用的是 Syntien ), 将其配置到 Adapter OSC Server 上（ Adapter_IP:12361 ） 之后进入 interface，开始操作即可。 输出的 osc 信号将进入 Adapter，继而可以在 Scratch 的 OSC 积木中访问它。 一则 osc 消息由 2 部分构成: address(地址，类似 url) args（参数，是个 list）, 每一个参数的含义请参考具体 OSC 软件的文档说明 address 和 args 可以在具体 osc 软件中找到。","text_tokens":["可以","和","参数","参考","一则","osc","消息","即可","。","是","中","syntien","部分","的","interface","具体","配置","其","下载","ip","server","类似","地址","每","含义","用","信号","一个","上","在",":","演示","里","它","访问","url","由","args","(",",",")","到","scratch","个","输出","请","adapter","list","文档","12361"," ","视频","（","开始","进入","2","之后","address","_","构成","软件","操作","说明","将","）","积木","找到","，","继而"],"title":"操作说明","title_tokens":["操作","说明"]},{"location":"extension_guide/osc/#_5","text":"一切都是消息！","text_tokens":["消息","！","一切都是","一切"],"title":"提醒","title_tokens":["提醒"]},{"location":"extension_guide/osc/#osc-client","text":"我目前最喜欢的 OSC client 是: Syntien Unipad","text_tokens":[" ","unipad","client",":","目前","osc","是","喜欢","最","syntien","我","的"],"title":"OSC 相关软件推荐(client)","title_tokens":[" ","相关","client","osc","(","软件",")","推荐"]},{"location":"extension_guide/osc/#syntien","text":"Syntien 提供了丰富的控制面板 它甚至允许你自定义面板！","text_tokens":[" ","你","自定","定义","丰富","允许","制面","它","控制","！","提供","甚至","面板","了","syntien","的","控制面板","自定义"],"title":"Syntien","title_tokens":["syntien"]},{"location":"extension_guide/osc/#unipad","text":"Unipad 提供多种游戏手柄界面，这些可以很好地跟Scratch项目结合！ OSC 如此高的刷新率，几乎没有任何延迟","text_tokens":["可以","如此","osc","任何","的","手柄","好","没有","项目","unipad","刷新率","这些","几乎","！","多种","地","scratch"," ","结合","很","刷新","延迟","跟","提供","高","界面","游戏","，"],"title":"Unipad","title_tokens":["unipad"]},{"location":"extension_guide/osc/#_6","text":"接入支持OSC的软件玩起来： * 音乐: [SonicPi](/extension_guide/sonicPi/) * AI：[Wekinator](http://www.wekinator.org/)","text_tokens":["接入","*","osc","玩起来","的","]",".","www","sonicpi","：","[","起来","guide","extension","http","玩起",":","(",")","音乐"," ","支持","/","org","_","软件","ai","wekinator"],"title":"进阶","title_tokens":["进阶"]},{"location":"extension_guide/physical_blocks/","text":"Tutorial ¶ 介绍 ¶ 提醒 建议使用2.0版本: physical blocks 2.0 。 不久将弃用1.0版本。 使用 physical blocks，可以在一张桌子上对实物进行编程。 Windows 和 Mac 用户开箱可用。 Linux需要安装依赖（参考文末） 建议以 入门案例 为模版。 参考: CodeLab DynamicTable: A Seeing World CodeLab DynamicTable: 一个可实施的技术方案 积木介绍 ¶ 可以从 arucogen 查询 ArUco marker id Demo ¶ 入门案例 ¶ 分享两个入门案例: Scratch-marker-angle-demo.sb3 : 获取 marker 旋转角 Scratch-spell-demo.sb3 : 获取 marker id 列表(从左到右，从上到下) 更多案例 ¶ 第一期的直播演示项目 智能家居展厅 FAQ ¶ 如何打印 Marker ¶ 我们提供了一份30张的版本: 你可以从 arucogen 里打印（建议从编号1开始） 更多细节参考 CodeLab DynamicTable: 一个可实施的技术方案 默认的Marker只有50种, 想要更多怎么办 ¶ 默认是 4X4_50 (最多50种)的marker， 你可以选择 4x4_100 (最多100种)，或者 4x4_1000 (最多1000种) 选择之后请修改(推荐使用 JupyterLab )插件里对应的代码(104行): # aruco_dict = cv2.aruco.Dictionary_get(cv2.aruco.DICT_4X4_50) aruco_dict = cv2 . aruco . Dictionary_get ( cv2 . aruco . DICT_4X4_100 ) 关于不同的marker数量决定了字典的大小，越小的数字，鲁棒性越好。 考虑到大多数用户的场景，50个是够用的，所以我们默认采用50. Linux 用户 ¶ Linux 用户需要手动安装 opencv-contrib-python （有系统依赖）。 树莓派用户 ¶ 安装依赖系统 sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev sudo apt-get install libxvidcore-dev libx264-dev sudo apt install libatlas-base-dev sudo apt-get install qt4-dev-tools sudo apt-get install libhdf5-dev libhdf5-serial-dev libhdf5-103 之后安装 opencv-contrib-python pip3 install opencv-contrib-python==3.4.6.27","text_tokens":["¶","libxvidcore","a","参考","opencv","为","或者","install","更","arucogen","apt","选择","contrib","从左到右","多","好","进行","id","智能","查询","树莓","默认","两个",":","演示","系统","(",",","scratch","到","libavcodec","实施","越","一张","可用","demo","怎么办","如何","_","列表","关于","tutorial","spell","数字","鲁棒性","展厅","你","libtiff5","采用","1","linux","智能家居","种","代码","libavformat","windows","文末","是","有","的",".","libatlas","不同","seeing","实物","一期","项目","第一期","使用","codelab","#","在","以","考虑","libswscale","里","可","派",")","编程","aruco","libv4l","需要","角"," ","（","我们","sb3","之后","最多","dictionary","libjasper","104","libpng12","pip3","python","）","对","积木","提醒","直播","桌子","行","可以","qt4","打印","tools","。","libjpeg","对应","分享","小","dev","将弃","sudo","想要","world","案例","只有","所以","libx264","physical","推荐","用","一个","够用","上","4x4","依赖","dynamictable","编号","angle","怎么","请","字典","1.0","手动","修改","-","模版","marker","家居","第一","get","数量","base","3.4","100","不久","，","1000","多数","和","技术","大小","场景","开箱","从","从上到下","建议","libhdf5","serial","mac","细节","50","安装","决定","blocks","版本","cv2","103","了","6.27","入门","上到","张","=","个","faq","大多","dict","插件","方案","开始","用户","介绍","大多数","jupyterlab","一份","提供","30","2.0","获取","旋转"],"title":"physical blocks 1.0","title_tokens":[" ","physical","1.0","blocks"]},{"location":"extension_guide/physical_blocks/#tutorial","text":"","text_tokens":[],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/physical_blocks/#_1","text":"提醒 建议使用2.0版本: physical blocks 2.0 。 不久将弃用1.0版本。 使用 physical blocks，可以在一张桌子上对实物进行编程。 Windows 和 Mac 用户开箱可用。 Linux需要安装依赖（参考文末） 建议以 入门案例 为模版。 参考: CodeLab DynamicTable: A Seeing World CodeLab DynamicTable: 一个可实施的技术方案","text_tokens":["可以","和","a","技术","linux","参考","为","windows","开箱","。","文末","建议","的","将弃","mac","安装","进行","blocks","实物","版本","seeing","world","案例","使用","physical","codelab","入门","用","一个","在","上","以",":","依赖","dynamictable","可","）","编程","1.0","需要","实施","一张"," ","（","方案","模版","用户","可用","不久","2.0","对","提醒","，","桌子"],"title":"介绍","title_tokens":["介绍"]},{"location":"extension_guide/physical_blocks/#_2","text":"可以从 arucogen 查询 ArUco marker id","text_tokens":["可以"," ","id","marker","查询","从","arucogen","aruco"],"title":"积木介绍","title_tokens":["介绍","积木"]},{"location":"extension_guide/physical_blocks/#demo","text":"","text_tokens":[],"title":"Demo","title_tokens":["demo"]},{"location":"extension_guide/physical_blocks/#_3","text":"分享两个入门案例: Scratch-marker-angle-demo.sb3 : 获取 marker 旋转角 Scratch-spell-demo.sb3 : 获取 marker id 列表(从左到右，从上到下)","text_tokens":["从上到下","分享",".","从左到右","id","案例","入门","两个","上到",":","angle","(","scratch",")","角"," ","-","marker","demo","sb3","，","列表","spell","获取","旋转"],"title":"入门案例","title_tokens":["案例","入门"]},{"location":"extension_guide/physical_blocks/#_4","text":"第一期的直播演示项目 智能家居展厅","text_tokens":[" ","展厅","智能家居","演示","第一","智能","家居","一期","项目","第一期","的","直播"],"title":"更多案例","title_tokens":["案例","更","多"]},{"location":"extension_guide/physical_blocks/#faq","text":"","text_tokens":[],"title":"FAQ","title_tokens":["faq"]},{"location":"extension_guide/physical_blocks/#marker","text":"我们提供了一份30张的版本: 你可以从 arucogen 里打印（建议从编号1开始） 更多细节参考 CodeLab DynamicTable: 一个可实施的技术方案","text_tokens":["可以","技术","1","参考","打印","更","从","arucogen","建议","的","细节","多","版本","了","codelab","张","一个",":","dynamictable","里","编号","可","实施"," ","（","我们","开始","方案","一份","提供","30","）","你"],"title":"如何打印 Marker","title_tokens":[" ","打印","如何","marker"]},{"location":"extension_guide/physical_blocks/#marker50","text":"默认是 4X4_50 (最多50种)的marker， 你可以选择 4x4_100 (最多100种)，或者 4x4_1000 (最多1000种) 选择之后请修改(推荐使用 JupyterLab )插件里对应的代码(104行): # aruco_dict = cv2.aruco.Dictionary_get(cv2.aruco.DICT_4X4_50) aruco_dict = cv2 . aruco . Dictionary_get ( cv2 . aruco . DICT_4X4_100 ) 关于不同的marker数量决定了字典的大小，越小的数字，鲁棒性越好。 考虑到大多数用户的场景，50个是够用的，所以我们默认采用50.","text_tokens":["可以","采用","大小","场景","种","代码","或者","。","对应","是","小","多数","的","选择",".","50","决定","好","不同","cv2","使用","所以","默认","了","推荐","#","够用","考虑","4x4","=",":","里","个","(","到",")","请","aruco","字典","大多","dict","越","修改"," ","插件","我们","用户","marker","，","大多数","之后","jupyterlab","最多","get","数量","_","dictionary","关于","104","数字","100","鲁棒性","你","1000","行"],"title":"默认的Marker只有50种, 想要更多怎么办","title_tokens":[" ","想要","marker","怎么办","种","只有","更","怎么",",","默认","的","50","多"]},{"location":"extension_guide/physical_blocks/#linux","text":"Linux 用户需要手动安装 opencv-contrib-python （有系统依赖）。","text_tokens":[" ","安装","-","（","用户","linux","opencv","系统","依赖","。","）","有","python","手动","需要","contrib"],"title":"Linux 用户","title_tokens":[" ","用户","linux"]},{"location":"extension_guide/physical_blocks/#_5","text":"安装依赖系统 sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev sudo apt-get install libxvidcore-dev libx264-dev sudo apt install libatlas-base-dev sudo apt-get install qt4-dev-tools sudo apt-get install libhdf5-dev libhdf5-serial-dev libhdf5-103 之后安装 opencv-contrib-python pip3 install opencv-contrib-python==3.4.6.27","text_tokens":["libxvidcore","libavformat","qt4","opencv","install","tools","libjpeg","dev","libhdf5","apt","libatlas","sudo","serial","contrib",".","安装","libx264","103","6.27","libswscale","=","依赖","系统","libavcodec","libv4l"," ","-","之后","get","base","3.4","libjasper","libpng12","pip3","python","libtiff5"],"title":"树莓派用户","title_tokens":["用户","树莓","派"]},{"location":"extension_guide/physical_blocks2/","text":"Tutorial ¶ 介绍 ¶ physical blocks 2.0，新的更新我们都将在这个版本是进行， physical blocks 1.0 在未来将弃用。 使用 physical blocks，可以在一张桌子上对实物进行编程。 Windows 和 Mac 用户开箱可用。 Linux需要安装依赖（参考文末） 提醒 CodeLab Adapter版本 >= 3.7.3 参考: CodeLab DynamicTable: A Seeing World CodeLab DynamicTable: 一个可实施的技术方案 积木介绍 ¶ 可以从 arucogen 查询 ArUco marker id Demo ¶ 入门案例 ¶ 分享两个入门案例: physical-blocks2-angle-demo : 获取 marker 旋转角 physical-blocks2-spell-demo : 获取 marker id 列表(从左到右，从上到下) 更多案例 ¶ 第一期的直播演示项目 智能家居展厅 FAQ ¶ 刷新率/FPS ¶ 在 MacOS（2.3 GHz Intel Core i5）下，大约达到10帧的刷新率 目前尚未发布的 Pro 版本大约是 20 帧的刷新率 可使用以下技巧观察刷新率: 与1.0版本的区别？ ¶ 标记列表默认是字符串(序列化之后)，可以随意与scrath积木组合(诸如 xx包含xx 积木)，避免因为操作list引起的崩溃（诸如将list保存为变量）。 在2.0中，直到主动使用JSON parse积木解析后，它才称为列表。相关操作参考: json积木 ，也可参考前边的例子: physical-blocks2-spell-demo 此外2.0 只使用一个积木更新数据，提高标签存在的稳定性（也提高速度），其中一种典型的编程模式是: 在一次更新数据之后的积木都对应更新瞬间的视野状态。而不像1.0，每个积木都有各自瞬间的视野。 如何打印 Marker ¶ 我们提供了一份30张的版本: 你可以从 arucogen 里打印（建议从编号1开始） 更多细节参考 CodeLab DynamicTable: 一个可实施的技术方案 默认的Marker支持250种不同类型（marker id） ¶ 默认是 4X4_250 (最多250种)的marker， 你可以选择： 4x4_50 (最多50种) 4x4_250 (最多250种) 4x4_100 (最多100种) 4x4_1000 (最多1000种) 选择之后请修改(推荐使用 JupyterLab )插件里对应的代码(104行): # aruco_dict = cv2.aruco.Dictionary_get(cv2.aruco.DICT_4X4_250) aruco_dict = cv2 . aruco . Dictionary_get ( cv2 . aruco . DICT_4X4_1000 ) 关于不同的marker数量决定了字典的大小，越小的数字，鲁棒性越好。 Linux 用户 ¶ Linux 用户需要手动安装 opencv-contrib-python （有系统依赖）。 树莓派用户 ¶ 安装依赖系统 sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev sudo apt-get install libxvidcore-dev libx264-dev sudo apt install libatlas-base-dev sudo apt-get install qt4-dev-tools sudo apt-get install libhdf5-dev libhdf5-serial-dev libhdf5-103 之后安装 opencv-contrib-python pip3 install opencv-contrib-python==3.4.6.27","text_tokens":["¶","libxvidcore","a","参考","opencv","稳定","为","install","更","达到","arucogen","apt","选择","contrib","从左到右","多","直到","json","？","不","进行","id","好","智能","目前","引起","查询","视野","树莓","默认","后","两个","区别","技巧","新",":","演示","刷新率","大约","其中","系统","(","libavcodec","字符","实施","越","一张","支持","可用","demo","ghz","如何","10","变量","列表","定性","_","tutorial","spell","关于","数字","因为","鲁棒性","展厅","一次","你","解析","libtiff5","序列化","1","linux","智能家居","典型","种","代码","libavformat","windows","只","模式","文末","是","3","有","的",".","xx","libatlas","core","不同","seeing","实物","主动","一期","项目","以下","第一期","观察","使用","标记","而","codelab","保存","标签","#",">","fps","250","在","序列","libswscale","它","可","里","派","帧",")","稳定性","编程","aruco","pro","libv4l","需要","角","才"," ","（","我们","/","状态","之后","最多","dictionary","libjasper","104","libpng12","pip3","将","python","）","对","积木","提醒","直播","都","桌子","行","可以","更新","称为","qt4","打印","tools","。","存在","macos","对应","libjpeg","分享","小","dev","包含","将弃","sudo","world","与","案例","parse","一种","libx264","blocks2","physical","推荐","用","一个","20","上","也","4x4","依赖","i5","dynamictable","下","scrath","list","编号","angle","前边","请","字典","1.0","adapter","手动","修改","-","marker","家居","第一","像","get","数量","base","3.4","操作","数据","100","，","1000","相关","和","技术","大小","字符串","开箱","诸如","从","从上到下","速度","中","建议","libhdf5","serial","未来","mac","尚未","细节","各自","50","安装","决定","例子","blocks","类型","版本","每个","cv2","避免","随意","：","组合","103","了","6.27","发布","入门","上到","2.3","张","=","这个","faq","瞬间","dict","插件","方案","此外","用户","提高","刷新","崩溃","介绍","intel","开始","jupyterlab","一份","提供","30","2.0","3.7","获取","旋转"],"title":"physical blocks 2.0","title_tokens":[" ","2.0","physical","blocks"]},{"location":"extension_guide/physical_blocks2/#tutorial","text":"","text_tokens":[],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/physical_blocks2/#_1","text":"physical blocks 2.0，新的更新我们都将在这个版本是进行， physical blocks 1.0 在未来将弃用。 使用 physical blocks，可以在一张桌子上对实物进行编程。 Windows 和 Mac 用户开箱可用。 Linux需要安装依赖（参考文末） 提醒 CodeLab Adapter版本 >= 3.7.3 参考: CodeLab DynamicTable: A Seeing World CodeLab DynamicTable: 一个可实施的技术方案","text_tokens":["可以","和","更新","a","技术","linux","参考","windows","开箱","。","文末","是","3","未来","将弃","的","mac",".","安装","进行","blocks","实物","版本","seeing","world","使用","physical","codelab",">","用","一个","在","上","新","依赖","=",":","dynamictable","可","这个","）","编程","1.0","需要","adapter","实施","一张"," ","（","我们","方案","用户","可用","2.0","3.7","将","对","提醒","，","都","桌子"],"title":"介绍","title_tokens":["介绍"]},{"location":"extension_guide/physical_blocks2/#_2","text":"可以从 arucogen 查询 ArUco marker id","text_tokens":["可以"," ","id","marker","查询","从","arucogen","aruco"],"title":"积木介绍","title_tokens":["介绍","积木"]},{"location":"extension_guide/physical_blocks2/#demo","text":"","text_tokens":[],"title":"Demo","title_tokens":["demo"]},{"location":"extension_guide/physical_blocks2/#_3","text":"分享两个入门案例: physical-blocks2-angle-demo : 获取 marker 旋转角 physical-blocks2-spell-demo : 获取 marker id 列表(从左到右，从上到下)","text_tokens":["从上到下","分享","从左到右","id","案例","blocks2","physical","入门","两个","上到",":","angle","(",")","角"," ","-","demo","marker","，","列表","spell","获取","旋转"],"title":"入门案例","title_tokens":["案例","入门"]},{"location":"extension_guide/physical_blocks2/#_4","text":"第一期的直播演示项目 智能家居展厅","text_tokens":[" ","展厅","智能家居","演示","第一","智能","家居","一期","项目","第一期","的","直播"],"title":"更多案例","title_tokens":["案例","更","多"]},{"location":"extension_guide/physical_blocks2/#faq","text":"","text_tokens":[],"title":"FAQ","title_tokens":["faq"]},{"location":"extension_guide/physical_blocks2/#fps","text":"在 MacOS（2.3 GHz Intel Core i5）下，大约达到10帧的刷新率 目前尚未发布的 Pro 版本大约是 20 帧的刷新率 可使用以下技巧观察刷新率:","text_tokens":["达到","macos","是","的","尚未","core","目前","版本","以下","观察","使用","发布","2.3","20","在","技巧","i5","下","大约","刷新率","可",":","帧","pro"," ","（","刷新","intel","ghz","10","）","，"],"title":"刷新率/FPS","title_tokens":["刷新率","fps","/","刷新"]},{"location":"extension_guide/physical_blocks2/#10","text":"标记列表默认是字符串(序列化之后)，可以随意与scrath积木组合(诸如 xx包含xx 积木)，避免因为操作list引起的崩溃（诸如将list保存为变量）。 在2.0中，直到主动使用JSON parse积木解析后，它才称为列表。相关操作参考: json积木 ，也可参考前边的例子: physical-blocks2-spell-demo 此外2.0 只使用一个积木更新数据，提高标签存在的稳定性（也提高速度），其中一种典型的编程模式是: 在一次更新数据之后的积木都对应更新瞬间的视野状态。而不像1.0，每个积木都有各自瞬间的视野。","text_tokens":["参考","稳定","为","直到","json","不","引起","视野","默认","后",":","其中","(","字符","demo","变量","列表","定性","spell","因为","一次","解析","序列化","典型","只","模式","有","是","xx","的","主动","而","使用","标记","保存","标签","在","序列","它","可",")","稳定性","编程","才"," ","（","状态","之后","将","）","积木","都","可以","称为","更新","。","存在","对应","包含","与","parse","一种","blocks2","physical","一个","也","scrath","list","前边","1.0","-","像","操作","数据","，","相关","字符串","诸如","速度","中","各自","例子","每个","避免","随意","组合","瞬间","此外","提高","崩溃","2.0"],"title":"与1.0版本的区别？","title_tokens":["？","版本","与","1.0","的","区别"]},{"location":"extension_guide/physical_blocks2/#marker","text":"我们提供了一份30张的版本: 你可以从 arucogen 里打印（建议从编号1开始） 更多细节参考 CodeLab DynamicTable: 一个可实施的技术方案","text_tokens":["可以","技术","1","参考","打印","更","从","arucogen","建议","的","细节","多","版本","了","codelab","张","一个",":","dynamictable","里","编号","可","实施"," ","（","我们","开始","方案","一份","提供","30","）","你"],"title":"如何打印 Marker","title_tokens":[" ","打印","如何","marker"]},{"location":"extension_guide/physical_blocks2/#marker250marker-id","text":"默认是 4X4_250 (最多250种)的marker， 你可以选择： 4x4_50 (最多50种) 4x4_250 (最多250种) 4x4_100 (最多100种) 4x4_1000 (最多1000种) 选择之后请修改(推荐使用 JupyterLab )插件里对应的代码(104行): # aruco_dict = cv2.aruco.Dictionary_get(cv2.aruco.DICT_4X4_250) aruco_dict = cv2 . aruco . Dictionary_get ( cv2 . aruco . DICT_4X4_1000 ) 关于不同的marker数量决定了字典的大小，越小的数字，鲁棒性越好。","text_tokens":["可以","大小","种","代码","。","对应","是","小","的","选择",".","50","决定","好","不同","cv2","：","使用","默认","了","推荐","#","250","4x4","=",":","里","(",")","请","aruco","字典","dict","越","修改"," ","插件","marker","，","之后","jupyterlab","最多","get","数量","_","dictionary","关于","104","数字","100","鲁棒性","你","1000","行"],"title":"默认的Marker支持250种不同类型（marker id）","title_tokens":["（","支持"," ","不同","id","marker","类型","种","默认","）","的","250"]},{"location":"extension_guide/physical_blocks2/#linux","text":"Linux 用户需要手动安装 opencv-contrib-python （有系统依赖）。","text_tokens":[" ","安装","-","（","用户","linux","opencv","系统","依赖","。","）","有","python","手动","需要","contrib"],"title":"Linux 用户","title_tokens":[" ","用户","linux"]},{"location":"extension_guide/physical_blocks2/#_5","text":"安装依赖系统 sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev sudo apt-get install libxvidcore-dev libx264-dev sudo apt install libatlas-base-dev sudo apt-get install qt4-dev-tools sudo apt-get install libhdf5-dev libhdf5-serial-dev libhdf5-103 之后安装 opencv-contrib-python pip3 install opencv-contrib-python==3.4.6.27","text_tokens":["libxvidcore","libavformat","qt4","opencv","install","tools","libjpeg","dev","libhdf5","apt","libatlas","sudo","serial","contrib",".","安装","libx264","103","6.27","libswscale","=","依赖","系统","libavcodec","libv4l"," ","-","之后","get","base","3.4","libjasper","libpng12","pip3","python","libtiff5"],"title":"树莓派用户","title_tokens":["用户","树莓","派"]},{"location":"extension_guide/posenet/","text":"Tutorial ¶ hello world","text_tokens":[" ","¶","hello","world","tutorial"],"title":"posenet","title_tokens":["posenet"]},{"location":"extension_guide/posenet/#tutorial","text":"hello world","text_tokens":[" ","hello","world"],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/python_exec/","text":"Python exec kernel ¶ 依赖 ¶ 安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器. 步骤 1：打开 Codelab Adapter ¶ 双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。 Python exec 插件不是内置插件，需要自行在 插件市场 下载。 exec 比 eval 更为强大（关于二者的区别参考 这儿 ） ，可以执行任何 Python 代码，你甚至可以在 Scratch 里构建木马病毒。 步骤 2：打开 Codelab Scratch3 ¶ 点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常 步骤 3：hello world ¶ 选择对应的 Scratch3 插件：EIM. 在 Scratch 里使用 插件启停积木 启动 CodeLab Adapter Python exec 插件。 现在你可以运行任何Python代码了! 我们还是以打开浏览器为例, 可以直接运行: import webbrowser; webbrowser.open(\"https://www.codelab.club\") ， import 也是没问题的！ 提醒 广播的主题是 eim/extension_python_exec , extension_python_exec 正是插件的名字 延伸 ¶ python里能做的许多事情，现在你都可以在这个积木里做。让我们来做一些更复杂的事情。 让我们使用 Python 在Scratch里获取 CodeLab Adapter的最新版本，并让小猫🐱读出来 import requests latest_version_url = \"http://adapter.codelab.club/about/latest_version.json\" response = requests . get ( latest_version_url ) . json () print ( response [ \"version\" ]) 我们首先需要把这些代码变成单行代码， 可以使用 python single line convert 来做: 点击convert，开始转化，转化之后得到: exec(\"\"\"\\nimport requests\\nlatest_version_url = \"http://adapter.codelab.club/about/latest_version.json\"\\nresponse = requests.get(latest_version_url).json()\\nprint(response[\"version\"])\\n\"\"\") 运行它！ 完美！ 提醒 我们使用了一些奇技淫巧在Scratch里写大段 Python 代码， 仅仅是出于好玩和 because we can 的 geek 精神，通常更好的做法是将一些功能代码放在adapter 扩展文件里，而不是在Scratch 里写大段代码，那将是难以阅读和理解的。","text_tokens":["¶","团队","参考","hello","现阶段","为","或者","convert","更","还是","页面","选择","得到","让","多","https","json","can","version","目前","www","木马病毒","大段","主题","病毒","做法","难以","二者","默认","[","geek","区别","requests","http",":","这些","打开","图中","nresponse","！","构建","市场","response","强大",",","scratch","步骤","(","\\","nlatest","because","淫巧","陆续","执行","支持","许多","做","比","_","关于","为例","firefox","你","浏览器","首先","kernel","eim","出于","1","没","代码","3","是","直接","能",".","的","最新","文件","呈现","仅仅","更为","latest","about","而","使用","codelab","自行","理解","在","以","阶段","print","里","它","木马","single",")","exec","!","需要","连接"," ","/","（","我们","箭头","小圆点","奇技","放在","之后","说明","python","将","）","积木","点击","提醒","名字","都","完美","可以","那","这儿","启停","。","效果","对应","不是","官方","复杂","nimport","其设","world","与","运行","奇技淫巧","双击","甚至","scratch3.0","正是","如下","最佳","精神","出来","line","上","也","现在","依赖","转化","通常","来","圆点",";","adapter","并","一些","广播","2","web","import","get","启动","扩展","🐱","单行","scratch3","内置","阅读","\"","，","问题","和","任何","webbrowser","正常","nprint","建议","chrome","读出来","好玩","open","]","安装","下载","把","版本","：","club","we","了","extension","eval","链接","=","ui","url","这个","延伸","小猫","浏览","n","绿色","插件","读出","开始","变成","所指","事情","获取","更好","写","功能"],"title":"Python exec kernel","title_tokens":[" ","exec","python","kernel"]},{"location":"extension_guide/python_exec/#python-exec-kernel","text":"","text_tokens":[],"title":"Python exec kernel","title_tokens":[" ","exec","python","kernel"]},{"location":"extension_guide/python_exec/#_1","text":"安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器.","text_tokens":["团队","现阶段","为","更","效果","建议","chrome",".","官方","多","安装","其设","目前","版本","使用","默认","codelab","最佳","在","阶段","scratch","adapter","浏览","陆续"," ","支持","/","将","firefox","，","浏览器"],"title":"依赖","title_tokens":["依赖"]},{"location":"extension_guide/python_exec/#1-codelab-adapter","text":"双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。 Python exec 插件不是内置插件，需要自行在 插件市场 下载。 exec 比 eval 更为强大（关于二者的区别参考 这儿 ） ，可以执行任何 Python 代码，你甚至可以在 Scratch 里构建木马病毒。","text_tokens":["可以","这儿","参考","任何","代码","。","不是","的","你","下载","更为","木马病毒","双击","甚至","病毒","二者","默认","codelab","自行","eval","区别","在","打开","里","木马","构建","市场","强大","）","scratch","exec","adapter","浏览","需要","执行"," ","插件","（","之后","启动","比","关于","将","python","内置","，","浏览器"],"title":"步骤 1：打开 Codelab Adapter","title_tokens":[" ","1","打开","：","步骤","codelab","adapter"]},{"location":"extension_guide/python_exec/#2-codelab-scratch3","text":"点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常","text_tokens":["这儿","或者","正常","页面","的","呈现","与","scratch3.0","如下","codelab","链接","上","ui",":","打开","图中",",","圆点","adapter","绿色","连接"," ","箭头","小圆点","web","所指","说明","scratch3","将","点击"],"title":"步骤 2：打开 Codelab Scratch3","title_tokens":[" ","打开","2","：","步骤","scratch3","codelab"]},{"location":"extension_guide/python_exec/#3hello-world","text":"选择对应的 Scratch3 插件：EIM. 在 Scratch 里使用 插件启停积木 启动 CodeLab Adapter Python exec 插件。 现在你可以运行任何Python代码了! 我们还是以打开浏览器为例, 可以直接运行: import webbrowser; webbrowser.open(\"https://www.codelab.club\") ， import 也是没问题的！ 提醒 广播的主题是 eim/extension_python_exec , extension_python_exec 正是插件的名字","text_tokens":["eim","可以","启停","没","任何","代码","webbrowser","。","对应","是","直接","还是",".","的","选择","open","https","运行","www","：","主题","club","使用","正是","codelab","了","extension","在","以","也","现在",":","打开","里","！","(",",","scratch",")","exec","adapter","!","浏览",";"," ","插件","我们","/","广播","，","\"","import","启动","_","为例","scratch3","python","名字","积木","提醒","你","浏览器","问题"],"title":"步骤 3：hello world","title_tokens":[" ","hello","world","：","步骤","3"]},{"location":"extension_guide/python_exec/#_2","text":"python里能做的许多事情，现在你都可以在这个积木里做。让我们来做一些更复杂的事情。 让我们使用 Python 在Scratch里获取 CodeLab Adapter的最新版本，并让小猫🐱读出来 import requests latest_version_url = \"http://adapter.codelab.club/about/latest_version.json\" response = requests . get ( latest_version_url ) . json () print ( response [ \"version\" ]) 我们首先需要把这些代码变成单行代码， 可以使用 python single line convert 来做: 点击convert，开始转化，转化之后得到: exec(\"\"\"\\nimport requests\\nlatest_version_url = \"http://adapter.codelab.club/about/latest_version.json\"\\nresponse = requests.get(latest_version_url).json()\\nprint(response[\"version\"])\\n\"\"\") 运行它！ 完美！ 提醒 我们使用了一些奇技淫巧在Scratch里写大段 Python 代码， 仅仅是出于好玩和 because we can 的 geek 精神，通常更好的做法是将一些功能代码放在adapter 扩展文件里，而不是在Scratch 里写大段代码，那将是难以阅读和理解的。","text_tokens":["convert","更","得到","让","json","can","version","大段","做法","难以","[","geek","requests","http",":","这些","nresponse","！","response","(","\\","scratch","nlatest","because","淫巧","许多","做","_","你","出于","首先","代码","是","能","的",".","最新","文件","仅仅","latest","about","而","使用","codelab","理解","在","print","里","它","single",")","exec","需要"," ","/","我们","奇技","放在","之后","python","完美","将","积木","点击","提醒","都","可以","那","。","不是","复杂","nimport","运行","奇技淫巧","精神","出来","line","现在","转化","通常","来","adapter","并","一些","扩展","import","get","🐱","单行","阅读","\"","，","和","nprint","读出来","好玩","]","把","版本","club","we","了","=","url","这个","小猫","n","读出","开始","变成","事情","获取","更好","写","功能"],"title":"延伸","title_tokens":["延伸"]},{"location":"extension_guide/rpi_gpio/","text":"Tutorial ¶ 系统依赖参考 EIM 教程 。 操作树莓派 GPIO 的工具里， gpiozero 尤为出色，因其具有很好的可理解性， 图形化未必意味着更好的可理解性。 为了充分利用 gpiozero，决定只对它做一层薄薄的包装(REPL), 使其在 Scratch 中可用。 尤其适合于那些试图以 Python 去增强 Scratch 的人。 提醒 如果你在用 树莓派 4B， 建议更新一下wiringPi: wiringPi updated to 2.52 for the Raspberry Pi 4B 安装和配置 ¶ 参考 Installing GPIO Zero Raspbian 默认已经预装 gpiozero 。 你需要启动它: sudo systemctl start pigpiod 如果你计划在 PC 或 Mac上对树莓派 GPIO 进行编程， 需要 配置使其可被远程访问 。 同时你需要在本地安装: python -m pip install codelab_adapter_client gpiozero pigpio --user 我们推荐远程访问模式，这意味着，树莓派可以运行在局域网里的任何地方，而你可以在自己的电脑上使用 CodeLab Adapter 对它进行编程，如此一来，你可以把 Scratch 和 Adapter 的所有能力带给它。 当然你也可以在树莓派上运行 Adapter 和 Scratch。 提醒 在 Adapter 3.2 之前，你需要自行从 插件市场 里下载 raspberrypi 插件。 源码地址 树莓派默认地址为: raspberrypi.local , 如果你ping不通它，可以手动在插件里填写树莓派ip。 运行树莓派插件，打开 Scratch-rpi-gpiozero 。 提醒 如果你手头没有LED， 你可以 使用命令行工具 gpio ，观察引脚输出变化。 gpio用的mode是wPi，而gpiozero用的是BCM，所以pin17对应wpi的pin0 最后 ¶ 我们并不打算构建完备的积木组操控树莓派，树莓派高度灵活，难以完全积木化它的所有特性，那样不会提高可理解性。 我们希望用户灵活使用 Python 去增强 Scratch ，更好的扩展模式可以参考 Python eval kernel 。 当然一些功能是可以积木化的，期待你来提交 PR。 提醒 Raspbian Scratch 3 Desktop 也是个很好的选择，有丰富的积木。 CodeLab Adapter的目标是**连接**。 参考 ¶ gpio 测试工具 wiringPi updated to 2.52 for the Raspberry Pi 4B","text_tokens":["¶","提交","参考","install","为","选择","start","不","好","进行","4b","systemctl","树莓","raspbian","薄薄","组","难以","去","默认","地址","gpiozero","未必",":","系统","打开","计划","构建","市场","(",",","scratch","能力","人","输出","电脑","rpi","化","因","充分利用","可用","期待","做","_","一来","不会","tutorial","3.2","for","所有","你","kernel","eim","同时","完全","*","只","于","局域","模式","有","是","3","的",".","命令行","配置","raspberry","填写","to","installing","没有","而","使用","观察","完备","pc","codelab","pigpio","自行","图形化","出色","一下","理解","在","以","更好","不通","里","可","它","派","教程",")","手头","编程","需要","连接"," ","我们","变化","zero","user","地方","增强","pi","bcm","最后","mode","python","对","积木","提醒","尤其","repl","为了","可以","这","更新","引脚","适合","。","对应","如此一来","sudo","被","运行","目标","特性","led","所以","推荐","意味","用","包装","那样","上","也","测试工具","依赖","源码","pin0","updated","灵活","local","来","本地","adapter","手动","pigpiod","并","希望","当然","-","一些","很","化它","或","扩展","启动","操作","the","预装","，","薄薄的","wiringpi","和","如此","raspberrypi","一层","任何","测试","充分","如果","从","工具","中","建议","mac","操控","决定","其","安装","下载","ip","把","具有","意味着","利用","自己","远程","性","m","试图","wpi","图形","pip","eval","丰富","pin17","高度","试工","访问","之前","个","尤为","2.52","gpio","插件","client","那些","已经","提高","用户","ping","打算","pr","desktop","命令","带给","使","局域网","分利","功能"],"title":"RaspberryPi GPIO","title_tokens":[" ","raspberrypi","gpio"]},{"location":"extension_guide/rpi_gpio/#tutorial","text":"系统依赖参考 EIM 教程 。 操作树莓派 GPIO 的工具里， gpiozero 尤为出色，因其具有很好的可理解性， 图形化未必意味着更好的可理解性。 为了充分利用 gpiozero，决定只对它做一层薄薄的包装(REPL), 使其在 Scratch 中可用。 尤其适合于那些试图以 Python 去增强 Scratch 的人。 提醒 如果你在用 树莓派 4B， 建议更新一下wiringPi: wiringPi updated to 2.52 for the Raspberry Pi 4B","text_tokens":["参考","好","4b","树莓","薄薄","去","gpiozero","未必",":","系统","(",",","scratch","人","因","充分利用","可用","做","for","你","eim","只","于","的","raspberry","to","图形化","出色","一下","理解","在","以","更好","里","可","它","派","教程",")"," ","增强","pi","python","对","提醒","尤其","repl","为了","更新","适合","。","意味","用","包装","依赖","updated","很","操作","the","，","薄薄的","wiringpi","一层","充分","如果","工具","中","建议","决定","其","具有","意味着","利用","性","试图","图形","尤为","2.52","gpio","那些","使","分利"],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/rpi_gpio/#_1","text":"参考 Installing GPIO Zero Raspbian 默认已经预装 gpiozero 。 你需要启动它: sudo systemctl start pigpiod 如果你计划在 PC 或 Mac上对树莓派 GPIO 进行编程， 需要 配置使其可被远程访问 。 同时你需要在本地安装: python -m pip install codelab_adapter_client gpiozero pigpio --user 我们推荐远程访问模式，这意味着，树莓派可以运行在局域网里的任何地方，而你可以在自己的电脑上使用 CodeLab Adapter 对它进行编程，如此一来，你可以把 Scratch 和 Adapter 的所有能力带给它。 当然你也可以在树莓派上运行 Adapter 和 Scratch。 提醒 在 Adapter 3.2 之前，你需要自行从 插件市场 里下载 raspberrypi 插件。 源码地址 树莓派默认地址为: raspberrypi.local , 如果你ping不通它，可以手动在插件里填写树莓派ip。 运行树莓派插件，打开 Scratch-rpi-gpiozero 。 提醒 如果你手头没有LED， 你可以 使用命令行工具 gpio ，观察引脚输出变化。 gpio用的mode是wPi，而gpiozero用的是BCM，所以pin17对应wpi的pin0","text_tokens":["参考","install","为","start","进行","systemctl","树莓","raspbian","地址","默认","gpiozero",":","打开","计划","市场",",","scratch","能力","输出","电脑","rpi","_","一来","3.2","所有","你","同时","局域","模式","是","的",".","命令行","配置","填写","installing","没有","而","使用","观察","pc","codelab","pigpio","自行","在","不通","它","可","里","派","手头","编程","需要"," ","我们","变化","zero","user","地方","bcm","mode","python","对","提醒","可以","这","引脚","。","对应","如此一来","sudo","被","运行","led","所以","推荐","意味","用","上","也","pin0","源码","local","本地","adapter","手动","pigpiod","当然","-","或","启动","预装","，","和","raspberrypi","如此","任何","如果","从","工具","mac","安装","其","下载","ip","把","意味着","自己","远程","m","wpi","pip","pin17","访问","之前","gpio","插件","client","已经","ping","命令","带给","使","局域网"],"title":"安装和配置","title_tokens":["安装","和","配置"]},{"location":"extension_guide/rpi_gpio/#_2","text":"我们并不打算构建完备的积木组操控树莓派，树莓派高度灵活，难以完全积木化它的所有特性，那样不会提高可理解性。 我们希望用户灵活使用 Python 去增强 Scratch ，更好的扩展模式可以参考 Python eval kernel 。 当然一些功能是可以积木化的，期待你来提交 PR。 提醒 Raspbian Scratch 3 Desktop 也是个很好的选择，有丰富的积木。 CodeLab Adapter的目标是**连接**。","text_tokens":["可以","提交","完全","参考","*","。","模式","有","是","3","的","选择","操控","不","你","好","目标","树莓","特性","raspbian","组","难以","完备","性","使用","去","codelab","eval","那样","理解","也","丰富","高度","灵活","可","构建","派","个","scratch","来","adapter","并","希望","当然"," ","化","我们","一些","用户","提高","很","期待","打算","化它","扩展","功能","pr","desktop","增强","连接","不会","python","积木","提醒","所有","，","更好","kernel"],"title":"最后","title_tokens":["最后"]},{"location":"extension_guide/rpi_gpio/#_3","text":"gpio 测试工具 wiringPi updated to 2.52 for the Raspberry Pi 4B","text_tokens":[" ","测试工具","测试","试工","wiringpi","to","4b","updated","the","工具","pi","2.52","for","gpio","raspberry"],"title":"参考","title_tokens":["参考"]},{"location":"extension_guide/simple_NLU/","text":"Tutorial ¶ simple NLU 是一个简单的语义处理器，基于简单的规则匹配，可以做一些有趣的事情。 主要受到 Cozmo 社区 Cozmo-Voice-Commands 项目的启发。 Demo ¶ 以下是一些 demo: Robomaster ¶ Cozmo 学猫叫 ¶ 插件说明 ¶ 使用方式: 到 插件市场 下载插件, 搜索 NLU 插件类型: Adapter Extension 插件源码: extension_simple_NLU.py 依赖 ¶ 安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器. 开始使用 ¶ 我们以前头的 Cozmo 学猫叫项目为例，解释插件的使用。 NLU 是一个语义解析器，语言文本的输入，是任意的。你可以使用 Scratch 内置的语音输入；也可以使用 Siri。 如果你和视频 demo 一样，准备使用 Siri，需要先将 Siri 接入到 Adapter 中，参考 文档 。 步骤 1：打开 Codelab Adapter ¶ 双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。 步骤 2：打开 Codelab Scratch ¶ 点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常 加载 Scratch-simple-nlu-cozmo 提醒 如果你加载遇到问题，可能需要先刷新浏览器缓存 点击绿旗，将运行相应的adapter插件。按下空格将运行示例输入: cozmo 前进50毫米，然后吓跑他，接着右转90度，之后表演一下学猫叫 如果一切正常，可以拿起你的Siri，控制Cozmo啦！ 使用scratch内置语音输入 如果你不想使用Siri，也可以使用CodeLab Scratch内置的语音输入， 以下是案例： Scratch-nlu-cozmo-with-Scratch-input 。按下 a 按键,开始语音输入(默认5秒，你可以自己调节输入时长) 进阶 ¶ 如果你想构建更强大的语义引擎，可以使用 wit.ai 、 api.ai 当然你也可以使用等开源项目 rasa 自行构建，中文用户推荐 Rasa_NLU_Chi","text_tokens":["¶","规则","团队","主要","a","参考","现阶段","为","一样","或者","更","度","、","处理","绿旗","页面","多","简单","nlu","语言","目前","input","先","cozmo","方式","默认","猫叫","然后","准备",":","打开","图中","！","构建","市场","到",",","scratch","步骤","(","强大","解析器","陆续","语音","支持","语义","基于","有趣","demo","语音输入","以前","按下","做","_","tutorial","为例","firefox","遇到","你","浏览器","解析","接入","1","不想","robomaster","是","的",".","呈现","开源","学","受到","项目","以下","中文","吓跑","使用","codelab","自行","理器","一下","在","阶段","搜索","任意","按键","；","秒","时","接着","长",")","需要","90","连接"," ","/","我们","chi","箭头","小圆点","之后","说明","加载","将","拿","点击","解释","simple","提醒","可能","可以","这儿","py","。","表演","效果","输入","右转","缓存","空格","commands","官方","毫米","一切正常","引擎","其设","运行","与","案例","双击","scratch3.0","匹配","如下","推荐","最佳","一个","也","上","想","依赖","源码","voice","调节","圆点","adapter","一切","起","当然","-","视频","一些","社区","2","web","启动","scratch3","内置","示例","ai","启发","，","问题","和","处理器","控制","如果","正常","前进","中","建议","chrome","他","50","安装","siri","下载","类型","版本","：","自己","api","extension","链接","等","ui","头","rasa","相应","5","浏览","文档","进阶","绿色","插件","啦","开始","wit","用户","刷新","文本","所指","事情","with"],"title":"simple NLU","title_tokens":[" ","simple","nlu"]},{"location":"extension_guide/simple_NLU/#tutorial","text":"simple NLU 是一个简单的语义处理器，基于简单的规则匹配，可以做一些有趣的事情。 主要受到 Cozmo 社区 Cozmo-Voice-Commands 项目的启发。","text_tokens":["规则","可以","主要","处理器","。","是","处理","simple","commands","的","简单","nlu","受到","项目","cozmo","匹配","理器","启发","一个","voice"," ","-","语义","基于","一些","有趣","社区","做","事情","，"],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/simple_NLU/#demo","text":"以下是一些 demo:","text_tokens":[" ","一些","demo",":","以下","是"],"title":"Demo","title_tokens":["demo"]},{"location":"extension_guide/simple_NLU/#robomaster","text":"","text_tokens":[],"title":"Robomaster","title_tokens":["robomaster"]},{"location":"extension_guide/simple_NLU/#cozmo","text":"","text_tokens":[],"title":"Cozmo 学猫叫","title_tokens":["cozmo"," ","猫叫","学"]},{"location":"extension_guide/simple_NLU/#_1","text":"使用方式: 到 插件市场 下载插件, 搜索 NLU 插件类型: Adapter Extension 插件源码: extension_simple_NLU.py","text_tokens":["py",".","下载","nlu","类型","使用","方式","extension",":","搜索","源码","市场","到",",","adapter"," ","插件","_","simple"],"title":"插件说明","title_tokens":["插件","说明"]},{"location":"extension_guide/simple_NLU/#_2","text":"安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器.","text_tokens":["团队","现阶段","为","更","效果","建议","chrome",".","官方","多","安装","其设","目前","版本","使用","默认","codelab","最佳","在","阶段","scratch","adapter","浏览","陆续"," ","支持","/","将","firefox","，","浏览器"],"title":"依赖","title_tokens":["依赖"]},{"location":"extension_guide/simple_NLU/#_3","text":"我们以前头的 Cozmo 学猫叫项目为例，解释插件的使用。 NLU 是一个语义解析器，语言文本的输入，是任意的。你可以使用 Scratch 内置的语音输入；也可以使用 Siri。 如果你和视频 demo 一样，准备使用 Siri，需要先将 Siri 接入到 Adapter 中，参考 文档 。","text_tokens":["可以","和","接入","参考","一样","。","如果","是","输入","中","的","你","siri","学","nlu","语言","先","项目","cozmo","使用","猫叫","一个","也","准备","任意","头","；","到","scratch","解析器","adapter","需要","文档","语音"," ","插件","我们","语义","视频","demo","语音输入","以前","文本","为例","内置","将","解释","，","解析"],"title":"开始使用","title_tokens":["使用","开始"]},{"location":"extension_guide/simple_NLU/#1-codelab-adapter","text":"双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。","text_tokens":[" ","浏览","打开","之后","启动","双击","。","默认","codelab","adapter","将","，","浏览器"],"title":"步骤 1：打开 Codelab Adapter","title_tokens":[" ","1","打开","：","步骤","codelab","adapter"]},{"location":"extension_guide/simple_NLU/#2-codelab-scratch","text":"点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常 加载 Scratch-simple-nlu-cozmo 提醒 如果你加载遇到问题，可能需要先刷新浏览器缓存 点击绿旗，将运行相应的adapter插件。按下空格将运行示例输入: cozmo 前进50毫米，然后吓跑他，接着右转90度，之后表演一下学猫叫 如果一切正常，可以拿起你的Siri，控制Cozmo啦！ 使用scratch内置语音输入 如果你不想使用Siri，也可以使用CodeLab Scratch内置的语音输入， 以下是案例： Scratch-nlu-cozmo-with-Scratch-input 。按下 a 按键,开始语音输入(默认5秒，你可以自己调节输入时长)","text_tokens":["a","或者","度","绿旗","页面","nlu","input","先","cozmo","默认","猫叫","然后",":","打开","图中","！","(",",","scratch","语音","语音输入","按下","遇到","你","浏览器","不想","是","的","呈现","学","以下","吓跑","使用","codelab","一下","按键","秒","长","时","接着",")","需要","90","连接"," ","箭头","小圆点","之后","说明","加载","将","拿","提醒","点击","simple","可能","可以","这儿","。","表演","输入","右转","缓存","空格","毫米","一切正常","运行","与","案例","scratch3.0","如下","上","也","调节","圆点","adapter","一切","起","-","web","scratch3","内置","示例","，","问题","控制","如果","正常","前进","他","50","siri","：","自己","链接","ui","相应","5","浏览","绿色","插件","啦","开始","刷新","所指","with"],"title":"步骤 2：打开 Codelab Scratch","title_tokens":[" ","打开","2","：","scratch","步骤","codelab"]},{"location":"extension_guide/simple_NLU/#_4","text":"如果你想构建更强大的语义引擎，可以使用 wit.ai 、 api.ai 当然你也可以使用等开源项目 rasa 自行构建，中文用户推荐 Rasa_NLU_Chi","text_tokens":["可以","更","如果","、",".","的","引擎","你","开源","nlu","项目","中文","使用","api","自行","推荐","等","也","想","构建","强大","rasa","当然"," ","wit","语义","chi","用户","_","ai","，"],"title":"进阶","title_tokens":["进阶"]},{"location":"extension_guide/siri/","text":"Tutorial ¶ Hey siri 介绍 ¶ 使用该插件，可将 Siri 接入到 CodeLab Scratch，并与 CodeLab 可编程空间里的一切互动。 演示 ¶ 插件说明 ¶ 使用方式: 到 插件市场 下载插件, 搜索 siri 插件类型: Adapter Extension 插件源码: extension_Siri.py 依赖 ¶ 安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器. 步骤 1：打开 Codelab Adapter ¶ 双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。 步骤 2：打开 Codelab Scratch ¶ 点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常 在 Codelab Scratch 里加载 Siri 插件, 点击绿旗，运行 Adapter Siri 插件。 步骤 3：在 iOS(iPhone/iPad)的 快捷指令 里自定义指令 ¶ 确保 iOS 设备和 Adapter 所在设备处在同一个局域网 提醒 建议iOS版本在13以上，不然URL内容获取块可能无法手动输入URL 创建一个 对话模式 指令, 该指令的功能是将 Siri 提示输入( 什么内容 )的内容输入到 CodeLab Scratch 使用语音 Hey siri，对话模式 ，将激活刚才自定义的 对话模式 指令 在 Scratch 中接受来自 Siri 的输入内容( 早上好 ) 控制乐高 (列表选择)指令 ¶ 对着iOS设备说 Hey siri，控制乐高 ，将激活刚才自定义的 控制乐高 指令 创建一个 控制乐高 指令, 该指令的功能是将 Siri 提示输入( 哪一个 )的内容输入到 CodeLab Scratch 在 Scratch 中接受来自 Siri 的输入内容( 顺时针旋转 ) 原理说明 ¶ CodeLab ❤ Siri","text_tokens":["¶","团队","现阶段","为","或者","时针","更","绿旗","页面","可编","选择","创建","多","目前","不然","早上好","方式","默认","对话","激活",":","演示","打开","图中","说","市场","到",",","scratch","步骤","(","早上","内容","陆续","语音","支持","原理","hey","_","列表","tutorial","互动","同一个","firefox","浏览器","所在","接入","1","局域","模式","3","是","的",".","呈现","13","上好","使用","处在","codelab","在","阶段","搜索","里","可",")","编程","❤","连接"," ","/","箭头","小圆点","之后","说明","指令","来自","加载","将","对","点击","提醒","刚才","可能","这儿","py","接受","可编程","。","该","效果","输入","官方","顺时","其设","运行","与","ios","顺时针","双击","scratch3.0","如下","最佳","自定义","一个","上","依赖","源码","圆点","确保","一切","adapter","ipad","以上","手动","并","提示","iphone","2","web","启动","着","scratch3","空间","，","自定","和","定义","控制","正常","中","建议","chrome","哪","设备","siri","安装","同一","下载","类型","版本","什么","：","乐高","extension","链接","ui","url","无法","浏览","快捷","绿色","插件","介绍","所指","块","获取","局域网","旋转","功能"],"title":"Siri","title_tokens":["siri"]},{"location":"extension_guide/siri/#tutorial","text":"Hey siri","text_tokens":[" ","siri","hey"],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/siri/#_1","text":"使用该插件，可将 Siri 接入到 CodeLab Scratch，并与 CodeLab 可编程空间里的一切互动。","text_tokens":["接入","可编程","。","该","可编","的","siri","与","使用","codelab","里","可","到","scratch","编程","一切","并","插件"," ","互动","将","空间","，"],"title":"介绍","title_tokens":["介绍"]},{"location":"extension_guide/siri/#_2","text":"","text_tokens":[],"title":"演示","title_tokens":["演示"]},{"location":"extension_guide/siri/#_3","text":"使用方式: 到 插件市场 下载插件, 搜索 siri 插件类型: Adapter Extension 插件源码: extension_Siri.py","text_tokens":[" ","插件","siri","下载","类型",":","搜索","源码","py","市场","到",",","_","使用","方式","adapter","extension","."],"title":"插件说明","title_tokens":["插件","说明"]},{"location":"extension_guide/siri/#_4","text":"安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器.","text_tokens":["团队","现阶段","为","更","效果","建议","chrome",".","官方","多","安装","其设","目前","版本","使用","默认","codelab","最佳","在","阶段","scratch","adapter","浏览","陆续"," ","支持","/","将","firefox","，","浏览器"],"title":"依赖","title_tokens":["依赖"]},{"location":"extension_guide/siri/#1-codelab-adapter","text":"双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。","text_tokens":[" ","浏览","打开","之后","启动","双击","。","默认","codelab","adapter","将","，","浏览器"],"title":"步骤 1：打开 Codelab Adapter","title_tokens":[" ","1","打开","：","步骤","codelab","adapter"]},{"location":"extension_guide/siri/#2-codelab-scratch","text":"点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常 在 Codelab Scratch 里加载 Siri 插件, 点击绿旗，运行 Adapter Siri 插件。","text_tokens":["这儿","或者","。","正常","绿旗","页面","的","siri","呈现","运行","与","scratch3.0","如下","codelab","链接","上","在","ui",":","打开","图中","里",",","scratch","圆点","adapter","绿色","连接"," ","插件","箭头","小圆点","web","所指","说明","加载","scratch3","将","点击","，"],"title":"步骤 2：打开 Codelab Scratch","title_tokens":[" ","打开","2","：","scratch","步骤","codelab"]},{"location":"extension_guide/siri/#3-iosiphoneipad","text":"确保 iOS 设备和 Adapter 所在设备处在同一个局域网 提醒 建议iOS版本在13以上，不然URL内容获取块可能无法手动输入URL 创建一个 对话模式 指令, 该指令的功能是将 Siri 提示输入( 什么内容 )的内容输入到 CodeLab Scratch 使用语音 Hey siri，对话模式 ，将激活刚才自定义的 对话模式 指令 在 Scratch 中接受来自 Siri 的输入内容( 早上好 )","text_tokens":["自定","和","定义","接受","局域","模式","该","局域网","输入","是","建议","中","的","创建","设备","同一","siri","13","版本","ios","上好","什么","不然","早上好","使用","处在","获取","对话","codelab","一个","自定义","在","激活","url","刚才","无法","(",",",")","到","scratch","早上","确保","以上","adapter","内容","手动","提示","语音"," ","功能","hey","指令","来自","块","将","同一个","提醒","，","所在","可能"],"title":"步骤 3：在 iOS(iPhone/iPad)的快捷指令里自定义指令","title_tokens":[" ","在","/","自定","定义","快捷","iphone","ios","里","：","(",")","步骤","3","指令","ipad","的","自定义"]},{"location":"extension_guide/siri/#_5","text":"对着iOS设备说 Hey siri，控制乐高 ，将激活刚才自定义的 控制乐高 指令 创建一个 控制乐高 指令, 该指令的功能是将 Siri 提示输入( 哪一个 )的内容输入到 CodeLab Scratch 在 Scratch 中接受来自 Siri 的输入内容( 顺时针旋转 )","text_tokens":["自定","定义","控制","时针","接受","该","是","输入","中","的","创建","哪","设备","siri","顺时","顺时针","ios","旋转","乐高","codelab","自定义","一个","在","激活","说","(",",",")","到","scratch","提示","内容"," ","着","hey","指令","来自","将","对","刚才","，","功能"],"title":"控制乐高(列表选择)指令","title_tokens":["控制","(","列表",")","指令","乐高","选择"]},{"location":"extension_guide/siri/#_6","text":"CodeLab ❤ Siri","text_tokens":[" ","siri","codelab","❤"],"title":"原理说明","title_tokens":["说明","原理"]},{"location":"extension_guide/sonicPi/","text":"Tutorial ¶ 插件说明 ¶ Windows 和 Mac 用户开箱可用。Linux用户将自动安装依赖 外部环境依赖 ¶ 需要下载 Sonic Pi 。 开始使用 ¶ 运行 Sonic Pi。 启动 CodeLab Adapter，运行 node_sonicPi 插件。 打开 Scratch 编程界面，我们已经制作了一个 demo: Scratch-SonicPi 。 进阶 ¶ 更多可用的指令，参考 python-sonic 。 如果你想深入了解 Sonic Pi ，可以跟着 Sonic Pi 软件内置的文档学习。 发送消息 ¶ >= 3.7.2 的 Adapter 支持使用Scratch积木发送OSC消息，消息的参数(args)是一个 list(采用json语法，字符串使用 双引号 ) Receiving OSC ¶ Sonic Pi Receiving OSC 参考这个文档，你也可以基于 python-sonic 构建一个 自定义插件 直接与Sonic Pi沟通。 参考 ¶ Sonic Pi python-sonic","text_tokens":["¶","参考","沟通","消息","更","外部","多","json",":","打开","构建","(","scratch","字符","外部环境","支持","基于","可用","demo","语法","_","tutorial","receiving","你","采用","了解","linux","windows","是","直接","的",".","sonicpi","使用","codelab",">","双引号",")","编程","需要"," ","我们","pi","说明","指令","跟着","将","python","积木","可以","osc","引号","。","运行","与","一个","学习","自定义","也","想","依赖","list","args","adapter","自动","深入","-","2","启动","软件","内置","界面","，","自定","和","定义","参数","字符串","开箱","如果","mac","安装","下载","环境","了","=","制作","这个","发送","sonic","文档","进阶","插件","开始","node","用户","已经","3.7"],"title":"Sonic Pi","title_tokens":[" ","sonic","pi"]},{"location":"extension_guide/sonicPi/#tutorial","text":"","text_tokens":[],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/sonicPi/#_1","text":"Windows 和 Mac 用户开箱可用。Linux用户将自动安装依赖","text_tokens":[" ","安装","和","用户","可用","linux","依赖","windows","开箱","。","将","自动","mac"],"title":"插件说明","title_tokens":["插件","说明"]},{"location":"extension_guide/sonicPi/#_2","text":"需要下载 Sonic Pi 。","text_tokens":[" ","下载","。","pi","sonic","需要"],"title":"外部环境依赖","title_tokens":["依赖","环境","外部","外部环境"]},{"location":"extension_guide/sonicPi/#_3","text":"运行 Sonic Pi。 启动 CodeLab Adapter，运行 node_sonicPi 插件。 打开 Scratch 编程界面，我们已经制作了一个 demo: Scratch-SonicPi 。","text_tokens":["。","运行","sonicpi","codelab","了","一个",":","打开","制作","scratch","sonic","编程","adapter"," ","插件","node","我们","已经","demo","-","启动","pi","_","界面","，"],"title":"开始使用","title_tokens":["使用","开始"]},{"location":"extension_guide/sonicPi/#_4","text":"更多可用的指令，参考 python-sonic 。 如果你想深入了解 Sonic Pi ，可以跟着 Sonic Pi 软件内置的文档学习。","text_tokens":["可以","了解","参考","更","。","如果","的","多","学习","想","sonic","文档","深入"," ","-","可用","，","pi","软件","指令","跟着","python","内置","你"],"title":"进阶","title_tokens":["进阶"]},{"location":"extension_guide/sonicPi/#_5","text":">= 3.7.2 的 Adapter 支持使用Scratch积木发送OSC消息，消息的参数(args)是一个 list(采用json语法，字符串使用 双引号 )","text_tokens":["采用","参数","字符串","osc","消息","引号","是","的",".","json","使用",">","双引号","一个","=","list","args","(","scratch","发送",")","字符","adapter"," ","支持","2","语法","3.7","积木","，"],"title":"发送消息","title_tokens":["发送","消息"]},{"location":"extension_guide/sonicPi/#receiving-osc","text":"Sonic Pi Receiving OSC 参考这个文档，你也可以基于 python-sonic 构建一个 自定义插件 直接与Sonic Pi沟通。","text_tokens":["可以","自定","定义","参考","沟通","osc","。","直接","与","一个","自定义","也","这个","构建","sonic","文档"," ","-","基于","插件","，","pi","receiving","python","你"],"title":"Receiving OSC","title_tokens":[" ","osc","receiving"]},{"location":"extension_guide/sonicPi/#_6","text":"Sonic Pi python-sonic","text_tokens":[" ","-","pi","sonic","python"],"title":"参考","title_tokens":["参考"]},{"location":"extension_guide/stage/","text":"Tutorial ¶ Stage 指 Scratch 的舞台区。 Adapter Stage 插件允许将舞台区的图像（舞台或者摄像头图像）以 base64 的格式发往 Adapter，你可以使用 Adapter node/extension 自定构建图像处理程序，诸如使用 神经网络 或 OpenCV，将识别的结果返回给 Scratch。 当然，你也可以构建一个自动保存舞台状态的插件，或者自拍/美颜插件：） 需要配合 Scratch ImageData 插件中的积木使用。 提醒 在 Adapter 3.2 之前，你需要自行从 插件市场 里下载 Stage 插件。 源码地址 运行 Stage 插件（当前插件的功能是把图像保存到 Adapter Home 目录 ）,你可以通过修改插件做其他事情。 如果你想使用 OpenCV 或 Tensorflow 处理图像，需要自定义 Adapter Node Demo ¶ stage image","text_tokens":["¶","opencv","或者","处理","imagedata","往","地址","指","其他","构建","美颜","市场","到",",","scratch","tensorflow","发","demo","给","做","tutorial","3.2","你","是","的","神经网络","允许","摄像头","使用","自行","保存","在","以","image","里","需要"," ","（","/","状态","摄像","将","）","积木","提醒","可以","配合","。","网络","区","base64","图像处理","运行","定","结果","当前","格式","返回","一个","自定义","也","想","舞台","源码","图像","自","adapter","神经网","自动","当然","修改","识别","或","自拍","，","通过","自定","定义","诸如","从","如果","中","像头","下载","把","：","程序","extension","目录","之前","stage","插件","node","事情","home","神经","功能"],"title":"Stage","title_tokens":["stage"]},{"location":"extension_guide/stage/#tutorial","text":"Stage 指 Scratch 的舞台区。 Adapter Stage 插件允许将舞台区的图像（舞台或者摄像头图像）以 base64 的格式发往 Adapter，你可以使用 Adapter node/extension 自定构建图像处理程序，诸如使用 神经网络 或 OpenCV，将识别的结果返回给 Scratch。 当然，你也可以构建一个自动保存舞台状态的插件，或者自拍/美颜插件：） 需要配合 Scratch ImageData 插件中的积木使用。 提醒 在 Adapter 3.2 之前，你需要自行从 插件市场 里下载 Stage 插件。 源码地址 运行 Stage 插件（当前插件的功能是把图像保存到 Adapter Home 目录 ）,你可以通过修改插件做其他事情。 如果你想使用 OpenCV 或 Tensorflow 处理图像，需要自定义 Adapter Node","text_tokens":["opencv","或者","处理","imagedata","往","地址","指","其他","构建","美颜","市场","到",",","scratch","tensorflow","发","给","做","3.2","你","是","的","神经网络","允许","摄像头","使用","自行","保存","在","以","里","需要"," ","（","/","状态","摄像","将","）","积木","提醒","可以","配合","。","网络","区","base64","图像处理","运行","定","结果","当前","格式","返回","一个","自定义","也","想","舞台","源码","图像","自","adapter","神经网","自动","当然","修改","识别","或","自拍","，","通过","自定","定义","诸如","从","如果","中","像头","下载","把","：","程序","extension","目录","之前","stage","插件","node","事情","home","神经","功能"],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/stage/#demo","text":"stage image","text_tokens":[" ","image","stage"],"title":"Demo","title_tokens":["demo"]},{"location":"extension_guide/switch/","text":"Switch ¶ 我们之前的演示案例是利用 Toy-Con Garage 做的。 任天堂没有开放接口。 我们通过捕获 Toy-Con Garage 的视觉输出做的连接。","text_tokens":["¶","任天堂","garage","接口","捕获","。","switch","是","的","没有","案例","利用","开放","视觉","演示","之前","输出","连接"," ","-","我们","con","天堂","做","toy","通过"],"title":"Switch","title_tokens":["switch"]},{"location":"extension_guide/switch/#switch","text":"我们之前的演示案例是利用 Toy-Con Garage 做的。 任天堂没有开放接口。 我们通过捕获 Toy-Con Garage 的视觉输出做的连接。","text_tokens":["任天堂","garage","接口","捕获","。","是","的","没有","案例","利用","开放","视觉","演示","之前","输出","连接"," ","-","我们","con","天堂","做","toy","通过"],"title":"Switch","title_tokens":["switch"]},{"location":"extension_guide/teachable_machine/","text":"Tutorial ¶ 介绍 ¶ CodeLab Adapter 接入 Teachable Machine 安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器. 步骤 1：打开 Codelab Adapter ¶ 双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。 步骤 2：打开 Teachable Machine ¶ Longan团队已经将Teachable Machine部署到国内: Longan Teachable Machine , 并且内置支持CodeLab Adapter， 开箱可用！ 提醒 海外用户参考文末操作 表示已经将 Teachable Machine 接入 CodeLab Adapter 了。 接下来，可以开始你的 Teachable Machine 之旅途。 我们来展示一个例子。 步骤 3：打开 Codelab Scratch3 ¶ 点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常 接着在 Scratch 中拿到 Teachable Machine 的训练结果，构建一个简单应用。 在线打开它 tm_scratch_demo Tips 来自Teachable Machine的消息，源源不断流过来，有时候你并不希望重复触发同一件事。可以参考以下例子 Scratch-tm-latest-class 。 提醒 Teachable Machine 的网页不能在后台运行，需要和 Scratch 一起并列在桌面上，否则程序不会运行。 海外用户 ¶ 如果你是海外用户，建议使用 Google 官方的 teachablemachine ， 你需要搭配以下插件。 安装 Chrome 浏览器插件： Tampermonkey 。 点击安装 Tampermonkey 脚本 Teachablemachine_Result.user.js 。 运行Adapter之后如何页面弹出，已连接Adapter，则说明一切正常","text_tokens":["¶","团队","参考","现阶段","为","或者","消息","更","tampermonkey","脚本","页面","多","不","简单","teachable","目前","源源不断","tm","触发","默认","接下来","展示",":","打开","图中","！","构建","到",",","scratch","步骤","并列","陆续","支持","流过来","可用","demo","如何","_","不会","tutorial","firefox","你","浏览器","接入","1","否则","搭配","后台","一件","文末","3","是",".","的","网页","呈现","machine","以下","latest","使用","已","codelab","旅途","国内","在","阶段","它","并且","接着","拿到","桌面","需要","有时","连接","部署"," ","/","我们","箭头","海外","小圆点","之后","user","一起","说明","来自","将","提醒","点击","不能","可以","tips","出","这儿","longan","表示","。","效果","接下","官方","一切正常","应用","其设","运行","与","结果","双击","scratch3.0","源源","如下","最佳","一个","上","时候","来","圆点","adapter","一切","则","并","桌面上","希望","弹","-","js","teachablemachine","2","web","在线","启动","操作","scratch3","内置","面上","google","，","和","流过","开箱","如果","正常","中","建议","chrome","不断","安装","例子","版本","：","程序","同","了","链接","过来","重复","ui","事","浏览","result","下来","绿色","插件","开始","已经","用户","介绍","所指","之","有时候","class","训练"],"title":"Teachable Machine","title_tokens":[" ","machine","teachable"]},{"location":"extension_guide/teachable_machine/#tutorial","text":"","text_tokens":[],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/teachable_machine/#_1","text":"CodeLab Adapter 接入 Teachable Machine 安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器.","text_tokens":["团队","接入","现阶段","为","更","效果","建议","chrome",".","官方","多","安装","teachable","其设","目前","版本","machine","使用","默认","codelab","最佳","在","阶段","scratch","adapter","浏览","陆续"," ","支持","/","将","firefox","，","浏览器"],"title":"介绍","title_tokens":["介绍"]},{"location":"extension_guide/teachable_machine/#1-codelab-adapter","text":"双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。","text_tokens":[" ","浏览","打开","之后","启动","双击","。","默认","codelab","adapter","将","，","浏览器"],"title":"步骤 1：打开 Codelab Adapter","title_tokens":[" ","1","打开","：","步骤","codelab","adapter"]},{"location":"extension_guide/teachable_machine/#2-teachable-machine","text":"Longan团队已经将Teachable Machine部署到国内: Longan Teachable Machine , 并且内置支持CodeLab Adapter， 开箱可用！ 提醒 海外用户参考文末操作 表示已经将 Teachable Machine 接入 CodeLab Adapter 了。 接下来，可以开始你的 Teachable Machine 之旅途。 我们来展示一个例子。","text_tokens":["可以","团队","接入","参考","longan","开箱","表示","。","文末","接下","的","你","例子","teachable","machine","codelab","了","旅途","接下来","一个","国内","展示",":","！","并且","到",",","来","adapter","下来","部署"," ","支持","开始","我们","已经","可用","海外","用户","操作","之","将","内置","提醒","，"],"title":"步骤 2：打开 Teachable Machine","title_tokens":[" ","teachable","打开","2","machine","：","步骤"]},{"location":"extension_guide/teachable_machine/#3-codelab-scratch3","text":"点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常 接着在 Scratch 中拿到 Teachable Machine 的训练结果，构建一个简单应用。 在线打开它 tm_scratch_demo Tips 来自Teachable Machine的消息，源源不断流过来，有时候你并不希望重复触发同一件事。可以参考以下例子 Scratch-tm-latest-class 。 提醒 Teachable Machine 的网页不能在后台运行，需要和 Scratch 一起并列在桌面上，否则程序不会运行。","text_tokens":["参考","消息","或者","页面","不","简单","teachable","源源不断","tm","触发",":","打开","图中","构建",",","scratch","并列","流过来","demo","_","不会","你","否则","后台","一件","的","网页","呈现","machine","以下","latest","codelab","在","它","桌面","接着","拿到","需要","有时","连接"," ","箭头","小圆点","一起","说明","来自","将","点击","提醒","不能","tips","可以","这儿","。","应用","运行","与","结果","scratch3.0","源源","如下","一个","上","时候","圆点","adapter","并","桌面上","希望","-","web","在线","scratch3","面上","，","和","流过","正常","中","不断","例子","程序","同","链接","过来","重复","ui","事","绿色","所指","有时候","class","训练"],"title":"步骤 3：打开 Codelab Scratch3","title_tokens":[" ","打开","：","步骤","3","scratch3","codelab"]},{"location":"extension_guide/teachable_machine/#_2","text":"如果你是海外用户，建议使用 Google 官方的 teachablemachine ， 你需要搭配以下插件。 安装 Chrome 浏览器插件： Tampermonkey 。 点击安装 Tampermonkey 脚本 Teachablemachine_Result.user.js 。 运行Adapter之后如何页面弹出，已连接Adapter，则说明一切正常","text_tokens":["出","搭配","如果","。","正常","是","tampermonkey","建议","chrome","脚本","页面","的","官方",".","一切正常","你","安装","运行","点击","以下","：","使用","已","adapter","需要","浏览","result","则","弹","一切","连接"," ","插件","js","用户","海外","teachablemachine","之后","user","如何","_","说明","google","，","浏览器"],"title":"海外用户","title_tokens":["用户","海外"]},{"location":"extension_guide/tello/","text":"DJI Tello ¶ Tello 请使用 tello2.0 提醒 Tello 会占用 wifi，导致电脑无法联网。有两种方式在 CodeLab Scratch 使用它: 1. 打开 https://scratch-beta.codelab.club?adapter_host=127.0.0.1 2. 使用 CodeLab Adapter 的离线模式： FAQ：离线使用 (在 >=3.4.0 的版本中可用) 以下是在线版使用教程，离线版基本相似。 步骤 1：打开 CodeLab Scratch ¶ 运行CodeLab Adapter， 确保在线平台与Adapte连接正常。 第一次运行请点击 verify 积木，信任该网站。(离线版不需要) 看到 CodeLab Scratch 指示灯显示绿色，代表连接成功。 步骤 2：连接 Tello ¶ 将电脑连上 Tello 的 wifi 热点。（操作细节可以参考 Tello 说明书） 步骤 3：开始使用 ¶ 选择 scratch3 中的 Tello 插件： 运行 Tello 插件。 之后依次点击 控制飞机 、 起飞 起飞吧！ 一些案例: ¶ DJI Tello x Leap Motion ¶ DJI Tello x Switch Labo ¶ DJI Tello x Switch Joy-Con ¶ 改进 ¶ 目前 Tello 的插件都已开源，很久没更新，稳定性不高，大家可以一起改进它 extension_tello scratch3_tello 提醒 如果你希望做一些更复杂的事，建议直接使用社区里的 Python SDK与 设备交互，之后使用 Adapter Node 将其接入Adapter环境中。 Tello api 文档 ¶ SDK 2.0 DJITelloPy <!-- TelloPy Tello-Python → multi_robot_drone_example","text_tokens":["¶","→","参考","稳定","127.0","wifi","更","、","switch","multi","指示灯","motion","选择","很久","https","不","目前","起飞","dji","方式",":","打开","热点","！","联网","离线","(","scratch","步骤","电脑","joy","con","平台","可用","做","_","定性","robot","会","一次","你","接入","1","信任","drone","tello","相似","模式","有","是","3","直接",".","的","adapte","开源","以下","很久没","使用","已","codelab",">","tellopy","在","它","里","两种","教程","0.1",")","稳定性","!","需要","成功","连接","example"," ","/","（","host","之后","一起","说明","将","python","）","积木","点击","提醒","都","可以","更新","tello2.0","。","<","该","第一次","复杂","x","运行","与","案例","beta","大家","依次","?","上","看到","请","确保","adapter","leap","希望","-","一些","社区","2","在线","第一","3.4","指示","0","操作","scratch3","吧","不高","版","，","改进","sdk","控制","如果","正常","中","建议","djitellopy","细节","交互","设备","其","代表","版本","显示","：","club","环境","api","extension","=","导致","事","连","无法","verify","faq","文档","基本","网站","绿色","插件","开始","飞机","node","说明书","占用","labo","2.0"],"title":"Tello","title_tokens":["tello"]},{"location":"extension_guide/tello/#dji-tello","text":"Tello 请使用 tello2.0 提醒 Tello 会占用 wifi，导致电脑无法联网。有两种方式在 CodeLab Scratch 使用它: 1. 打开 https://scratch-beta.codelab.club?adapter_host=127.0.0.1 2. 使用 CodeLab Adapter 的离线模式： FAQ：离线使用 (在 >=3.4.0 的版本中可用) 以下是在线版使用教程，离线版基本相似。","text_tokens":["1","tello2.0","版","127.0","tello","wifi","。","模式","有","中","是","相似",".","的","https","版本","以下","：","club","使用","方式","beta","codelab",">","?","在","=","导致",":","打开","它","联网","无法","两种","离线","(","scratch","请","0.1","faq",")","教程","adapter","电脑","基本"," ","/","-","host","可用","2","占用","在线","3.4","0","_","会","提醒","，"],"title":"DJI Tello","title_tokens":[" ","dji","tello"]},{"location":"extension_guide/tello/#1-codelab-scratch","text":"运行CodeLab Adapter， 确保在线平台与Adapte连接正常。 第一次运行请点击 verify 积木，信任该网站。(离线版不需要) 看到 CodeLab Scratch 指示灯显示绿色，代表连接成功。","text_tokens":["信任","版","。","正常","该","第一次","指示灯","不","adapte","运行","代表","与","显示","codelab","看到","离线","verify","(",")","请","scratch","确保","adapter","需要","成功","网站","连接","绿色"," ","平台","在线","第一","，","指示","积木","点击","一次"],"title":"步骤 1：打开 CodeLab Scratch","title_tokens":[" ","1","打开","：","scratch","步骤","codelab"]},{"location":"extension_guide/tello/#2-tello","text":"将电脑连上 Tello 的 wifi 热点。（操作细节可以参考 Tello 说明书）","text_tokens":[" ","上","（","可以","参考","说明书","热点","连","tello","wifi","。","操作","说明","将","）","电脑","的","细节"],"title":"步骤 2：连接 Tello","title_tokens":[" ","2","：","tello","步骤","连接"]},{"location":"extension_guide/tello/#3","text":"选择 scratch3 中的 Tello 插件： 运行 Tello 插件。 之后依次点击 控制飞机 、 起飞 起飞吧！","text_tokens":["控制","tello","。","、","中","的","选择","运行","起飞","：","依次","！"," ","插件","飞机","之后","scratch3","吧","点击"],"title":"步骤 3：开始使用","title_tokens":[" ","开始","：","步骤","3","使用"]},{"location":"extension_guide/tello/#_1","text":"","text_tokens":[],"title":"一些案例:","title_tokens":["一些","案例",":"]},{"location":"extension_guide/tello/#dji-tello-x-leap-motion","text":"","text_tokens":[],"title":"DJI Tello x Leap Motion","title_tokens":[" ","x","tello","dji","leap","motion"]},{"location":"extension_guide/tello/#dji-tello-x-switch-labo","text":"","text_tokens":[],"title":"DJI Tello x Switch Labo","title_tokens":[" ","x","tello","switch","dji","labo"]},{"location":"extension_guide/tello/#dji-tello-x-switch-joy-con","text":"","text_tokens":[],"title":"DJI Tello x Switch Joy-Con","title_tokens":[" ","-","con","x","tello","switch","dji","joy"]},{"location":"extension_guide/tello/#_2","text":"目前 Tello 的插件都已开源，很久没更新，稳定性不高，大家可以一起改进它 extension_tello scratch3_tello 提醒 如果你希望做一些更复杂的事，建议直接使用社区里的 Python SDK与 设备交互，之后使用 Adapter Node 将其接入Adapter环境中。","text_tokens":["可以","更新","改进","接入","sdk","稳定","tello","如果","更","。","中","建议","直接","的","很久","复杂","交互","你","设备","开源","其","目前","与","很久没","使用","环境","大家","已","提醒","extension","事","它","里","稳定性","adapter","希望"," ","插件","一些","node","社区","之后","做","一起","_","定性","scratch3","python","将","不高","，","都"],"title":"改进","title_tokens":["改进"]},{"location":"extension_guide/tello/#tello-api","text":"SDK 2.0 DJITelloPy <!-- TelloPy Tello-Python → multi_robot_drone_example","text_tokens":[" ","-","→","drone","sdk","tello","<","_","2.0","robot","multi","python","!","djitellopy","tellopy","example"],"title":"Tello api 文档","title_tokens":[" ","文档","api","tello"]},{"location":"extension_guide/tello2/","text":"Tello 2.0 ¶ Tello 插件的 2.0 版本， 基于 DJITelloPy 库。 支持Tello、Tello Edu 和 Tello TT。 提醒 Tello 会占用 wifi，导致电脑无法联网，请使用 CodeLab Adapter 的离线模式: FAQ：离线使用 (在 >=3.4.0 的版本中可用)。 更好的方式可能是将Tello接入路由器上，或者使用USB无线网卡，避免电脑无法上网。 以下是在线版使用教程，离线版基本相似。 步骤 1：打开 CodeLab Scratch ¶ 运行CodeLab Adapter， 确保在线平台与Adapte连接正常。 看到 CodeLab Scratch 指示灯显示绿色，代表连接成功。 步骤 2：连接 Tello ¶ 将电脑连上 Tello 的 wifi 热点。（操作细节可以参考 Tello 说明书） 步骤 3：开始使用 ¶ 选择 scratch3 中的 Tello2.0 插件. 运行 Tello2.0 插件。 之后依次点击 连接tello 、 起飞 起飞吧！ 一些案例: ¶ DJI Tello x Leap Motion ¶ DJI Tello x Switch Labo ¶ DJI Tello x Switch Joy-Con ¶ 进阶 ¶ 你可以在 Tello 广播积木里调用 api ！形如: tello.flip_left() 利用API，你也可以与停机坪(机器视觉)交互( get_mission_pad_id ).API里有很多与停机坪相关的函数。 如果你希望做一些更复杂的事，建议直接使用社区里的 DJITelloPy 与 设备交互（ api ），之后使用 Adapter Node 将其接入Adapter环境中。 Tello api 文档 ¶ DJITelloPy SDK 2.0 multi_robot_drone_example","text_tokens":["¶","参考","或者","如","wifi","更","、","switch","multi","指示灯","motion","选择","id","起飞","dji","方式","形",":","打开","热点","！","联网","离线","(","scratch","步骤","调用","usb","电脑","joy","上网","支持","基于","平台","con","可用","做","_","robot","会","你","接入","1","drone","tello","相似","模式","有","是","3","库","直接","的",".","adapte","以下","pad","使用","codelab",">","停机","在","里","函数","教程",")","成功","连接","example"," ","（","机器","之后","说明","将","）","积木","提醒","点击","可能","可以","网卡","路由器","tello2.0","。","复杂","x","运行","与","案例","left","edu","依次","上","也","看到","请","确保","adapter","leap","希望","-","一些","无线","广播","在线","2","停机坪","get","3.4","指示","0","社区","操作","scratch3","吧","版","，","很多","和","相关","sdk","如果","正常","flip","中","建议","djitellopy","细节","交互","设备","其","代表","版本","避免","显示","：","利用","mission","环境","api","视觉","=","导致","事","连","无法","tt","faq","文档","基本","进阶","绿色","插件","开始","node","说明书","占用","2.0","路由","labo","更好"],"title":"Tello2.0","title_tokens":["tello2.0"]},{"location":"extension_guide/tello2/#tello-20","text":"Tello 插件的 2.0 版本， 基于 DJITelloPy 库。 支持Tello、Tello Edu 和 Tello TT。 提醒 Tello 会占用 wifi，导致电脑无法联网，请使用 CodeLab Adapter 的离线模式: FAQ：离线使用 (在 >=3.4.0 的版本中可用)。 更好的方式可能是将Tello接入路由器上，或者使用USB无线网卡，避免电脑无法上网。 以下是在线版使用教程，离线版基本相似。","text_tokens":["和","接入","路由器","网卡","版","或者","tello","。","wifi","、","模式","中","是","库","相似","djitellopy","的",".","版本","避免","以下","：","edu","使用","方式","codelab",">","在","上","=","导致",":","联网","无法","离线","(","教程",")","tt","请","faq","usb","adapter","电脑","基本"," ","插件","基于","支持","上网","可用","无线","在线","占用","3.4","0","2.0","路由","会","将","提醒","，","更好","可能"],"title":"Tello 2.0","title_tokens":[" ","2.0","tello"]},{"location":"extension_guide/tello2/#1-codelab-scratch","text":"运行CodeLab Adapter， 确保在线平台与Adapte连接正常。 看到 CodeLab Scratch 指示灯显示绿色，代表连接成功。","text_tokens":["。","正常","指示灯","adapte","运行","代表","与","显示","codelab","看到","scratch","确保","adapter","成功","绿色","连接"," ","平台","在线","指示","，"],"title":"步骤 1：打开 CodeLab Scratch","title_tokens":[" ","1","打开","：","scratch","步骤","codelab"]},{"location":"extension_guide/tello2/#2-tello","text":"将电脑连上 Tello 的 wifi 热点。（操作细节可以参考 Tello 说明书）","text_tokens":[" ","上","（","可以","参考","说明书","热点","连","tello","wifi","。","操作","说明","将","）","电脑","的","细节"],"title":"步骤 2：连接 Tello","title_tokens":[" ","2","：","tello","步骤","连接"]},{"location":"extension_guide/tello2/#3","text":"选择 scratch3 中的 Tello2.0 插件. 运行 Tello2.0 插件。 之后依次点击 连接tello 、 起飞 起飞吧！","text_tokens":["tello2.0","tello","。","、","中",".","的","选择","运行","起飞","依次","！","连接"," ","插件","之后","scratch3","吧","点击"],"title":"步骤 3：开始使用","title_tokens":[" ","开始","：","步骤","3","使用"]},{"location":"extension_guide/tello2/#_1","text":"","text_tokens":[],"title":"一些案例:","title_tokens":["一些","案例",":"]},{"location":"extension_guide/tello2/#dji-tello-x-leap-motion","text":"","text_tokens":[],"title":"DJI Tello x Leap Motion","title_tokens":[" ","x","tello","dji","leap","motion"]},{"location":"extension_guide/tello2/#dji-tello-x-switch-labo","text":"","text_tokens":[],"title":"DJI Tello x Switch Labo","title_tokens":[" ","x","tello","switch","dji","labo"]},{"location":"extension_guide/tello2/#dji-tello-x-switch-joy-con","text":"","text_tokens":[],"title":"DJI Tello x Switch Joy-Con","title_tokens":[" ","-","con","x","tello","switch","dji","joy"]},{"location":"extension_guide/tello2/#_2","text":"你可以在 Tello 广播积木里调用 api ！形如: tello.flip_left() 利用API，你也可以与停机坪(机器视觉)交互( get_mission_pad_id ).API里有很多与停机坪相关的函数。 如果你希望做一些更复杂的事，建议直接使用社区里的 DJITelloPy 与 设备交互（ api ），之后使用 Adapter Node 将其接入Adapter环境中。","text_tokens":["可以","很多","相关","接入","如","tello","。","如果","flip","有","更","中","建议","直接","djitellopy",".","的","复杂","交互","设备","其","id","与","利用","left","mission","pad","使用","api","环境","形","视觉","停机","在","也",":","事","里","！","函数","(",")","调用","adapter","希望"," ","（","一些","node","广播","停机坪","，","机器","社区","get","做","之后","_","将","）","积木","你"],"title":"进阶","title_tokens":["进阶"]},{"location":"extension_guide/tello2/#tello-api","text":"DJITelloPy SDK 2.0 multi_robot_drone_example","text_tokens":[" ","drone","sdk","_","2.0","robot","multi","djitellopy","example"],"title":"Tello api 文档","title_tokens":[" ","文档","api","tello"]},{"location":"extension_guide/tello3/","text":"Tello 3.0 ¶ Tello 插件的 3.0 版本， 基于 DJI 官方的 SDK: RoboMaster SDK 库。 能够充分利用设备的能力。 相比于 Tello 2.0 插件 ，3.0能够 控制 LED 使用说明 ¶ 目前该插件并未内置到 Adapter 中（因其复杂的打包依赖，而且跨平台兼容性不好）。 我们目前将插件构建为 Adapter Node ，可以在Adapter外部以普通Python文件运行，一旦运行起来，与普通Adapter插件是一样的，能够与Adapter体系的所有事物交互。 Python环境 ¶ 首先你本地需要有 Python 环境（ Python>=3.6 ） 你可以到 Python 官方 下载，也可以使用 CodeLab放在 国内的版本(Python3.7) 提醒 Mac 用户和 Linux 本地很可能内置了 Python3 安装依赖 ¶ pip install robomaster codelab_adapter_client --upgrade 开始！ ¶ 提醒 Tello 会占用 wifi，导致电脑无法联网，请使用 CodeLab Adapter 的离线模式: FAQ：离线使用 (在 >=3.4.0 的版本中可用)。 更好的方式可能是将Tello接入路由器上，或者使用USB无线网卡，避免电脑无法上网。 步骤 1：打开 CodeLab Scratch ¶ 运行CodeLab Adapter， 确保在线平台与Adapte连接正常。 看到 CodeLab Scratch 指示灯显示绿色，代表连接成功。 步骤 1：运行 node_tello3.py ¶ 将 node_tello3.py 插件下载到本地（随便放在一个文件夹里），在命令行中进入到这个文件夹，使用 python node_tello3.py 运行它。 步骤 2：连接 Tello ¶ 将电脑连上 Tello 的 wifi 热点。（操作细节可以参考 Tello 说明书） 步骤 3: 起飞吧! ¶ 选择 scratch3 中的 EIM 插件. 以下是一个简单 demo: tello3-demo 起飞吧！ 进阶 ¶ 更多API参考文档: RoboMaster SDK","text_tokens":["¶","参考","为","一样","install","wifi","或者","更","外部","指示灯","选择","多","而且","简单","目前","起飞","dji","方式","相比","跨平台",":","打开","热点","！","构建","联网","离线","到","(","能力","普通","步骤","scratch","随便","usb","电脑","因","上网","基于","平台","3.0","充分利用","3.6","可用","demo","_","并未","会","所有","你","首先","eim","接入","tello3","1","linux","robomaster","tello","于","模式","有","是","3","库","兼容","的",".","命令行","文件","adapte","以下","打包","python3","使用","一旦","codelab","容性",">","国内","在","以","更好","里","它",")","!","需要","成功","连接"," ","（","我们","放在","说明","将","python","）","提醒","可能","可以","网卡","路由器","py","。","该","官方","复杂","件夹","运行","与","led","一个","也","上","事物","依赖","看到","兼容性","请","本地","确保","adapter","python3.7","-","很","无线","在线","2","3.4","指示","0","操作","scratch3","内置","吧","，","和","sdk","控制","充分","正常","中","不好","mac","细节","交互","设备","安装","其","下载","代表","版本","避免","显示","利用","：","环境","api","了","起来","pip","=","导致","连","这个","无法","能够","upgrade","faq","文档","进阶","绿色","插件","node","client","用户","开始","进入","说明书","占用","文件夹","2.0","路由","命令","体系","分利"],"title":"Tello3.0","title_tokens":["tello3.0"]},{"location":"extension_guide/tello3/#tello-30","text":"Tello 插件的 3.0 版本， 基于 DJI 官方的 SDK: RoboMaster SDK 库。 能够充分利用设备的能力。 相比于 Tello 2.0 插件 ，3.0能够 控制 LED","text_tokens":["sdk","robomaster","控制","tello","。","充分","于","库","的","官方","设备","版本","利用","dji","led","相比",":","能够","能力"," ","插件","基于","3.0","充分利用","2.0","，","分利"],"title":"Tello 3.0","title_tokens":[" ","3.0","tello"]},{"location":"extension_guide/tello3/#_1","text":"目前该插件并未内置到 Adapter 中（因其复杂的打包依赖，而且跨平台兼容性不好）。 我们目前将插件构建为 Adapter Node ，可以在Adapter外部以普通Python文件运行，一旦运行起来，与普通Adapter插件是一样的，能够与Adapter体系的所有事物交互。","text_tokens":["可以","为","一样","。","该","中","外部","是","不好","兼容","的","复杂","体系","文件","而且","交互","其","运行","目前","与","打包","一旦","起来","容性","跨平台","在","以","事物","依赖","构建","能够","到","兼容性","普通","adapter","因","插件"," ","（","平台","我们","node","并未","内置","将","）","python","所有","，"],"title":"使用说明","title_tokens":["说明","使用"]},{"location":"extension_guide/tello3/#python","text":"首先你本地需要有 Python 环境（ Python>=3.6 ） 你可以到 Python 官方 下载，也可以使用 CodeLab放在 国内的版本(Python3.7) 提醒 Mac 用户和 Linux 本地很可能内置了 Python3","text_tokens":["可以","和","linux","有","的","官方","mac","你","下载","版本","python3","环境","使用","codelab","了",">","国内","也","=","到","(",")","本地","需要","python3.7"," ","（","放在","3.6","用户","很","python","内置","）","提醒","，","首先","可能"],"title":"Python环境","title_tokens":["环境","python"]},{"location":"extension_guide/tello3/#_2","text":"pip install robomaster codelab_adapter_client --upgrade","text_tokens":[" ","-","client","install","robomaster","_","upgrade","codelab","adapter","pip"],"title":"安装依赖","title_tokens":["安装","依赖"]},{"location":"extension_guide/tello3/#_3","text":"提醒 Tello 会占用 wifi，导致电脑无法联网，请使用 CodeLab Adapter 的离线模式: FAQ：离线使用 (在 >=3.4.0 的版本中可用)。 更好的方式可能是将Tello接入路由器上，或者使用USB无线网卡，避免电脑无法上网。","text_tokens":["接入","路由器","网卡","或者","tello","wifi","模式","。","中","是","的",".","版本","避免","：","使用","方式","codelab",">","在","上","=","导致",":","联网","无法","离线","(",")","请","faq","usb","adapter","电脑"," ","上网","可用","无线","占用","3.4","0","路由","会","将","提醒","，","更好","可能"],"title":"开始！","title_tokens":["开始","！"]},{"location":"extension_guide/tello3/#1-codelab-scratch","text":"运行CodeLab Adapter， 确保在线平台与Adapte连接正常。 看到 CodeLab Scratch 指示灯显示绿色，代表连接成功。","text_tokens":["。","正常","指示灯","adapte","运行","代表","与","显示","codelab","看到","scratch","确保","adapter","成功","绿色","连接"," ","平台","在线","指示","，"],"title":"步骤 1：打开 CodeLab Scratch","title_tokens":[" ","1","打开","：","scratch","步骤","codelab"]},{"location":"extension_guide/tello3/#1node_tello3py","text":"将 node_tello3.py 插件下载到本地（随便放在一个文件夹里），在命令行中进入到这个文件夹，使用 python node_tello3.py 运行它。","text_tokens":["tello3","py","。","中",".","命令行","文件","件夹","下载","运行","使用","一个","在","里","它","这个","随便","到","本地"," ","插件","node","（","放在","进入","文件夹","_","命令","将","python","）","，"],"title":"步骤 1：运行node_tello3.py","title_tokens":[" ","node","tello3","1","运行","py","：","_","步骤","."]},{"location":"extension_guide/tello3/#2-tello","text":"将电脑连上 Tello 的 wifi 热点。（操作细节可以参考 Tello 说明书）","text_tokens":[" ","上","（","可以","参考","说明书","热点","连","tello","wifi","。","操作","说明","将","）","电脑","的","细节"],"title":"步骤 2：连接 Tello","title_tokens":[" ","2","：","tello","步骤","连接"]},{"location":"extension_guide/tello3/#3","text":"选择 scratch3 中的 EIM 插件. 以下是一个简单 demo: tello3-demo 起飞吧！","text_tokens":["eim","tello3","中","是",".","的","选择","简单","起飞","以下","一个",":","！"," ","插件","-","demo","scratch3","吧"],"title":"步骤 3: 起飞吧!","title_tokens":[" ",":","起飞","步骤","3","吧","!"]},{"location":"extension_guide/tello3/#_4","text":"更多API参考文档: RoboMaster SDK","text_tokens":[" ","参考",":","sdk","robomaster","更","api","文档","多"],"title":"进阶","title_tokens":["进阶"]},{"location":"extension_guide/tensorflow-yolov4/","text":"Tutorial ¶ tensorflow-yolov4 ， 请参考文档，安装相应依赖。 接入方法参考 Python对象的连接器：EIM 插件 使用前请将 coco.names 和 yolov4-tiny.weights 下载到对应目录。 from codelab_adapter_client.utils import run_monitor , save_base64_to_image from yolov4.tf import YOLOv4 import cv2 import cv2 import numpy as np yolo = YOLOv4 ( tiny = True ) yolo . classes = \"/tmp/coco.names\" yolo . make_model () yolo . load_weights ( \"/tmp/yolov4-tiny.weights\" , weights_type = \"yolo\" ) def monitor ( msg ): filename = save_base64_to_image ( msg , \"/tmp/tmp_img\" ) original_image = cv2 . imread ( filename ) resized_image = cv2 . cvtColor ( original_image , cv2 . COLOR_BGR2RGB ) resized_image = yolo . resize_image ( resized_image ) resized_image = resized_image / 255 input_data = resized_image [ np . newaxis , ... ] . astype ( np . float32 ) candidates = yolo . model . predict ( input_data ) print ( candidates ) # yolo.inference(media_path=filename) run_monitor ( monitor )","text_tokens":["¶","参考","resize","coco","type","astype","input","save","[","names","run",":","到",",","(","tensorflow","imread","filename","_","tutorial","eim","接入","weights","tmp","对象","的",".","to","as","color","tf","使用","codelab","yolo","#","连接器","image","print","np","monitor",")","make","连接"," ","/","接器","model","...","python","将","path","predict","。","对应","255","base64","def","media","newaxis","from","依赖","请","cvtcolor","adapter","msg","float32","yolov4","-","classes","import","方法","load","\"","，","和","bgr2rgb","img","numpy","]","candidates","安装","下载","true","original","cv2","：","tiny","utils","目录","resized","=","data","相应","前","文档","inference","插件","client"],"title":"tensorflow-yolov4","title_tokens":["-","tensorflow","yolov4"]},{"location":"extension_guide/tensorflow-yolov4/#tutorial","text":"tensorflow-yolov4 ， 请参考文档，安装相应依赖。 接入方法参考 Python对象的连接器：EIM 插件 使用前请将 coco.names 和 yolov4-tiny.weights 下载到对应目录。 from codelab_adapter_client.utils import run_monitor , save_base64_to_image from yolov4.tf import YOLOv4 import cv2 import cv2 import numpy as np yolo = YOLOv4 ( tiny = True ) yolo . classes = \"/tmp/coco.names\" yolo . make_model () yolo . load_weights ( \"/tmp/yolov4-tiny.weights\" , weights_type = \"yolo\" ) def monitor ( msg ): filename = save_base64_to_image ( msg , \"/tmp/tmp_img\" ) original_image = cv2 . imread ( filename ) resized_image = cv2 . cvtColor ( original_image , cv2 . COLOR_BGR2RGB ) resized_image = yolo . resize_image ( resized_image ) resized_image = resized_image / 255 input_data = resized_image [ np . newaxis , ... ] . astype ( np . float32 ) candidates = yolo . model . predict ( input_data ) print ( candidates ) # yolo.inference(media_path=filename) run_monitor ( monitor )","text_tokens":["参考","resize","coco","type","astype","input","save","[","names","run",":","到",",","(","tensorflow","imread","filename","_","eim","接入","weights","tmp","对象","的",".","to","as","color","tf","使用","codelab","yolo","#","连接器","image","print","np","monitor",")","make","连接"," ","/","接器","model","...","python","将","path","predict","。","对应","255","base64","def","media","newaxis","from","依赖","请","cvtcolor","adapter","msg","float32","yolov4","-","classes","import","方法","load","\"","，","和","bgr2rgb","img","numpy","]","candidates","安装","下载","true","original","cv2","：","tiny","utils","目录","resized","=","data","相应","前","文档","inference","插件","client"],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/tensorflow/","text":"Tensorflow ¶ 参考 运行在树莓派中的 codelab-adapter tensorflow 插件 。","text_tokens":[" ","¶","在","-","插件","运行","参考","树莓","派","。","tensorflow","中","codelab","adapter","的"],"title":"Tensorflow(正在迁移中)","title_tokens":["正在","(",")","中","tensorflow","迁移"]},{"location":"extension_guide/tensorflow/#tensorflow","text":"参考 运行在树莓派中的 codelab-adapter tensorflow 插件 。","text_tokens":[" ","在","-","插件","运行","参考","树莓","派","。","中","tensorflow","codelab","adapter","的"],"title":"Tensorflow","title_tokens":["tensorflow"]},{"location":"extension_guide/tuio/","text":"TUIO ¶","text_tokens":[" ","¶","tuio"],"title":"TUIO","title_tokens":["tuio"]},{"location":"extension_guide/tuio/#tuio","text":"","text_tokens":[],"title":"TUIO","title_tokens":["tuio"]},{"location":"extension_guide/uart_adapter/","text":"Tutorial ¶ 通用的串口(UART)积木，可从串口中读写数据。 例子 ¶ 以下例子展示 如何使用 extension_uart_adapter 插件与自定义的microbit固件交互。 microbit 固件源码 为: Scratch 与之交互的部分: 上边的例子展示了典型的 典型应用场景 ¶ 该插件的典型应用场景是，允许开发者使用Scratch与自定义的固件(支持uart)交互。","text_tokens":["¶","自定","定义","固件","典型","场景","为","。","从","该","中","是","部分","的","交互","开发","应用","例子","允许","与","读写","以下","使用","上边","了","extension","串口","自定义","展示",":","源码","可","(",")","scratch","adapter"," ","uart","插件","支持","通用","microbit","如何","_","开发者","之","tutorial","数据","积木","，"],"title":"UART Adapter","title_tokens":["uart"," ","adapter"]},{"location":"extension_guide/uart_adapter/#tutorial","text":"通用的串口(UART)积木，可从串口中读写数据。","text_tokens":["uart","通用","，","可","读写","。","(","从",")","中","数据","积木","的","串口"],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/uart_adapter/#_1","text":"以下例子展示 如何使用 extension_uart_adapter 插件与自定义的microbit固件交互。 microbit 固件源码 为: Scratch 与之交互的部分: 上边的例子展示了典型的","text_tokens":["自定","定义","固件","典型","为","。","部分","的","交互","例子","与","以下","使用","上边","了","extension","自定义","展示",":","源码","scratch","adapter"," ","uart","插件","microbit","如何","_","之"],"title":"例子","title_tokens":["例子"]},{"location":"extension_guide/uart_adapter/#_2","text":"该插件的典型应用场景是，允许开发者使用Scratch与自定义的固件(支持uart)交互。","text_tokens":["自定","定义","场景","典型","固件","。","该","是","的","交互","开发","应用","允许","与","使用","自定义","(","scratch",")","插件","支持","uart","开发者","，"],"title":"典型应用场景","title_tokens":["典型","应用","场景"]},{"location":"extension_guide/usage/","text":"Usage ¶ 你可以将 extension market 中的插件下载到本地使用。 在 CodeLab Adapter 中下载插件很简单，点击 菜单>插件>下载 ，弹出输入框，将插件的 url 链接复制粘贴其中即可。 下载完成之后重启软件，即可看到插件。 所有插件列表在 codelab_adapter_extensions 。","text_tokens":["可以","¶","出","即可","。","中","输入","的","简单","下载","market","粘贴","使用","codelab","extension",">","链接","usage","在","输入框","完成","url","其中","看到","复制粘贴","到","本地","adapter","弹"," ","插件","菜单","很","复制","，","之后","重启","_","列表","软件","extensions","将","点击","所有","你"],"title":"使用(Usage)","title_tokens":["usage",")","使用","("]},{"location":"extension_guide/usage/#usage","text":"你可以将 extension market 中的插件下载到本地使用。 在 CodeLab Adapter 中下载插件很简单，点击 菜单>插件>下载 ，弹出输入框，将插件的 url 链接复制粘贴其中即可。 下载完成之后重启软件，即可看到插件。 所有插件列表在 codelab_adapter_extensions 。","text_tokens":["可以","出","即可","。","中","输入","的","简单","下载","market","粘贴","使用","codelab","extension",">","链接","在","输入框","完成","url","其中","看到","复制粘贴","到","本地","adapter","弹"," ","插件","菜单","很","复制","，","之后","重启","_","列表","软件","extensions","将","点击","所有","你"],"title":"Usage","title_tokens":["usage"]},{"location":"extension_guide/vector/","text":"Vector ¶ Anki is a company whose products always seem to delight. Codelab Adapter is a software that connect Scratch 3.0 to the open-source hardware, IoT and AI. We make a Codelab Adapter extension to connect Vector to Scratch 3.0. It just like Cozmo codelab. Now the Vector extension is built into the Codelab Adapter ! Video tutorial ¶ for Windows ¶ for MacOS/Linux ¶ Tutorial ¶ install codelab_adapter_client ¶ Python >= 3.6 Linux/MacOS user: python3 -m pip install codelab_adapter_client --upgrade --user windows user: python -m pip install codelab_adapter_client --upgrade --user Install the SDK on your system ¶ Follow Vector official tutorial: Initial Setup 提醒 如果 Vector 的 IP发生了变化（诸如将Vector 带入新的 wifi 环境），不需要重新认证(python3 -m anki_vector.configure), 只需要修本地改配置文件即可（第一次认证留下的）, 配置文件为: ~/.anki_vector/sdk_config.ini If the following code ( hello_world.py ) runs smoothly, go to the next step. ''' MacOS: /usr/local/bin/python3 hello_world.py linux: /usr/bin/python3 hello_world.py Windows: python hello_world.py ''' import anki_vector from codelab_adapter_client import AdapterNode def main (): args = anki_vector . util . parse_command_args () with anki_vector . Robot ( args . serial ) as robot : print ( \"Say 'Hello World'...\" ) robot . behavior . say_text ( \"Hello World\" ) if __name__ == \"__main__\" : main () Download Codelab Adapter ¶ Download Codelab Adapter run it Open Scratch 3.0 ¶ open CodeLab Scratch3 Open extension_vector ¶ Ok! Enjoy it :) Tip Tool for watching the camera feed and test animations of Anki's robot Vector: Vector-Explorer-Tool Here are some demo cases（just like Cozmo CodeLab）: Vector and Leap Motion ¶ Switch Labo and Vector ¶ Candy Language for Vector ¶ Advanced ¶ You can create your own custom blocks based on the exec block . Almost all Vector SDK API work.","text_tokens":["¶","text","a","hello","almost","install","为","wifi","switch","code","motion","can","不","step","usr","配置文件","cozmo","following","runs","explorer","带入","新",":","run","tip","is","(",",","scratch","next","3.0","like","3.6","demo","_","robot","tutorial","built","for","ok","认证","一次","it","always","linux","windows","只","即可","vector","whose",".","的","__","配置","文件","adapternode","all","to","just","as","seem","python3","you","codelab",">","are","改","animations","print","command","camera",")","say","custom","your","make","!","需要","exec","configure","tool","（"," ","/","of","ini","products","enjoy","user","if","here","based","...","python","将","）","提醒","company","work","video","that","s","py","'","macos","第一次","发生","advanced","initial","def","world","setup","from","parse","hardware","delight","test","own","language","software","args","local","本地","adapter","leap","smoothly","-","follow","修","第一","import","connect","system","create","go","scratch3","the","ai","\"","config","，","util","sdk","download","如果","诸如","some","~","bin","block","serial","open","source","ip","blocks","candy","now","iot","环境","we","into","m","了","feed","on","api","extension","pip","and","重新","=","official","cases","watching","upgrade","留下","client","name","main","behavior","labo","anki","with","变化"],"title":"Vector","title_tokens":["vector"]},{"location":"extension_guide/vector/#vector","text":"Anki is a company whose products always seem to delight. Codelab Adapter is a software that connect Scratch 3.0 to the open-source hardware, IoT and AI. We make a Codelab Adapter extension to connect Vector to Scratch 3.0. It just like Cozmo codelab. Now the Vector extension is built into the Codelab Adapter !","text_tokens":["a","that","always","it","vector","whose",".","open","source","to","just","seem","now","hardware","delight","cozmo","iot","we","into","codelab","extension","software","and","is",",","scratch","adapter","make","!"," ","-","3.0","like","products","connect","anki","built","the","ai","company"],"title":"Vector","title_tokens":["vector"]},{"location":"extension_guide/vector/#video-tutorial","text":"","text_tokens":[],"title":"Video tutorial","title_tokens":[" ","video","tutorial"]},{"location":"extension_guide/vector/#for-windows","text":"","text_tokens":[],"title":"for Windows","title_tokens":[" ","windows","for"]},{"location":"extension_guide/vector/#for-macoslinux","text":"","text_tokens":[],"title":"for MacOS/Linux","title_tokens":[" ","/","linux","macos","for"]},{"location":"extension_guide/vector/#tutorial","text":"","text_tokens":[],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/vector/#install-codelab_adapter_client","text":"Python >= 3.6 Linux/MacOS user: python3 -m pip install codelab_adapter_client --upgrade --user windows user: python -m pip install codelab_adapter_client --upgrade --user","text_tokens":["linux","install","windows","macos","python3","m","codelab",">","pip","=",":","upgrade","adapter"," ","/","-","client","3.6","user","_","python"],"title":"install codelab_adapter_client","title_tokens":[" ","client","install","_","codelab","adapter"]},{"location":"extension_guide/vector/#install-the-sdk-on-your-system","text":"Follow Vector official tutorial: Initial Setup 提醒 如果 Vector 的 IP发生了变化（诸如将Vector 带入新的 wifi 环境），不需要重新认证(python3 -m anki_vector.configure), 只需要修本地改配置文件即可（第一次认证留下的）, 配置文件为: ~/.anki_vector/sdk_config.ini If the following code ( hello_world.py ) runs smoothly, go to the next step. ''' MacOS: /usr/local/bin/python3 hello_world.py linux: /usr/bin/python3 hello_world.py Windows: python hello_world.py ''' import anki_vector from codelab_adapter_client import AdapterNode def main (): args = anki_vector . util . parse_command_args () with anki_vector . Robot ( args . serial ) as robot : print ( \"Say 'Hello World'...\" ) robot . behavior . say_text ( \"Hello World\" ) if __name__ == \"__main__\" : main ()","text_tokens":["text","hello","为","wifi","code","不","step","usr","配置文件","following","runs","带入","新",":","(",",","next","_","robot","tutorial","一次","认证","linux","只","即可","windows","vector","的",".","__","配置","文件","adapternode","to","as","python3","codelab","改","print","command",")","say","需要","configure"," ","（","/","ini","if","...","将","python","）","提醒","py","'","macos","第一次","发生","initial","def","world","setup","from","parse","args","local","本地","adapter","smoothly","follow","-","修","第一","import","go","the","\"","config","，","util","sdk","如果","诸如","~","bin","serial","ip","环境","m","了","重新","official","=","留下","client","name","main","behavior","anki","with","变化"],"title":"Install the SDK on your system","title_tokens":[" ","sdk","install","system","your","the","on"]},{"location":"extension_guide/vector/#download-codelab-adapter","text":"Download Codelab Adapter run it","text_tokens":[" ","run","it","download","codelab","adapter"],"title":"Download Codelab Adapter","title_tokens":[" ","download","codelab","adapter"]},{"location":"extension_guide/vector/#open-scratch-30","text":"open CodeLab Scratch3","text_tokens":[" ","open","scratch3","codelab"],"title":"Open Scratch 3.0","title_tokens":[" ","scratch","open","3.0"]},{"location":"extension_guide/vector/#open-extension_vector","text":"Ok! Enjoy it :) Tip Tool for watching the camera feed and test animations of Anki's robot Vector: Vector-Explorer-Tool Here are some demo cases（just like Cozmo CodeLab）:","text_tokens":["it","s","'","some","vector","just","cozmo","test","codelab","feed","are","and","animations","explorer","cases",":","tip","watching","camera","）",")","!","tool"," ","-","of","（","demo","like","enjoy","here","anki","robot","for","the","ok"],"title":"Open extension_vector","title_tokens":[" ","_","vector","extension","open"]},{"location":"extension_guide/vector/#vector-and-leap-motion","text":"","text_tokens":[],"title":"Vector and Leap Motion","title_tokens":[" ","and","vector","leap","motion"]},{"location":"extension_guide/vector/#switch-labo-and-vector","text":"","text_tokens":[],"title":"Switch Labo and Vector","title_tokens":[" ","and","switch","labo","vector"]},{"location":"extension_guide/vector/#candy-language-for-vector","text":"","text_tokens":[],"title":"Candy Language for Vector","title_tokens":[" ","candy","vector","for","language"]},{"location":"extension_guide/vector/#advanced","text":"You can create your own custom blocks based on the exec block . Almost all Vector SDK API work.","text_tokens":["almost","sdk","block","vector","all",".","can","blocks","api","you","own","on","custom","your","exec"," ","create","based","the","work"],"title":"Advanced","title_tokens":["advanced"]},{"location":"extension_guide/webserver/","text":"web server ¶ 插件介绍 ¶ 通过启用 extension_webserver 插件，允许用户将 CodeLab Adapter 当作 web 服务器，构建自己的网站。 基于 bottle Tips 网站运行在 18080 端口。 可以使用 ngrok 、 花生壳 等工具，将你刚制作的网站公布到 互联网上。","text_tokens":["¶","tips","可以","公布","。","、","工具","花生","互联","通过","的","你","运行","允许","启用","服务","server","自己","webserver","使用","codelab","互联网","extension","等","当作","在","上","服务器","18080","ngrok","构建","制作","联网","到","adapter","花生壳","网站","bottle","端口"," ","插件","基于","用户","刚","web","介绍","务器","_","将","，"],"title":"webserver","title_tokens":["webserver"]},{"location":"extension_guide/webserver/#web-server","text":"","text_tokens":[],"title":"web server","title_tokens":["web"," ","server"]},{"location":"extension_guide/webserver/#_1","text":"通过启用 extension_webserver 插件，允许用户将 CodeLab Adapter 当作 web 服务器，构建自己的网站。 基于 bottle Tips 网站运行在 18080 端口。 可以使用 ngrok 、 花生壳 等工具，将你刚制作的网站公布到 互联网上。","text_tokens":["tips","可以","公布","。","、","工具","花生","互联","通过","的","你","运行","允许","启用","服务","自己","webserver","使用","codelab","互联网","extension","等","当作","在","上","服务器","18080","ngrok","构建","制作","联网","到","adapter","花生壳","网站","bottle","端口"," ","插件","基于","用户","刚","web","务器","_","将","，"],"title":"插件介绍","title_tokens":["插件","介绍"]},{"location":"extension_guide/wechat/","text":"Tutorial ¶ 依赖 ¶ 安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器. 步骤 1：打开 Codelab Adapter ¶ 双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。 步骤 2：打开 Codelab Scratch3 ¶ 点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常 步骤 3：加载 CodeLab Adapter 微信插件 ¶ 在 Web UI 中点击加载 extension_wechat 插件: 插件运行后，会弹出二维码，用微信扫码即可登陆。 在 Scratch 3.0 中使用微信插件 ¶ 演示 ¶","text_tokens":["¶","团队","现阶段","为","或者","更","页面","多","扫码","目前","二维","默认","后",":","演示","打开","图中",",","scratch","步骤","陆续","支持","3.0","_","tutorial","firefox","浏览器","1","即可","3",".","的","呈现","登陆","使用","codelab","在","微信","阶段","二维码","连接"," ","/","箭头","小圆点","之后","说明","加载","将","点击","出","这儿","。","效果","官方","会弹","其设","运行","与","双击","scratch3.0","如下","最佳","用","上","依赖","圆点","adapter","2","web","启动","scratch3","，","正常","中","建议","chrome","安装","版本","wechat","：","extension","链接","ui","浏览","绿色","插件","所指"],"title":"wechat","title_tokens":["wechat"]},{"location":"extension_guide/wechat/#tutorial","text":"","text_tokens":[],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/wechat/#_1","text":"安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器.","text_tokens":["团队","现阶段","为","更","效果","建议","chrome",".","官方","多","安装","其设","目前","版本","使用","默认","codelab","最佳","在","阶段","scratch","adapter","浏览","陆续"," ","支持","/","将","firefox","，","浏览器"],"title":"依赖","title_tokens":["依赖"]},{"location":"extension_guide/wechat/#1-codelab-adapter","text":"双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。","text_tokens":[" ","浏览","打开","之后","启动","双击","。","默认","codelab","adapter","将","，","浏览器"],"title":"步骤 1：打开 Codelab Adapter","title_tokens":[" ","1","打开","：","步骤","codelab","adapter"]},{"location":"extension_guide/wechat/#2-codelab-scratch3","text":"点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常","text_tokens":["这儿","或者","正常","页面","的","呈现","与","scratch3.0","如下","codelab","链接","上","ui",":","打开","图中",",","圆点","adapter","绿色","连接"," ","箭头","小圆点","web","所指","说明","scratch3","将","点击"],"title":"步骤 2：打开 Codelab Scratch3","title_tokens":[" ","打开","2","：","步骤","scratch3","codelab"]},{"location":"extension_guide/wechat/#3-codelab-adapter","text":"在 Web UI 中点击加载 extension_wechat 插件: 插件运行后，会弹出二维码，用微信扫码即可登陆。","text_tokens":["出","即可","。","中","会弹","扫码","登陆","运行","wechat","二维","后","extension","用","在","微信","ui",":","二维码"," ","插件","web","_","加载","点击","，"],"title":"步骤 3：加载 CodeLab Adapter 微信插件","title_tokens":[" ","微信","插件","：","步骤","3","加载","codelab","adapter"]},{"location":"extension_guide/wechat/#scratch-30","text":"","text_tokens":[],"title":"在 Scratch 3.0 中使用微信插件","title_tokens":[" ","在","微信","插件","3.0","scratch","中","使用"]},{"location":"extension_guide/wechat/#_2","text":"","text_tokens":[],"title":"演示","title_tokens":["演示"]},{"location":"extension_guide/yanshee/","text":"Tutorial ¶ 介绍 ¶ Yanshee 是一个开源人形机器人教学平台， 面向高中和大学生开发，提供专业开源学习软件。 Yanshee 是一个开放的硬件平台，采用Raspberry Pi + STM32 开放式硬件平台架构，内嵌陀螺仪，开放GPIO接口。 采用基于Linux的开源软件架构，支持用户直接调用并集成海量的Raspberry Pi的开源软件模块 Demo ¶ Scratch-Yanshee","text_tokens":["¶","和","采用","+","linux","教学","接口","学生","。","模块","大学","是","集成","直接","陀螺仪","的","开发","raspberry","开源","硬件","人形","硬件平台","专业","机器人","开放","陀螺","一个","学习","yanshee","面向","高中","内嵌","stm32","海量","开放式","scratch","调用","gpio","并"," ","支持","平台","基于","用户","demo","-","机器","介绍","提供","pi","软件","tutorial","大学生","软件架构","架构","，"],"title":"Yanshee","title_tokens":["yanshee"]},{"location":"extension_guide/yanshee/#tutorial","text":"","text_tokens":[],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"extension_guide/yanshee/#_1","text":"Yanshee 是一个开源人形机器人教学平台， 面向高中和大学生开发，提供专业开源学习软件。 Yanshee 是一个开放的硬件平台，采用Raspberry Pi + STM32 开放式硬件平台架构，内嵌陀螺仪，开放GPIO接口。 采用基于Linux的开源软件架构，支持用户直接调用并集成海量的Raspberry Pi的开源软件模块","text_tokens":["和","采用","+","linux","教学","接口","学生","。","模块","大学","是","集成","直接","陀螺仪","的","开发","raspberry","开源","硬件","人形","硬件平台","专业","机器人","开放","陀螺","一个","学习","yanshee","面向","高中","内嵌","stm32","海量","开放式","调用","gpio","并"," ","支持","平台","基于","用户","机器","提供","pi","软件","大学生","软件架构","架构","，"],"title":"介绍","title_tokens":["介绍"]},{"location":"extension_guide/yanshee/#demo","text":"Scratch-Yanshee","text_tokens":["-","scratch","yanshee"],"title":"Demo","title_tokens":["demo"]},{"location":"extension_guide/yeelight/","text":"yeelight ¶ 使用 Adapter 直接驱动 yeelight，不需要 Home Assistant/LonganHub 插件源码: node_yeelight.py Scratch Demo ¶ Scratch EIM demo 社区版 文档 ¶ yeelight yeelight 速率限制为每分钟60个。如果你想解除限制，则需要使用: Music mode : bulb.start_music()","text_tokens":["¶","eim","assistant","版","py","yeelight","为","。","如果","music","直接",".","分钟","不","你","start","longanhub","速率","使用","bulb","解除限制","想",":","源码","每分钟","个","(","scratch",")","解除","adapter","需要","文档","60","则"," ","/","插件","node","demo","社区","_","驱动","home","mode","限制","，"],"title":"yeelight","title_tokens":["yeelight"]},{"location":"extension_guide/yeelight/#yeelight","text":"使用 Adapter 直接驱动 yeelight，不需要 Home Assistant/LonganHub 插件源码: node_yeelight.py","text_tokens":["assistant","py","yeelight","直接",".","不","longanhub","使用",":","源码","adapter","需要"," ","/","插件","node","_","驱动","home","，"],"title":"yeelight","title_tokens":["yeelight"]},{"location":"extension_guide/yeelight/#scratch-demo","text":"Scratch EIM demo 社区版","text_tokens":[" ","eim","demo","社区","scratch","版"],"title":"Scratch Demo","title_tokens":[" ","scratch","demo"]},{"location":"extension_guide/yeelight/#_1","text":"yeelight yeelight 速率限制为每分钟60个。如果你想解除限制，则需要使用: Music mode : bulb.start_music()","text_tokens":["yeelight","为","。","如果","music",".","分钟","你","start","速率","使用","bulb","解除限制","想",":","每分钟","个","(",")","解除","60","需要","则"," ","_","mode","限制","，"],"title":"文档","title_tokens":["文档"]},{"location":"extension_guide/yolo/","text":"Tutorial ¶ hello world","text_tokens":[" ","¶","hello","world","tutorial"],"title":"yolo","title_tokens":["yolo"]},{"location":"extension_guide/yolo/#tutorial","text":"hello world","text_tokens":[" ","hello","world"],"title":"Tutorial","title_tokens":["tutorial"]},{"location":"get_start/gs_adapter_intro/","text":"Codelab Adapter 概览 ¶ 大家可能会好奇， 魔杖一挥 是怎么将所有灯都关闭的，又是怎么做到将手抬起， 窗帘就顺应而升 的? 其实这些神奇的场景都是在Adapter的帮助下完成的。 Adapter使用 扩展 将两个事物连接起来，在魔杖亮灯的场景中，Adapter将魔杖和灯连接起来，我们在创作平台中利用Adapter提供的扩展对魔杖和灯进行编程，之后用魔杖画出相应的手势，灯就亮起来了。 Adapter的核心组件 ¶ Adapter的扩展分为 插件 和 节点 ，有小伙伴会问到：“为什么都是扩展，还要区分为不同的两个东西啊？” 这主要是因为插件和节点所需要的依赖不同，相比于插件，节点需要的依赖会更多也更复杂，比如说用手势控制窗帘升降用到的扩展就是节点。 如果想进一步了解请看 插件和节点的区别 在简单介绍Adatper的具体组件后，我们进入安装环节。","text_tokens":["¶","主要","为","更","亮灯","东西","具体","多","？","简单","进行","关闭","相比","后","手","两个","区别","这些","完成","一步","而升","平台","做到","会","亮","接起","因为","所有","了解","问到","于","有","是","组件","分为","环节","是因为","的","不同","使用","所","codelab","在","编程","好奇","需要","核心","连接"," ","我们","之后","将","窗帘","对","一挥","都","可能","“","魔杖","这","。","啊","进一步","复杂","”","小伙","其实","大家","用到","区分","帮助","创作","?","用","也","看","事物","想","依赖","下","节点","怎么","升降","请","还要","adapter","小伙伴","就是","灯","顺应","扩展","比如说","，","和","抬起","场景","adatper","控制","如果","手势","中","神奇","概览","又","安装","为什么","什么","利用","：","伙伴","了","起来","就","比如","相应","插件","连接起来","进入","介绍","提供","画出"],"title":"Adapter简介","title_tokens":["简介","adapter"]},{"location":"get_start/gs_adapter_intro/#codelab-adapter","text":"大家可能会好奇， 魔杖一挥 是怎么将所有灯都关闭的，又是怎么做到将手抬起， 窗帘就顺应而升 的? 其实这些神奇的场景都是在Adapter的帮助下完成的。 Adapter使用 扩展 将两个事物连接起来，在魔杖亮灯的场景中，Adapter将魔杖和灯连接起来，我们在创作平台中利用Adapter提供的扩展对魔杖和灯进行编程，之后用魔杖画出相应的手势，灯就亮起来了。","text_tokens":["和","抬起","场景","。","手势","是","中","亮灯","神奇","的","又","进行","关闭","利用","对","其实","使用","画出","大家","了","起来","手","帮助","?","两个","创作","在","用","可能","就","事物","这些","下","完成","怎么","编程","好奇","相应","adapter","连接"," ","而升","连接起来","我们","平台","灯","，","顺应","扩展","之后","提供","做到","会","亮","将","窗帘","接起","所有","一挥","都","魔杖"],"title":"Codelab Adapter 概览","title_tokens":[" ","概览","codelab","adapter"]},{"location":"get_start/gs_adapter_intro/#adapter","text":"Adapter的扩展分为 插件 和 节点 ，有小伙伴会问到：“为什么都是扩展，还要区分为不同的两个东西啊？” 这主要是因为插件和节点所需要的依赖不同，相比于插件，节点需要的依赖会更多也更复杂，比如说用手势控制窗帘升降用到的扩展就是节点。 如果想进一步了解请看 插件和节点的区别 在简单介绍Adatper的具体组件后，我们进入安装环节。","text_tokens":["“","和","这","主要","了解","问到","adatper","为","控制","于","更","手势","啊","有","分为","是","东西","。","如果","进一步","是因为","组件","环节","的","复杂","”","多","具体","安装","？","不同","简单","小伙","什么","：","伙伴","所","相比","用到","后","区分","两个","用","区别","也","看","在","想","依赖","节点","比如","升降","一步","请","还要","adapter","需要","小伙伴"," ","插件","就是","我们","进入","扩展","介绍","会","窗帘","为什么","因为","比如说","，","都"],"title":"Adapter的核心组件","title_tokens":["组件","的","核心","adapter"]},{"location":"get_start/gs_install/","text":"安装 Codelab Adapter ¶ 版本介绍 ¶ 经过Adapter的概览，我们了解了Adapter的大致功能，以及插件和节点的功能。 下面我们来安装CodeLab Adapter（简称Adapter）。 目前 CodeLab Adapter v3 可以在Mac、 Windows、 Linux、Raspbian（树莓派） 平台上正常运行。Adapter目前有分为两个版本可供小伙伴们选择 完整版 和 精简版 。这两个版本该如何选择呢？ 版本 Adapter Extension（插件） Adapter Node（节点） 目标用户 完整版 Yes Yes 初学者 精简版 Yes No(需要Python依赖) 喜欢折腾和自定义的用户 附：Adpater完整版所用到的 Python第三方库 Codelab Adapter下载链接 ¶ 最新版本: 4.1.0 操作系统 完整版 精简版 系统要求 安装注意事项 macOS macFull.zip 无 macOS 10.13.5（64位）+ mac安装步骤 Windows winFull.zip 无 Win 7 /8 /10 （32位/64位） win安装步骤 Linux 无 linux.zip(4.0.0) 经测试发行版Ubuntu、Kail、ArchLinux linux安装步骤 Raspbian（树莓派） 无 rpi.zip(3.7.4) 低于buster的版本可能无法运行 树莓派安装步骤 附:各个版本的哈希值(Sha256) 在Mac中安装Adapter ¶ 下载 双击.zip格式文件就会得到可执行的Adapter 点击右键打开，会出现 点击打开就会弹出Adapter的浏览器页面 到此在Mac中安装Adapter完成。 温馨提示：在 macOS 10.15 打开软件可能会比较慢(有时需要3-5秒)，问题目前在定位中，但在打开后不影响使用。 在Windows中安装Adapter ¶ 下载 右键解压,然后进入解压后的文件夹, 双击 CodeLab-Adapter 文件。（提醒: 最好不要重命名文件夹，如果要重命名，确保名字中没有中文和空格） 运行Adapter，会自动弹出默认浏览器（推荐使用Firefox或者Chrome浏览器）。 如果出现防火墙的警报，点击允许访问就好了。 看到一下界面就说明安装成功了。 温馨提示：Windows 7下最好以管理员权限运行。 Linux中安装Adapter ¶ 下载 用unzip命令解压 在命令行中运行Adapter就会自动弹出 温馨提示： 无法运行请赋予可执行权限 chmod u+x Adapter软件名 在Ubuntu 16.04下可能无法自动打开浏览器。建议在命令行下启动它，你将看到 https://codelab-adapter.codelab.club:12358/ , 这个链接即是 WebUI 当前经测试的发行版有Ubuntu，Kali，ArchLinux 在Raspbian中安装Adapter(build中...) ¶ 下载 解压 赋予运行权限： chmod +x Adapter软件名 ，再双击运行 也可以右键修改文件权限，使其可运行 界面概览 ¶ 在安装完Adapter之后，我们来看看Adapter的使用界面。 围绕着两个核心组件来看， 整个Adapter的界面就是关于 插件 和 节点 的管理。比如说，在控制台里， 我们可以查看插件和节点的启用状态，以及打开和关闭我们的插件。然后在创作平台中去使用它们。 以extension开头的就是插件，以node开头的就是节点。 接下来我们将进入使用Adapter的环节，通过两个例子看看Adapter可以做些什么吧。 在安装中如果遇到问题，欢迎 在Codelab社区 中提出。","text_tokens":["¶","或者","、","哈希","喜欢","所用","低于","将","页面","选择","得到","不","https","？","8","好","目前","精简版","警报","控制台","启用","树莓","webui","关闭","raspbian","欢迎","去","默认","位","后","接下来","两个","无","然后","sha256","整个","做些","初学",":","系统","打开","7","发行","完成","archlinux","16.04","(","到",",","步骤","rpi","执行","平台","重命名","但","build","如何","10","注意事项","比较","要","关于","会","firefox","遇到","no","你","完整版","浏览器","buster","了解","linux","windows","chmod","有","分为","经","库","事项","格式文件","3","是","kali","组件","的",".","命令行","环节","最新","文件","允许","没有","赋予","值","4","中文","使用","codelab","定位","u","附","查看","它们","一下","经过","在","以","围绕","秒","它","可","使","里","派",")","呢","需要","成功","有时","核心"," ","（","我们","macfull","10.13","/","名","状态","之后","火墙","三方","12358","说明","注意","管理","...","python","解压","）","以及","点击","折腾","出现","10.15","提醒","可能","可以","出","这","比较慢","unzip","们","看看","。","该","macos","命名","接下","空格","精简","会弹","件夹","ubuntu","x","动弹","运行","小伙","目标","操作系统","当前","双击","64","格式","影响","kail","推荐","提出","创作","自定义","用","上","也","完","依赖","供","32","节点","看到","发行版","下","4.1","自","来","温馨","请","确保","adapter","提示","较慢","自动","小伙伴","修改","-","就是","社区","启动","着","0","操作","zip","软件","名字","winfull","吧","界面","比如说","，","最好","问题","通过","自定","来看","和","定义","+","第三方","测试","此","防火","学者","控制","如果","正常","中","v3","建议","chrome","完整","概览","mac","安装","其","例子","下载","版本","什么","：","下面","各个","club","简称","伙伴","了","大致","extension","第三","链接","就","比如","访问","整版","无法","这个","再","adpater","5","浏览","防火墙","即","下来","插件","yes","node","4.0","用户","不要","就会弹","进入","介绍","权限","右键","文件夹","初学者","3.7","开头","命令","要求","管理员","会自","win","功能"],"title":"安装Adapter","title_tokens":["安装","adapter"]},{"location":"get_start/gs_install/#codelab-adapter","text":"","text_tokens":[],"title":"安装 Codelab Adapter","title_tokens":[" ","安装","codelab","adapter"]},{"location":"get_start/gs_install/#_1","text":"经过Adapter的概览，我们了解了Adapter的大致功能，以及插件和节点的功能。 下面我们来安装CodeLab Adapter（简称Adapter）。 目前 CodeLab Adapter v3 可以在Mac、 Windows、 Linux、Raspbian（树莓派） 平台上正常运行。Adapter目前有分为两个版本可供小伙伴们选择 完整版 和 精简版 。这两个版本该如何选择呢？ 版本 Adapter Extension（插件） Adapter Node（节点） 目标用户 完整版 Yes Yes 初学者 精简版 Yes No(需要Python依赖) 喜欢折腾和自定义的用户 附：Adpater完整版所用到的 Python第三方库","text_tokens":["、","喜欢","所用","选择","？","目前","精简版","树莓","raspbian","两个","初学","(","到","平台","如何","no","完整版","了解","linux","windows","有","分为","库","的","codelab","附","经过","在","可","派",")","呢","需要"," ","（","我们","三方","python","）","以及","折腾","可以","这","们","。","该","精简","运行","小伙","目标","自定义","上","依赖","供","节点","来","adapter","小伙伴","，","自定","和","定义","第三方","学者","正常","v3","完整","概览","mac","安装","版本","：","下面","简称","伙伴","了","大致","extension","第三","整版","adpater","插件","yes","node","用户","初学者","功能"],"title":"版本介绍","title_tokens":["介绍","版本"]},{"location":"get_start/gs_install/#download","text":"最新版本: 4.1.0 操作系统 完整版 精简版 系统要求 安装注意事项 macOS macFull.zip 无 macOS 10.13.5（64位）+ mac安装步骤 Windows winFull.zip 无 Win 7 /8 /10 （32位/64位） win安装步骤 Linux 无 linux.zip(4.0.0) 经测试发行版Ubuntu、Kail、ArchLinux linux安装步骤 Raspbian（树莓派） 无 rpi.zip(3.7.4) 低于buster的版本可能无法运行 树莓派安装步骤 附:各个版本的哈希值(Sha256)","text_tokens":["buster","+","测试","linux","windows","macos","经","、","低于","事项","哈希","精简","完整",".","mac","的","最新","安装","win","8","ubuntu","运行","版本","精简版","值","操作系统","树莓","4","raspbian","各个","64","位","kail","附","无","sha256",":","系统","32","7","发行","整版","4.1","发行版","(","）",")","步骤","archlinux","派","无法","5","rpi"," ","macfull","（","10.13","/","4.0","0","注意事项","10","操作","注意","zip","3.7","winfull","要求","完整版","可能"],"title":"Codelab Adapter下载链接","title_tokens":[" ","下载","codelab","adapter","链接"]},{"location":"get_start/gs_install/#mac","text":"下载 双击.zip格式文件就会得到可执行的Adapter 点击右键打开，会出现 点击打开就会弹出Adapter的浏览器页面 到此在Mac中安装Adapter完成。 温馨提示：在 macOS 10.15 打开软件可能会比较慢(有时需要3-5秒)，问题目前在定位中，但在打开后不影响使用。","text_tokens":["比较慢","出","此","。","macos","中","3","格式文件","页面","的",".","得到","mac","文件","会弹","安装","不","下载","目前","：","双击","使用","格式","影响","后","定位","在","就","完成","打开","秒","可","到","(",")","温馨","adapter","浏览","提示","较慢","需要","有时","5","执行"," ","-","10.15","就会弹","但","右键","比较","软件","zip","会","出现","点击","，","浏览器","问题","可能"],"title":"在Mac中安装Adapter","title_tokens":["在","安装","中","adapter","mac"]},{"location":"get_start/gs_install/#win","text":"下载 右键解压,然后进入解压后的文件夹, 双击 CodeLab-Adapter 文件。（提醒: 最好不要重命名文件夹，如果要重命名，确保名字中没有中文和空格） 运行Adapter，会自动弹出默认浏览器（推荐使用Firefox或者Chrome浏览器）。 如果出现防火墙的警报，点击允许访问就好了。 看到一下界面就说明安装成功了。 温馨提示：Windows 7下最好以管理员权限运行。","text_tokens":["出","和","防火","浏览器","或者","windows","。","如果","中","命名","空格","chrome","的","文件","件夹","安装","好","下载","动弹","运行","警报","允许","没有","点击","界面","：","双击","中文","使用","默认","codelab","后","推荐","了","然后","一下","firefox","以","就",":","下","看到","7","访问","管理员",",","温馨","确保","adapter","浏览","防火墙","提示","成功"," ","-","（","重命名","不要","权限","进入","右键","文件夹","火墙","要","出现","说明","管理","解压","）","名字","提醒","会自","，","最好"],"title":"在Windows中安装Adapter","title_tokens":["在","安装","windows","中","adapter"]},{"location":"get_start/gs_install/#linux","text":"下载 用unzip命令解压 在命令行中运行Adapter就会自动弹出 温馨提示： 无法运行请赋予可执行权限 chmod u+x Adapter软件名 在Ubuntu 16.04下可能无法自动打开浏览器。建议在命令行下启动它，你将看到 https://codelab-adapter.codelab.club:12358/ , 这个链接即是 WebUI 当前经测试的发行版有Ubuntu，Kali，ArchLinux","text_tokens":["出","+","测试","chmod","。","经","中","是","有","建议","kali",".","命令行","的","你","https","ubuntu","下载","动弹","运行","x","赋予","当前","：","webui","club","codelab","u","用","链接","在","可能","就",":","下","打开","它","可","看到","自","无法","16.04","这个",",","发行","请","温馨","发行版","archlinux","adapter","提示","浏览","自动","即","执行"," ","/","-","权限","名","启动","12358","软件","命令","会","解压","将","，","浏览器","unzip"],"title":"Linux中安装Adapter","title_tokens":["安装","中","linux","adapter"]},{"location":"get_start/gs_install/#rpi","text":"下载 解压 赋予运行权限： chmod +x Adapter软件名 ，再双击运行 也可以右键修改文件权限，使其可运行","text_tokens":["可以","+","chmod","文件","其","下载","x","运行","赋予","：","双击","也","可","再","adapter","修改"," ","权限","名","右键","软件","解压","使","，"],"title":"在Raspbian中安装Adapter(build中...)","title_tokens":["在","安装","build","raspbian","(",")","中","...","adapter"]},{"location":"get_start/gs_install/#_2","text":"在安装完Adapter之后，我们来看看Adapter的使用界面。 围绕着两个核心组件来看， 整个Adapter的界面就是关于 插件 和 节点 的管理。比如说，在控制台里， 我们可以查看插件和节点的启用状态，以及打开和关闭我们的插件。然后在创作平台中去使用它们。 以extension开头的就是插件，以node开头的就是节点。 接下来我们将进入使用Adapter的环节，通过两个例子看看Adapter可以做些什么吧。 在安装中如果遇到问题，欢迎 在Codelab社区 中提出。","text_tokens":["来看","可以","和","看看","控制","。","如果","组件","中","接下","环节","通过","的","安装","例子","控制台","关闭","欢迎","启用","什么","使用","去","codelab","接下来","它们","extension","两个","查看","然后","创作","提出","在","完","围绕","整个","以","做些","打开","节点","比如","里","以及","来","adapter","核心","下来"," ","插件","我们","就是","平台","node","进入","状态","社区","之后","着","关于","管理","开头","将","吧","界面","比如说","遇到","，","问题"],"title":"界面概览","title_tokens":["界面","概览"]},{"location":"get_start/gs_microbit/","text":"Adapter插件——Micro:bit say：“Hello” ¶ 在上一个项目中，我们使用了Adapter插件让小猫帮我们打开了网页，这一次 我们用Adapter插件将创作平台和Micro:bit连接起来。让我们在创作平台操控Micro:bit。 Micro:bit概览 ¶ Micro:bit是一个小型的可编程计算机，旨在使学习与教学变得轻松有趣 Micro:bit就是一块小小的电路板，我们可以用它显示一个爱心和各种好玩的图案，还可以用它来控制创作平台的小猫。当然它功能远不止这些。想了解更多可以到 Micro:bit学习资源 。 Micro:bit：“Hello” ¶ 现在我们开始使用Adapter来连接Micro:bit，让Micro:bit显示出“Hello”。 第一步：连接Micro:bit ¶ 使用数据线将 micro:bit 接入电脑，这时候会看到Micro:bit的黄灯闪烁一会，就停止了。随后打开Codelab Adapter。 温馨提示：Windows 7 用户注意，为了能发现并连接 micro:bit，需要 安装驱动 （下载后运行即可） 第二步：添加MicroBit扩展 ¶ 如果是第一次连接，会自动刷入固件，刷入固件是将看到Micro:bit背面的LED灯快速闪烁， 稍等片刻，固件就刷好了。 刷完之后，重新连接，连接之后，你应该看到 micro:bit 背后的信号灯高频闪烁，这时我们就将创作平台和Micro:bit连接起来了。 温馨提示：Linux 非root用户注意，在刷入固件之前，使用 usb 串口需要做权限设置： sudo chmod 666 /dev/ttyACM0 。 第三步：开始编程 ¶ 我们尝试用积木块使Micro:bit say：“Hello” 在点击积木块后，Micro:bit就会显示出“Hello”了。 还可以做些什么呢？我们还可以尝试显示一个爱心。还可以。。。请你发挥你的想象力吧! 最后 ¶ 我们尝试用Adapter将创作平台和Micro:bit连接起来，并让Micro:bit Say：“Hello”。 Adapter还可以做些什么呢？ 让我们接下来跟着探索吧。","text_tokens":["¶","一块","hello","更","可编","让","多","好","？","快速","后","接下来","第一步","发现","爱心","做些",":","这些","打开","计算机","7","稍等片刻","到","一步","背后","设置","micro","高频","刷","电脑","usb","平台","有趣","做","轻松","会","接起","计算","一次","你","算机","ttyacm0","接入","各种","了解","linux","尝试","windows","即可","chmod","是","能","一会","的","网页","这时候","想象","随后","探索","root","项目","使用","第三步","codelab","信号","在","数据线","它","电路","say","编程","呢","需要","!","连接","应该"," ","（","我们","/","之后","最后","电路板","666","注意","跟着","将","远不止","）","积木","点击","图案","为了","“","可以","—","这","出","非","还","。","可编程","不止","第一次","第二步","接下","dev","这时","sudo","”","资源","运行","小小的","与","添加","停止","led","创作","一个","用","学习","串口","上","完","三步","现在","想","小小","时候","看到","发挥","来","温馨","请","adapter","提示","自动","并","二步","当然","就是","灯","第一","扩展","片刻","驱动","吧","数据","刷入","信号灯","，","和","教学","固件","控制","如果","中","好玩","概览","操控","安装","下载","显示","什么","：","小型","了","起来","第二","第三","旨在","就","重新","帮","之前","小猫","想象力","下来","插件","连接起来","开始","用户","bit","权限","背面","黄灯","microbit","闪烁","变得","块","使","功能"],"title":"入门案例2","title_tokens":["2","案例","入门"]},{"location":"get_start/gs_microbit/#adaptermicrobit-sayhello","text":"在上一个项目中，我们使用了Adapter插件让小猫帮我们打开了网页，这一次 我们用Adapter插件将创作平台和Micro:bit连接起来。让我们在创作平台操控Micro:bit。","text_tokens":["这","和","。","中","网页","让","操控","项目","使用","了","起来","创作","一个","用","上","在",":","打开","帮","小猫","adapter","micro","连接","插件"," ","我们","平台","连接起来","bit","，","将","接起","一次"],"title":"Adapter插件——Micro:bit say：“Hello”","title_tokens":["插件"," ","—","“","bit",":","hello","：","say","micro","adapter","”"]},{"location":"get_start/gs_microbit/#microbit","text":"Micro:bit是一个小型的可编程计算机，旨在使学习与教学变得轻松有趣 Micro:bit就是一块小小的电路板，我们可以用它显示一个爱心和各种好玩的图案，还可以用它来控制创作平台的小猫。当然它功能远不止这些。想了解更多可以到 Micro:bit学习资源 。","text_tokens":["可以","和","一块","各种","了解","教学","还","控制","计算","可编程","。","更","不止","是","好玩","可编","的","多","资源","小小的","与","显示","小型","创作","一个","学习","用","爱心","旨在","想",":","小小","这些","计算机","它","电路","到","来","编程","micro","小猫","当然"," ","有趣","就是","我们","bit","平台","轻松","电路板","变得","远不止","使","，","图案","算机","功能"],"title":"Micro:bit概览","title_tokens":[":","概览","bit","micro"]},{"location":"get_start/gs_microbit/#microbithello","text":"现在我们开始使用Adapter来连接Micro:bit，让Micro:bit显示出“Hello”。","text_tokens":["“","出","我们","开始","现在","bit",":","hello","显示","。","使用","来","让","micro","adapter","，","连接","”"],"title":"Micro:bit：“Hello”","title_tokens":["“","bit",":","hello","：","micro","”"]},{"location":"get_start/gs_microbit/#microbit_1","text":"使用数据线将 micro:bit 接入电脑，这时候会看到Micro:bit的黄灯闪烁一会，就停止了。随后打开Codelab Adapter。 温馨提示：Windows 7 用户注意，为了能发现并连接 micro:bit，需要 安装驱动 （下载后运行即可）","text_tokens":["接入","windows","即可","。","这时","一会","能","的","这时候","随后","安装","下载","运行","停止","：","使用","了","codelab","后","发现","数据线","就",":","打开","时候","看到","7","温馨","micro","adapter","提示","电脑","需要","并","连接"," ","（","用户","bit","黄灯","闪烁","注意","驱动","会","将","数据","）","，","为了"],"title":"第一步：连接Micro:bit","title_tokens":["bit",":","第一","：","一步","micro","第一步","连接"]},{"location":"get_start/gs_microbit/#microbit_2","text":"如果是第一次连接，会自动刷入固件，刷入固件是将看到Micro:bit背面的LED灯快速闪烁， 稍等片刻，固件就刷好了。 刷完之后，重新连接，连接之后，你应该看到 micro:bit 背后的信号灯高频闪烁，这时我们就将创作平台和Micro:bit连接起来了。 温馨提示：Linux 非root用户注意，在刷入固件之前，使用 usb 串口需要做权限设置： sudo chmod 666 /dev/ttyACM0 。","text_tokens":["和","linux","固件","非","chmod","如果","。","一次","是","第一次","dev","这时","的","sudo","你","好","root","：","led","使用","快速","了","起来","创作","信号","串口","在","完","就","重新",":","看到","稍等片刻","之前","温馨","背后","设置","micro","高频","刷","提示","自动","usb","需要","连接","应该"," ","连接起来","我们","平台","用户","bit","灯","权限","第一","/","之后","背面","片刻","做","666","闪烁","注意","会","将","刷入","接起","信号灯","，","ttyacm0"],"title":"第二步：添加MicroBit扩展","title_tokens":["扩展","添加","microbit","：","第二步","第二","二步"]},{"location":"get_start/gs_microbit/#_1","text":"我们尝试用积木块使Micro:bit say：“Hello” 在点击积木块后，Micro:bit就会显示出“Hello”了。 还可以做些什么呢？我们还可以尝试显示一个爱心。还可以。。。请你发挥你的想象力吧!","text_tokens":["“","出","可以","尝试","hello","还","。","的","想象","”","你","？","显示","什么","：","了","后","用","一个","在","爱心","就","做些",":","发挥","say","请","micro","呢","!","想象力"," ","我们","bit","会","块","吧","使","积木","点击","，"],"title":"第三步：开始编程","title_tokens":["开始","：","第三步","编程","第三","三步"]},{"location":"get_start/gs_microbit/#_2","text":"我们尝试用Adapter将创作平台和Micro:bit连接起来，并让Micro:bit Say：“Hello”。 Adapter还可以做些什么呢？ 让我们接下来跟着探索吧。","text_tokens":["“","可以","和","尝试","hello","还","。","接下","让","”","探索","？","什么","：","起来","接下来","创作","用","做些",":","say","micro","adapter","呢","并","连接","下来"," ","连接起来","我们","平台","bit","跟着","将","接起","吧","，"],"title":"最后","title_tokens":["最后"]},{"location":"get_start/gs_pyproject/","text":"Adapter插件——让小猫来打开网站 ¶ 在前一小节，我们介绍了Adapter的整体界面，现在我们开始使用Adapter去扩展创作平台的能力。 Adapter插件可以让创作平台拥有更多的能力，我们可以用创作平台让小猫自由的旋转，让小猫去追捕小鱼，那有没有想过 让小猫去帮我们打开CodeLab的网站呢？ 接下来，我们来尝试点击小猫，让小猫为我们打开CodeLab网站。 让我们开始吧！ 第一步：启用Python插件 ¶ 首先，我们打开Adapter，并打开创作平台，然后在创作平台中，我们可以看到右上方的小球是绿色的，如果没有，请重启Adapter，再次打开Python插件。 接下来我们将Python扩展添加到创作平台中，点击左下角的添加扩展。 在添加扩展页面找到并点击Python扩展 到这里，第一步：添加Python扩展就完成了。 第二步：开始编程 ¶ 在这里我们将启用Python扩展，并且 利用扩展将Codelab的主页和小猫连接起来。 首先，让我们编程， 点击绿旗的时候，就启动Python扩展 。 随后我们将创造一个属于自己的积木，在创造一个积木时，我们先给积木取个名字，然后将我们想要赋予积木的功能拖到自定义积木的下方。 要赋予自定义积木打开网站的能力，只需要将 PyHelper.open_url(\"https://codelab.club\") 复制并粘贴到python积木块中, 这样一来我们就赋予了自定义积木块打开Codelab网站的能力了。 到这里好像可以结束了，可是我们的目标是让小猫来打开网站。接下来我们将积木的能力赋予给小猫。 第三步：让小猫来打开网站 ¶ 到这里，我们已经将所有的工作做完了，现在我们将点击绿旗，再点击小猫。看看会发生什么？ 如果在操作过程遇到困难，可以直接参考 项目源码 最后 ¶ 到这里我们已经成功的让小猫帮我们打开网站了，有的小伙伴会说我能打开自己喜欢的网站吗？ 当然可以，我们可以尝试将Python积木块中的网址替换一下？也许打开的就是你喜欢的网站了。 在这个项目中，我们做了非常简单的三件事情 启动Adapter的Python插件(extension_python) 创造了一个拥有打开网站能力的积木 将打开网站的能力赋予给了小猫 接下来我们将继续扩展创作平台的能力，连接Microbit。","text_tokens":["¶","参考","为","更","喜欢","绿旗","页面","让","多","https","属于","？","简单","继续","启用","去","接下来","三件","第一步","然后","非常简单",":","完成","打开","遇到困难","说","！","有没有","到","(","能力","一步",",","困难","平台","可是","给","做","要","_","一来","会","接起","pyhelper","遇到","所有","你","首先","尝试","拖","只","有","是","直接","结束","能","再次","的","整体",".","小鱼","随后","取个","操作过程","也许","自由","没有","赋予","项目","使用","第三步","codelab","吗","一下","在","并且","时",")","编程","呢","需要","成功","连接"," ","/","我们","想过","下角","这里","最后","非常","好像","python","将","积木","点击","名字","可以","—","那","看看","过程","。","工作","接下","第二步","我","发生","想要","小伙","添加","目标","小球","粘贴","创作","用","一个","自定义","三步","完","现在","源码","看到","时候","作过","来","请","adapter","拥有","并","二步","小伙伴","当然","先给","就是","扩展","第一","替换","启动","追捕","一","操作","主页","吧","这样一来","界面","\"","找到","，","网址","自定","和","定义","如果","右上方","中","上方","open","什么","：","左下角","利用","自己","club","伙伴","了","起来","第二","extension","下方","第三","就","url","帮","这个","再","小猫","前","网站","下来","绿色","插件","连接起来","开始","左下","已经","复制","介绍","右上","microbit","重启","事情","这样","创造","块","小节","旋转","功能"],"title":"入门案例1","title_tokens":["案例","入门","1"]},{"location":"get_start/gs_pyproject/#adapter","text":"在前一小节，我们介绍了Adapter的整体界面，现在我们开始使用Adapter去扩展创作平台的能力。 Adapter插件可以让创作平台拥有更多的能力，我们可以用创作平台让小猫自由的旋转，让小猫去追捕小鱼，那有没有想过 让小猫去帮我们打开CodeLab的网站呢？ 接下来，我们来尝试点击小猫，让小猫为我们打开CodeLab网站。 让我们开始吧！","text_tokens":["可以","那","尝试","为","。","更","接下","整体","的","让","多","小鱼","？","自由","旋转","没有","使用","去","了","codelab","接下来","创作","用","在","现在","打开","！","有没有","帮","能力","来","小猫","前","adapter","拥有","呢","网站","下来"," ","插件","我们","开始","平台","想过","介绍","扩展","追捕","一","吧","小节","界面","点击","，"],"title":"Adapter插件——让小猫来打开网站","title_tokens":["插件","—","打开","来","小猫","adapter","网站","让"]},{"location":"get_start/gs_pyproject/#python","text":"首先，我们打开Adapter，并打开创作平台，然后在创作平台中，我们可以看到右上方的小球是绿色的，如果没有，请重启Adapter，再次打开Python插件。 接下来我们将Python扩展添加到创作平台中，点击左下角的添加扩展。 在添加扩展页面找到并点击Python扩展 到这里，第一步：添加Python扩展就完成了。","text_tokens":["可以","如果","。","找到","右上方","中","是","接下","上方","再次","的","页面","没有","添加","左下角","：","小球","了","接下来","创作","第一步","然后","在","就","完成","打开","看到","到","请","一步","adapter","并","绿色","下来","插件"," ","我们","平台","左下","右上","扩展","下角","这里","第一","重启","python","将","点击","，","首先"],"title":"第一步：启用Python插件","title_tokens":["插件","第一","启用","：","一步","python","第一步"]},{"location":"get_start/gs_pyproject/#_1","text":"在这里我们将启用Python扩展，并且 利用扩展将Codelab的主页和小猫连接起来。 首先，让我们编程， 点击绿旗的时候，就启动Python扩展 。 随后我们将创造一个属于自己的积木，在创造一个积木时，我们先给积木取个名字，然后将我们想要赋予积木的功能拖到自定义积木的下方。 要赋予自定义积木打开网站的能力，只需要将 PyHelper.open_url(\"https://codelab.club\") 复制并粘贴到python积木块中, 这样一来我们就赋予了自定义积木块打开Codelab网站的能力了。 到这里好像可以结束了，可是我们的目标是让小猫来打开网站。接下来我们将积木的能力赋予给小猫。","text_tokens":["绿旗","让","https","属于","启用","接下来","然后",":","打开","到","(","能力",",","可是","给","要","_","一来","接起","pyhelper","首先","拖","只","是","结束","的",".","随后","取个","赋予","codelab","在","并且","时",")","编程","需要","连接"," ","/","我们","这里","好像","将","python","积木","点击","名字","可以","。","接下","想要","目标","粘贴","一个","自定义","时候","来","并","先给","扩展","启动","主页","这样一来","\"","，","自定","和","定义","中","open","利用","自己","club","了","起来","下方","就","url","小猫","网站","下来","连接起来","复制","这样","创造","块","功能"],"title":"第二步：开始编程","title_tokens":["开始","：","编程","第二步","第二","二步"]},{"location":"get_start/gs_pyproject/#_2","text":"到这里，我们已经将所有的工作做完了，现在我们将点击绿旗，再点击小猫。看看会发生什么？ 如果在操作过程遇到困难，可以直接参考 项目源码","text_tokens":["可以","参考","看看","过程","。","工作","如果","直接","绿旗","发生","的","操作过程","？","遇到","什么","项目","了","在","完","现在","遇到困难","源码","作过","再","到","小猫","困难"," ","我们","已经","这里","做","操作","会","将","点击","所有","，"],"title":"第三步：让小猫来打开网站","title_tokens":["打开","：","第三步","来","小猫","让","第三","网站","三步"]},{"location":"get_start/gs_pyproject/#_3","text":"到这里我们已经成功的让小猫帮我们打开网站了，有的小伙伴会说我能打开自己喜欢的网站吗？ 当然可以，我们可以尝试将Python积木块中的网址替换一下？也许打开的就是你喜欢的网站了。 在这个项目中，我们做了非常简单的三件事情 启动Adapter的Python插件(extension_python) 创造了一个拥有打开网站能力的积木 将打开网站的能力赋予给了小猫 接下来我们将继续扩展创作平台的能力，连接Microbit。","text_tokens":["可以","尝试","。","有","中","喜欢","接下","我","能","的","让","也许","你","？","简单","继续","小伙","赋予","项目","自己","伙伴","了","接下来","三件","extension","创作","一个","吗","一下","在","非常简单","说","打开","帮","这个","到","(",")","能力","小猫","adapter","拥有","成功","网站","小伙伴","当然"," ","插件","我们","就是","已经","下来","平台","给","扩展","替换","这里","做","启动","非常","连接","事情","_","microbit","会","块","将","python","创造","积木","，","网址"],"title":"最后","title_tokens":["最后"]},{"location":"help/","text":"帮助 ¶ 如果遇到问题，欢迎到 CodeLab论坛 里交流讨论","text_tokens":[" ","¶","，","欢迎","里","交流","如果","到","论坛","codelab","讨论","遇到","帮助","问题"],"title":"论坛","title_tokens":["论坛"]},{"location":"help/#_1","text":"如果遇到问题，欢迎到 CodeLab论坛 里交流讨论","text_tokens":[" ","欢迎","里","交流","如果","到","论坛","codelab","讨论","遇到","，","问题"],"title":"帮助","title_tokens":["帮助"]},{"location":"project_tutorial/eim_pt/","text":"Python对象的连接器：EIM 插件 ¶ 好事多磨，经过 对象和消息 的介绍我们终于来到第一个项目案例： EIM。 教程目的 ¶ 我们将使用 EIM 插件 去获得 操作系统 的信息。其中涉及 Python 代码编辑器： Jupyterlab 的操作。 你可能会感到头大，什么是 EIM ，什么又是 操作系统 ？莫头疼，让我们一一细看。 我们非常鼓励 打开浏览器去搜索你不懂的词汇 ，比如操作系统。 概念解释 ¶ 操作系统 ¶ 什么是操作系统呢？维基百科的定义如下 操作系统（英语：Operating System，缩写：OS）是一组主管并控制计算机操作、运用和运行硬件、软件资源和提供公共服务来组织用户交互的相互关联的系统软件程序，同时也是计算机系统的内核与基石。 ——维基百科 这个定义很复杂，牵扯到计算机硬件，软件，以及编程等话题。我们在这里不详细展开。 在直观的认识中，我们使用的 Windows ， macOS 和 Unix类系统 等就是 操作系统 ，我们可以在 Windows 上运行浏览器进行 Scratch 编程，也可以在上面运行 腾讯QQ 等通讯软件和朋友聊天，少不了的是我们可以玩各种各样的电子游戏，可以做的事情还有很多。。。 到此为止，我们有上述直观的了解就够了，而 Python 这门编程语言就可以扩展我们和操作系统交互的能力。做一些除了玩游戏以外的事情。比如做一款属于自己的游戏，搭建一个属于自己的网页。 EIM 插件 ¶ 在 Adapter 中， EIM 是 Everything Is a Message 缩写，即 对象之间流动的一切皆消息 。 在Adapter所连接的 对象 之间，流动的就是 消息 ，而不同的 对象 可以各自根据 消息 做出不同的反应。 EIM插件 的作用是： 在Adapter中传递 Scratch对象 和 Python对象 之间的消息 。 你可能一下就反应过来了，这里的消息不就类似于小猫和小熊间的对话吗？只是 小猫 和 小熊 变成了 Scratch对象 和 Python对象 而已。Adatper 只不过是让这个“对话”在不同层面的对象之间得以发生， 就像声音的传播需要空气一样，Scratch 和 Python 之间的消息传递需要 Adapter插件：EIM （除了由衷对你聪明的赞许，我无话可说 :)） 消息流动示意图 案例：获取操作系统信息 ¶ 现在 我们尝试使用 Python 获取计算机操作系统的信息，然后通过 Adapter 发送到 Scratch 中，让小猫说出来。 以此为例扩展Scratch的能力，尝试触达计算机操作系统中的信息。 有的小伙伴又有疑问了： 我没有学过 Python 怎么办？ 莫慌，这里涉及的代码非常简单，并且提供的是一个模板，容许你稍加修改就可以达到你想要的效果，在这个过程中，更需要的是你的想象力。 第一步：编写 Python 代码 ¶ Jupyterlab 是一个写 Python 代码的环境，我们在上面修改和运行代码。 打开 Codelab Adapter （不记得如何打开的同学请回看 安装Adapter ）。 编写 Python 代码 我们将以下代码复制到一个 Python Notebook 中并运行他们。请注意阅读代码中的注释，帮助我们了解代码在干什么。 # “#”井号后面是注释，不作为代码运行 from codelab_adapter_client.utils import run_monitor , send_simple_message import platform # 上面两句代码的意思是导入代码运行需要的依赖 def monitor ( msg ): # 这里定义了一个函数，参数 msg 是 Scratch 中发送过来的消息，就是 Scratch 和 Python对象 说的话。 print ( msg ) return \"我的操作系统是：\" + str ( platform . platform ()) # 定义了返回给Scratch的系统信息，就是 Python对象 要对Scratch 说的话。 # send_simple_message(\"hello\") run_monitor ( monitor ) # 发送消息给Scratch ps：Linux用户，在第一次打开 Jupyter 插件时，会帮你自动下载并打开，操作不如上图也没关系，请给点耐心。 第二步：在 Scratch 中编程 ¶ 完成第一步操作后，我们在 Scratch 中，使用积木向 Python对象 发消息，和接收来自 Python对象 的消息。 所用到的积木块 广播消息积木 收消息积木 在 Scratch 中启动EIM扩展 发送和接收消息 我们在广播消息积木中输入发送给 Python对象 的消息：“ 我的操作系统是什么 ？” 随后让小猫说出获取的 操作系统信息 。演示用到的系统为 Linux系统 。 现在回到 Jupyterlab 中，我们可以看到，从下方的红框显示了 Scratch对象 发送过来的消息。 如果我们修改了上述代码，需要重新运行Python程序，点击红框中的 方块 ，再点击 运行箭头 ，就可以了。若实在不行，刷新一下页面，重新运行程序。 原理解释 ¶ 运行 Python 程序后，我们启动了 Python对象 ， Python对象 会持续地接收来自 Scratch对象 发送过来的消息。通过 run_monitor(monitor) 函数，我们将处理后的消息返回到 Scratch对象 中。我们可以看到，在这里 Python对象 其实就是一个 Python程序 启发与想象力 ¶ 在上述的教程中，我们观察到了， Scratch对象 是如何与 Python对象 进行沟通的. 这样一来， 我们就可以利用Python语言的能力，去处理来自 Scratch 的消息，并返回到Scratch中。 那么，我们还可以用到 Python语言 的哪些能力去处理 Scratch 的消息呢？比如： 在 Python对象 中使用AI自然语言处理，去理解小猫说的话，制作一个自动回复的机器人。 聊天机器人项目 在 Python对象 中使用图像识别，让小猫去理解摄像头的事物是什么？ 图像识别项目 比如。。。","text_tokens":["a","容许","发送到","消息","处理","页面","耐心","实在","空气","向","后","红框","scratch","直观","通讯","词汇","皆","玩","原理","意图","怎么办","给","_","要","一来","意思","为例","做出","玩游","此为","维基百","eim","基石","各种","了解","linux","反应","网页","以下","之间","如上","小熊","经过","print","我们","机器","回复","非常","摄像","注意","来自","python","将","积木","点击","可能","—","电子游戏","复制到","模板","懂","想要","子游","from","操作系统","得以","用到","事物","看到","怎么","作为","并","二步","就是","一些","广播","像","import","启动","内核","软件","回到","\"","启发","很多","和","来到","控制","感到","如果","间","送给","像头","安装","记得","自己","下方","等","涉及","运用","小猫","无话","若","client","变成","刷新","介绍","稍加","事情","那么","一样","头大","展开","类似","注释","只不过","无话可说","非常简单","计算机系统",":","打开","其中","能力","公共服务","机系统","点","浏览器","尝试","代码","于","os","对象","不同","赞许","一组","而","在","连接器","持续","并且","函数","时","地","为止","需要","连接"," ","不过","如上图","箭头","接器","由衷","对","解释","jupyter","str","还","。","触达","输入","ps","发生","def","案例","其实","不了","返回","msg","很","聪明","操作","编写","示意","一款","从","相互","message","百科","又","下载","：","程序","环境","utils","系统软件","重新","回","比如","可说","浏览","各样","插件","编程语言","用户","英语","聊天","缩写","获取","一一","写","¶","hello","各种各样","同学","更","关联","让","属于","语言","疑问","好事多磨","以此","好事","unix","然后","run","系统","演示","概念","计算机","(",",","一步","传递","notebook","话题","会","一次","windows","这门","是","的","两句","项目","观察","codelab","吗","一下","理解","除了","send","搜索","的话","monitor","教程","operating",")","编程","终于","呢","而已","传播","这里","计算机操作","simple","莫","可以","“","以外","过程","维基","return","”","资源","硬件","everything","干什么","与","就够","上图","发消息","莫慌","qq","如下","出来","一个","组织","他们","图像","来","请","adapter","一切","图像识别","小伙伴","信息","识别","第一","扩展","system","阅读","这样一来","ai","通过","中","上面","腾讯","什么","利用","了","第二","过来","再","即","想象力","编辑器","公共","复制","jupyterlab","软件资源","platform","沟通","为","类","认识","、","达到","所用","还有","不","？","简单","进行","学过","去","对话","方块","第一步","示意图","维基百科","说","完成","is","消息传递","到","上述","流动","没关系","做","如何","只是","计算","你","算机","同时","细看","有","想象",".","随后","没有","摄像头","使用","所","机器人","编辑","#","搭建","发送给","（","）","以及","作用","层面","导入","不行","macos","效果","根据","第一次","第二步","哪些","我","复杂","详细","运行","小伙","服务","送到","帮助","也","上","看","现在","依赖","关系","自动","修改","少不了","头疼","计算机硬件","收","目的","，","玩游戏","+","定义","参数","adatper","代码运行","第一个","自然","说出","到此为止","声音","交互","各自","主管","没关","井号","显示","自然语言","伙伴","鼓励","就","这个","帮","制作","发送","牵扯","接收","朋友","后面","电子","提供","获得","这样","块","游戏"],"title":"Python对象连接器：EIM","title_tokens":["eim","连接器","接器","：","python","对象","连接"]},{"location":"project_tutorial/eim_pt/#pythoneim","text":"好事多磨，经过 对象和消息 的介绍我们终于来到第一个项目案例： EIM。","text_tokens":["eim","和","来到","消息","。","第一个","对象","的","案例","项目","：","好事多磨","好事","一个","经过","终于"," ","我们","介绍","第一","，"],"title":"Python对象的连接器：EIM 插件","title_tokens":["eim"," ","插件","连接器","接器","：","python","对象","的","连接"]},{"location":"project_tutorial/eim_pt/#_1","text":"我们将使用 EIM 插件 去获得 操作系统 的信息。其中涉及 Python 代码编辑器： Jupyterlab 的操作。 你可能会感到头大，什么是 EIM ，什么又是 操作系统 ？莫头疼，让我们一一细看。 我们非常鼓励 打开浏览器去搜索你不懂的词汇 ，比如操作系统。","text_tokens":["eim","浏览器","代码","。","感到","细看","是","懂","的","又","让","不","？","什么","操作系统","：","头大","使用","去","编辑","鼓励","涉及","系统","打开","其中","搜索","比如","浏览","词汇","信息"," ","插件","我们","编辑器","头疼","，","jupyterlab","非常","获得","操作","会","将","python","一一","你","莫","可能"],"title":"教程目的","title_tokens":["目的","教程"]},{"location":"project_tutorial/eim_pt/#_2","text":"","text_tokens":[],"title":"概念解释","title_tokens":["概念","解释"]},{"location":"project_tutorial/eim_pt/#_3","text":"什么是操作系统呢？维基百科的定义如下 操作系统（英语：Operating System，缩写：OS）是一组主管并控制计算机操作、运用和运行硬件、软件资源和提供公共服务来组织用户交互的相互关联的系统软件程序，同时也是计算机系统的内核与基石。 ——维基百科 这个定义很复杂，牵扯到计算机硬件，软件，以及编程等话题。我们在这里不详细展开。 在直观的认识中，我们使用的 Windows ， macOS 和 Unix类系统 等就是 操作系统 ，我们可以在 Windows 上运行浏览器进行 Scratch 编程，也可以在上面运行 腾讯QQ 等通讯软件和朋友聊天，少不了的是我们可以玩各种各样的电子游戏，可以做的事情还有很多。。。 到此为止，我们有上述直观的了解就够了，而 Python 这门编程语言就可以扩展我们和操作系统交互的能力。做一些除了玩游戏以外的事情。比如做一款属于自己的游戏，搭建一个属于自己的网页。","text_tokens":["各种各样","类","认识","、","还有","关联","不","属于","？","进行","语言","展开","unix","计算机系统","维基百科","系统","计算机","到","scratch","上述","能力","直观","通讯","公共服务","机系统","玩","做","话题","计算","玩游","浏览器","算机","维基百","此为","同时","基石","各种","了解","windows","这门","os","是","有","的","网页","一组","而","使用","在","除了","搭建","operating","编程","呢","为止"," ","（","我们","这里","python","计算机操作","以及","）","可以","—","电子游戏","以外","维基","。","macos","复杂","资源","硬件","详细","运行","与","就够","子游","操作系统","服务","qq","如下","不了","一个","也","组织","上","来","并","就是","少不了","一些","很","计算机硬件","扩展","system","内核","操作","软件","，","玩游戏","很多","和","定义","一款","控制","中","相互","百科","上面","交互","腾讯","主管","到此为止","什么","：","自己","程序","了","系统软件","等","就","比如","这个","运用","浏览","牵扯","各样","公共","朋友","编程语言","用户","英语","聊天","电子","软件资源","缩写","提供","事情","游戏"],"title":"操作系统","title_tokens":["操作","操作系统","系统"]},{"location":"project_tutorial/eim_pt/#eim","text":"在 Adapter 中， EIM 是 Everything Is a Message 缩写，即 对象之间流动的一切皆消息 。 在Adapter所连接的 对象 之间，流动的就是 消息 ，而不同的 对象 可以各自根据 消息 做出不同的反应。 EIM插件 的作用是： 在Adapter中传递 Scratch对象 和 Python对象 之间的消息 。 你可能一下就反应过来了，这里的消息不就类似于小猫和小熊间的对话吗？只是 小猫 和 小熊 变成了 Scratch对象 和 Python对象 而已。Adatper 只不过是让这个“对话”在不同层面的对象之间得以发生， 就像声音的传播需要空气一样，Scratch 和 Python 之间的消息传递需要 Adapter插件：EIM （除了由衷对你聪明的赞许，我无话可说 :)） 消息流动示意图","text_tokens":["a","消息","一样","让","不","？","空气","类似","只不过","对话","无话可说","示意图",":","is","消息传递","scratch","传递","皆","流动","意图","只是","做出","你","eim","反应","于","是","对象","的","不同","赞许","之间","而","所","吗","一下","小熊","在","除了",")","需要","而已","传播","连接"," ","（","不过","这里","由衷","python","对","）","作用","可能","可以","“","层面","。","根据","我","发生","”","everything","得以","adapter","一切","就是","像","聪明","，","和","示意","adatper","中","message","间","声音","各自","：","了","过来","就","这个","小猫","即","可说","无话","插件","变成","缩写"],"title":"EIM 插件","title_tokens":["eim"," ","插件"]},{"location":"project_tutorial/eim_pt/#_4","text":"现在 我们尝试使用 Python 获取计算机操作系统的信息，然后通过 Adapter 发送到 Scratch 中，让小猫说出来。 以此为例扩展Scratch的能力，尝试触达计算机操作系统中的信息。 有的小伙伴又有疑问了： 我没有学过 Python 怎么办？ 莫慌，这里涉及的代码非常简单，并且提供的是一个模板，容许你稍加修改就可以达到你想要的效果，在这个过程中，更需要的是你的想象力。","text_tokens":["可以","尝试","容许","发送到","代码","过程","。","达到","效果","触达","中","有","是","模板","更","我","的","想象","让","又","你","想要","？","简单","小伙","没有","学过","操作系统","疑问","：","以此","送到","莫慌","使用","伙伴","了","出来","一个","然后","在","涉及","现在","非常简单","说","系统","就","计算机","并且","这个","怎么","发送","scratch","能力","小猫","adapter","需要","想象力","小伙伴","信息"," ","修改","我们","怎么办","，","扩展","这里","稍加","非常","提供","操作","为例","python","获取","计算","通过","算机"],"title":"案例：获取操作系统信息","title_tokens":["系统","案例","操作系统","：","操作","获取","信息"]},{"location":"project_tutorial/eim_pt/#python","text":"Jupyterlab 是一个写 Python 代码的环境，我们在上面修改和运行代码。 打开 Codelab Adapter （不记得如何打开的同学请回看 安装Adapter ）。 编写 Python 代码 我们将以下代码复制到一个 Python Notebook 中并运行他们。请注意阅读代码中的注释，帮助我们了解代码在干什么。 # “#”井号后面是注释，不作为代码运行 from codelab_adapter_client.utils import run_monitor , send_simple_message import platform # 上面两句代码的意思是导入代码运行需要的依赖 def monitor ( msg ): # 这里定义了一个函数，参数 msg 是 Scratch 中发送过来的消息，就是 Scratch 和 Python对象 说的话。 print ( msg ) return \"我的操作系统是：\" + str ( platform . platform ()) # 定义了返回给Scratch的系统信息，就是 Python对象 要对Scratch 说的话。 # send_simple_message(\"hello\") run_monitor ( monitor ) # 发送消息给Scratch ps：Linux用户，在第一次打开 Jupyter 插件时，会帮你自动下载并打开，操作不如上图也没关系，请给点耐心。","text_tokens":["platform","hello","消息","同学","耐心","不","注释","run",":","说","打开","系统","(",",","scratch","notebook","给","没关系","点","如何","_","要","意思","会","一次","你","了解","linux","代码","是","对象","的",".","两句","以下","codelab","#","如上","在","send","print","的话","时","monitor","函数",")","需要"," ","（","我们","如上图","这里","注意","python","将","）","对","simple","“","jupyter","str","导入","复制到","。","第一次","ps","return","我","”","def","运行","干什么","上图","from","操作系统","返回","帮助","一个","也","看","他们","依赖","请","作为","关系","adapter","msg","自动","并","修改","信息","就是","第一","import","操作","阅读","\"","，","编写","和","定义","+","参数","代码运行","中","message","上面","安装","没关","记得","下载","井号","什么","：","环境","utils","了","过来","回","帮","发送","插件","后面","client","用户","复制","jupyterlab","写"],"title":"第一步：编写 Python 代码","title_tokens":[" ","编写","第一","代码","：","一步","python","第一步"]},{"location":"project_tutorial/eim_pt/#scratch","text":"完成第一步操作后，我们在 Scratch 中，使用积木向 Python对象 发消息，和接收来自 Python对象 的消息。 所用到的积木块 广播消息积木 收消息积木 在 Scratch 中启动EIM扩展 发送和接收消息 我们在广播消息积木中输入发送给 Python对象 的消息：“ 我的操作系统是什么 ？” 随后让小猫说出获取的 操作系统信息 。演示用到的系统为 Linux系统 。 现在回到 Jupyterlab 中，我们可以看到，从下方的红框显示了 Scratch对象 发送过来的消息。 如果我们修改了上述代码，需要重新运行Python程序，点击红框中的 方块 ，再点击 运行箭头 ，就可以了。若实在不行，刷新一下页面，重新运行程序。","text_tokens":["消息","为","所用","页面","让","？","实在","向","方块","后","第一步","红框","完成","系统","演示","到","scratch","一步","上述","eim","linux","代码","是","对象","的","随后","使用","一下","在","需要","发送给"," ","我们","箭头","来自","python","积木","点击","“","可以","。","不行","输入","我","”","运行","发消息","操作系统","用到","现在","看到","信息","修改","广播","第一","扩展","启动","操作","回到","收","，","和","如果","从","中","送给","说出","显示","什么","：","程序","了","下方","过来","重新","就","再","发送","小猫","若","接收","刷新","jupyterlab","块","获取"],"title":"第二步：在 Scratch 中编程","title_tokens":[" ","在","：","scratch","中","编程","第二步","第二","二步"]},{"location":"project_tutorial/eim_pt/#_5","text":"运行 Python 程序后，我们启动了 Python对象 ， Python对象 会持续地接收来自 Scratch对象 发送过来的消息。通过 run_monitor(monitor) 函数，我们将处理后的消息返回到 Scratch对象 中。我们可以看到，在这里 Python对象 其实就是一个 Python程序","text_tokens":["可以","消息","。","处理","中","对象","通过","的","运行","程序","其实","返回","了","后","一个","过来","在","run","持续","看到","monitor","函数","(","到","地","scratch","发送",")","接收"," ","我们","就是","这里","启动","_","来自","会","python","将","，"],"title":"原理解释","title_tokens":["解释","原理"]},{"location":"project_tutorial/eim_pt/#_6","text":"在上述的教程中，我们观察到了， Scratch对象 是如何与 Python对象 进行沟通的. 这样一来， 我们就可以利用Python语言的能力，去处理来自 Scratch 的消息，并返回到Scratch中。 那么，我们还可以用到 Python语言 的哪些能力去处理 Scratch 的消息呢？比如： 在 Python对象 中使用AI自然语言处理，去理解小猫说的话，制作一个自动回复的机器人。 聊天机器人项目 在 Python对象 中使用图像识别，让小猫去理解摄像头的事物是什么？ 图像识别项目 比如。。。","text_tokens":["可以","那么","沟通","消息","还","。","哪些","中","是","处理","自然","对象","的",".","像头","让","？","进行","语言","与","摄像头","什么","项目","利用","：","自然语言","观察","使用","去","返回","了","用到","机器人","一个","理解","在","就","事物","说","图像","的话","比如","制作","教程","到","上述","scratch","能力","小猫","呢","自动","并","图像识别"," ","我们","识别","机器","回复","聊天","如何","摄像","一来","这样","来自","python","这样一来","ai","，"],"title":"启发与想象力","title_tokens":["与","想象","启发","想象力"]},{"location":"project_tutorial/microbit_pt/","text":"Micro:bit Radio 与 Adapter ¶ 在 入门案例2 中，我们通过 Micro:bit 插件 ， 在 Scratch 中对 Micro:bit 编程，但如果要充分使用 Micro:bit生态 的能力， 一块 Micro:bit 无法满足我们表达想法的需求。比如在 Fire!:投石器 项目中我们用到了 三块Micro:bit 。 而 Micro:bit Radio 插件 可以连接多块 Micro:bit ，并将 Scratch 和 Python语言 的能力结合到 Micro:bit 中。 教程目的 ¶ 在本篇教程中，我们将使用 Adapter 的 Micro:bit Radio 插件 连接两块 Micro:bit ，其中一个为 消息中转板 ，另一个为 功能板 。通过实现 无线控制小猫的案例，展示 Micro:bit 生态 与 Scratch 的连接。 原理解释 ¶ 在案例开始前，我们先介绍一些基本知识，以便了解 Micro:bit生态 能做什么，以及 Micro:bit Radio 插件的工作方式。 Micro:bit 生态能做什么 ¶ 在 入门案例2 中， 我们简单介绍了 Micro:bit 是什么？ 那 Micro:bit 生态 能做什么呢？ ，链接中的视频，向我们展示了 Micro:bit 能为我们按下快门，为小花浇水等一大堆有趣的事情。 不熟悉 Micro:bit 的小伙伴，我们推荐 micro:bit 官方社区 和 中文社区 ，社区里有丰富的教程与案例，供大家参考。 Micro:bit Radio 插件 ¶ Micro:bit Radio 使用了 Micro:bit 内置的无线通信模块，使得多块 Micro:bit 可以互相通信。 这需要 一块 Micro:bit 作为 消息中转站 ， Micro:bit 消息中转站 (简称 中转站 ）需要用USB线与计算机相连， 而其他 Micro:bit 作为 功能板 就通过 中转站 与计算机进行连接。 再建立以上连接之后，我们就可以通过 Scratch 对 功能板 Micro:bit (简称 功能板 ）进行编程，比如用 功能板 控制小猫的移动。 小伙伴可能会问： “我一块 Micro:bit 也能控制小猫的移动呀，为什么要用两块呢？” 在这里，只是想用一个简单的案例，说明多个 Micro:bit 连接的方式，为连接多个 Micro:bit 提供一个案例，以便我们利用多个 Micro:bit 表达我们的想法。 案例：无线控制小猫移动 ¶ 第一步：为 Micro:bit功能板 编程 ¶ 用USB线，将 功能板 连入计算机中 首先我们先在 makecode 中为 Micro:bit功能板 定义向 Micro:bit中转站 发送消息的按键 映射 按钮 “A” 和 “B” 分别发送字符串“a” 和 “b” 到中转站。 定义收到 Micro:bit中转站 消息的行为 即当 功能板 收到字符 “c” 时，显示爱心 我们将这 功能板 makecode代码 （文件后缀名为.hex)下载到计算机本地文件中，并拖入到 Micro:bit 文件夹中，完成代码的导入。 第二步：为 Micro:bit中转站 编程 ¶ 在 makecode 为 中转站 编程 定义向 Adapter 收发消息的功能 定义向 Micro:bit功能板 收发消息的功能 和第一步一样，下载 消息中转站 makecode代码 ，并烧入中转站。 以上的代码，看不懂是没关系的，只要我们知道相应的模块是做什么的就好了。 眼尖的小伙伴发现，上述步骤的关键，在于将 中转站 和 功能板 置于同一个 无线设置组 。使得它们彼此之间可以相互通信交流。 第三步：Scratch 环境初始化 ¶ 完成上述两步后，我们保持 中转站 与 计算机 的连接。并为 功能板 持续供电。 比如像这样的 打开 Adapter 在 Scratch 中启用 Micro:bit插件 ps：对这部分不熟悉的同学，请回看 入门案例：microbit 第四步：在 Scratch 中为功能板编程 ¶ 经过前三步，我们已经为两块 Micro:bit 和 Scratch 建立起连接。 现在， 我们要在 Scratch 中为 功能板 定义行为，用 A 和 B 按键来控制小猫的移动。 Scratch 代码如图所示： Micro:bit Radio项目 点击绿旗，再按下 功能板 的按键，小猫是不是如你所愿地前进和后退了呢？ 在 Scratch中 点击发送字符 “c” 的积木块，我们就可以在 功能板 上看到一个爱心了。 消息流动的过程 ¶ 在这个案例中，一共涉及了 三个对象 在沟通和交流。 Scratch，Micro:bit中转站 和 Micro:bit功能板 。 对象之间的消息传递如下图所示： 启发与想象力 ¶ 通过这个案例，我们可以看到， Adapter 可以将不同的对象连接起来，让不同对象可以彼此交互， 不仅仅是单一 Micro:bit 可以与 Scratch 进行交互，而且是整个 Micro:bit 生态 。 通过修改 功能板 的 makecode代码 ，以及 Scratch中的代码 我们可以使用 Micro:bit 更多的传感器来触发 我们想要发送的消息 。 比如人和人之间表示友好，不仅可以通过言语问候，也可以通过握手。 我们可以定义 Micro:bit 接收到特定的消息时，所作出的反应。 如果配合 Micro:bit 各种功能各异的扩展板，也许我们就可以构建出一个属于自己的计算机实体乐园了。 以上可能还不能满足一些好奇小伙伴的野心： 我能用其他对象（比如Python对象）去和 Micro:bit 生态 进行交互吗？这样我就可以让 Micro:bit 获得更多可自定义的行为了。 当然可以啦！接下来我们将用 Scratch PPT 的例子，展示 Python对象，Scratch对象 和 Micro:bit 的交流协作，去制作一个扩展多功能的独特 PPT 。","text_tokens":["a","一块","参考","消息","中转站","后缀","先","知道","向","后","接下来","发现","整个","是不是","scratch","如你所愿","分别","传感","有趣","原理","前三步","要","各异","初始化","各种","了解","反应","转站","四步","文件","之间","第三步","它们","经过","呀","里","!","我们","一共","将","python","积木","点击","可能","表示","我能","工作","烧入","不是","官方","想要","用到","用","第四","互相","看到","作为","本地","并","二步","一些","保持","无线","社区","像","启发","和","控制","充分","如果","三块","同一","多功能","例子","自己","使得","等","涉及","小猫","c","已经","介绍","文件夹","在于","事情","为什么","按","一样","不仅","而且","方式","触发","爱心","展示",":","打开","其中","能力","步骤","人","大堆","但","看不懂","同一个","友好","首先","代码","能","对象","不同","中转","而","映射","在","对象连接","持续","交流","时","基本知识","地","好奇","需要","连接"," ","之后","对","解释","野心","三个","出","还","。","乐园","ps","件夹","移动","案例","实体","推荐","握手","石器","自定义","问","以上","小花","两块","能为","相互","下载","：","即当","hex","环境","简称","快门","中为","回","比如","相应","前","下来","插件","结合","开始","啦","bit","ppt","实现","¶","连入","同学","传感器","更","线","独特","让","多","属于","语言","板","收发","计算机","！","构建","(","一步","设置","传递","micro","一大堆","usb","按下","会","所示","问候","是","相连","表达","的","需求","也许","仅仅","不仅仅","项目","中文","吗","可","教程",")","radio","编程","呢","所愿","另","这里","说明","浇水","后退","可以","“","这","配合","过程","接下","”","与","通信","如下","makecode","一个","b","三步","供","下","请","来","adapter","起","小伙伴","单一","视频","当然","2","第一","扩展","内置","通过","作出","特定","中","什么","利用","了","行为","第二","第三","按钮","拖入","无法","再","这部","想象力","功能","只要","沟通","为","绿旗","不","？","简单","进行","本篇","好","启用","熟悉","组","去","第一步","其他","完成","消息传递","到","上述","字符","流动","图","没关系","做","只是","协作","想法","计算","算机","有","建立","部分","彼此",".","想象","眼尖","使用","所","收到","这部分","关键","初始","按键","供电","言语","（","以及","）","不能","彼此之间","那","知识","导入","模块","第二步","我","第四步","小伙","多个","大家","上","也","看","以便","想","满足","后缀名","现在","关系","修改","生态","两步","感器","目的","，","自定","定义","字符串","一大","前进","交互","没关","显示","伙伴","起来","入门","链接","就","丰富","这个","制作","发送","置于","多块","如图所示","基本","接收","fire","无线通信","提供","microbit","获得","这样","块","投"],"title":"无线Micro:bit：Radio","title_tokens":["bit",":","无线","：","radio","micro"]},{"location":"project_tutorial/microbit_pt/#microbit-radio-adapter","text":"在 入门案例2 中，我们通过 Micro:bit 插件 ， 在 Scratch 中对 Micro:bit 编程，但如果要充分使用 Micro:bit生态 的能力， 一块 Micro:bit 无法满足我们表达想法的需求。比如在 Fire!:投石器 项目中我们用到了 三块Micro:bit 。 而 Micro:bit Radio 插件 可以连接多块 Micro:bit ，并将 Scratch 和 Python语言 的能力结合到 Micro:bit 中。","text_tokens":["可以","和","一块","充分","如果","。","中","表达","的","三块","需求","语言","案例","项目","而","使用","了","用到","石器","入门","在",":","满足","比如","无法","到","scratch","能力","编程","radio","micro","!","多块","并","连接"," ","插件","我们","结合","bit","但","2","，","生态","fire","要","想法","将","python","对","投","通过"],"title":"Micro:bit Radio 与 Adapter","title_tokens":[" ","bit",":","与","radio","micro","adapter"]},{"location":"project_tutorial/microbit_pt/#_1","text":"在本篇教程中，我们将使用 Adapter 的 Micro:bit Radio 插件 连接两块 Micro:bit ，其中一个为 消息中转板 ，另一个为 功能板 。通过实现 无线控制小猫的案例，展示 Micro:bit 生态 与 Scratch 的连接。","text_tokens":["消息","为","控制","。","中","通过","的","本篇","中转","与","案例","使用","一个","板","在","展示",":","其中","教程","scratch","radio","micro","adapter","小猫","连接"," ","插件","我们","另","bit","无线","生态","实现","将","两块","，","功能"],"title":"教程目的","title_tokens":["目的","教程"]},{"location":"project_tutorial/microbit_pt/#_2","text":"在案例开始前，我们先介绍一些基本知识，以便了解 Micro:bit生态 能做什么，以及 Micro:bit Radio 插件的工作方式。","text_tokens":["了解","知识","。","工作","能","的","先","案例","什么","方式","在","以便",":","基本知识","radio","micro","前","基本"," ","插件","开始","我们","一些","bit","生态","介绍","做","以及","，"],"title":"原理解释","title_tokens":["解释","原理"]},{"location":"project_tutorial/microbit_pt/#microbit","text":"在 入门案例2 中， 我们简单介绍了 Micro:bit 是什么？ 那 Micro:bit 生态 能做什么呢？ ，链接中的视频，向我们展示了 Micro:bit 能为我们按下快门，为小花浇水等一大堆有趣的事情。 不熟悉 Micro:bit 的小伙伴，我们推荐 micro:bit 官方社区 和 中文社区 ，社区里有丰富的教程与案例，供大家参考。","text_tokens":["和","那","参考","一大","为","。","有","中","是","能","的","官方","不","？","简单","小伙","与","案例","什么","向","熟悉","中文","伙伴","快门","了","推荐","大家","入门","链接","等","在","展示",":","丰富","供","里","教程","micro","呢","一大堆","小花","大堆","小伙伴"," ","视频","我们","有趣","bit","生态","2","介绍","按下","做","社区","事情","浇水","，","能为"],"title":"Micro:bit 生态能做什么","title_tokens":[" ","bit",":","生态","做","什么","micro","能"]},{"location":"project_tutorial/microbit_pt/#microbit-radio","text":"Micro:bit Radio 使用了 Micro:bit 内置的无线通信模块，使得多块 Micro:bit 可以互相通信。 这需要 一块 Micro:bit 作为 消息中转站 ， Micro:bit 消息中转站 (简称 中转站 ）需要用USB线与计算机相连， 而其他 Micro:bit 作为 功能板 就通过 中转站 与计算机进行连接。 再建立以上连接之后，我们就可以通过 Scratch 对 功能板 Micro:bit (简称 功能板 ）进行编程，比如用 功能板 控制小猫的移动。 小伙伴可能会问： “我一块 Micro:bit 也能控制小猫的移动呀，为什么要用两块呢？” 在这里，只是想用一个简单的案例，说明多个 Micro:bit 连接的方式，为连接多个 Micro:bit 提供一个案例，以便我们利用多个 Micro:bit 表达我们的想法。","text_tokens":["一块","消息","为","线","中转站","？","简单","进行","方式","板","其他",":","计算机","(","scratch","micro","usb","要","只是","会","想法","计算","算机","转站","相连","表达","建立","能","的","中转","而","使用","在","呀","radio","编程","呢","需要","连接"," ","我们","之后","这里","说明","对","）","可能","可以","“","这","模块","。","我","”","移动","小伙","与","案例","通信","多个","用","一个","也","以便","互相","想","作为","问","以上","小伙伴","无线","内置","两块","通过","，","控制","什么","：","使得","利用","简称","伙伴","了","就","比如","再","小猫","多块","bit","无线通信","提供","为什么","功能"],"title":"Micro:bit Radio 插件","title_tokens":[" ","插件","bit",":","radio","micro"]},{"location":"project_tutorial/microbit_pt/#_3","text":"","text_tokens":[],"title":"案例：无线控制小猫移动","title_tokens":["无线","移动","案例","控制","：","小猫"]},{"location":"project_tutorial/microbit_pt/#microbit_1","text":"用USB线，将 功能板 连入计算机中 首先我们先在 makecode 中为 Micro:bit功能板 定义向 Micro:bit中转站 发送消息的按键 映射 按钮 “A” 和 “B” 分别发送字符串“a” 和 “b” 到中转站。 定义收到 Micro:bit中转站 消息的行为 即当 功能板 收到字符 “c” 时，显示爱心 我们将这 功能板 makecode代码 （文件后缀名为.hex)下载到计算机本地文件中，并拖入到 Micro:bit 文件夹中，完成代码的导入。","text_tokens":["“","连入","a","定义","和","这","字符串","消息","代码","为","导入","转站","。","中","线","的",".","”","中转站","文件","件夹","后缀","下载","中转","先","算机","显示","向","即当","hex","映射","收到","行为","makecode","板","用","按钮","b","在","爱心",":","后缀名","中为","计算机","按键","拖入","时","完成","到","发送",")","字符","本地","usb","micro","分别","c","并"," ","（","我们","bit","文件夹","将","计算","，","首先","功能"],"title":"第一步：为 Micro:bit功能板 编程","title_tokens":[" ","bit",":","第一","为","：","一步","编程","micro","第一步","板","功能"]},{"location":"project_tutorial/microbit_pt/#microbit_2","text":"在 makecode 为 中转站 编程 定义向 Adapter 收发消息的功能 定义向 Micro:bit功能板 收发消息的功能 和第一步一样，下载 消息中转站 makecode代码 ，并烧入中转站。 以上的代码，看不懂是没关系的，只要我们知道相应的模块是做什么的就好了。 眼尖的小伙伴发现，上述步骤的关键，在于将 中转站 和 功能板 置于同一个 无线设置组 。使得它们彼此之间可以相互通信交流。","text_tokens":["彼此之间","可以","和","定义","只要","消息","为","一样","代码","转站","。","模块","是","相互","烧入","彼此","的","中转站","眼尖","没关","好","同一","下载","中转","小伙","什么","通信","知道","向","组","使得","之间","伙伴","了","makecode","它们","第一步","板","关键","一个","发现","在","就",":","收发","交流","上述","一步","编程","步骤","置于","micro","adapter","以上","关系","相应","设置","并","小伙伴"," ","我们","bit","无线","没关系","第一","做","看不懂","在于","将","同一个","，","功能"],"title":"第二步：为 Micro:bit中转站 编程","title_tokens":[" ","bit",":","中转","为","：","转站","编程","第二步","micro","第二","二步","中转站"]},{"location":"project_tutorial/microbit_pt/#scratch","text":"完成上述两步后，我们保持 中转站 与 计算机 的连接。并为 功能板 持续供电。 比如像这样的 打开 Adapter 在 Scratch 中启用 Micro:bit插件 ps：对这部分不熟悉的同学，请回看 入门案例：microbit","text_tokens":["为","同学","转站","。","中","ps","部分","的","中转站","不","中转","与","启用","案例","：","熟悉","对","后","这部分","入门","板","在","看","持续",":","完成","打开","计算机","比如","回","上述","scratch","请","micro","adapter","供电","这部","并","连接"," ","插件","我们","保持","bit","像","microbit","两步","这样","计算","，","算机","功能"],"title":"第三步：Scratch 环境初始化","title_tokens":[" ","初始","：","scratch","第三步","环境","初始化","第三","三步"]},{"location":"project_tutorial/microbit_pt/#scratch_1","text":"经过前三步，我们已经为两块 Micro:bit 和 Scratch 建立起连接。 现在， 我们要在 Scratch 中为 功能板 定义行为，用 A 和 B 按键来控制小猫的移动。 Scratch 代码如图所示： Micro:bit Radio项目 点击绿旗，再按下 功能板 的按键，小猫是不是如你所愿地前进和后退了呢？ 在 Scratch中 点击发送字符 “c” 的积木块，我们就可以在 功能板 上看到一个爱心了。","text_tokens":["“","可以","和","定义","a","按","代码","为","控制","。","前进","中","发送","建立","绿旗","不是","爱心","的","”","？","积木","移动","项目","：","了","行为","板","三步","用","经过","在","b","上","现在","就",":","下","中为","按键","看到","再","是不是","scratch","来","radio","如你所愿","地","micro","小猫","所愿","如图所示","呢","字符","c","起","连接","一个"," ","我们","前三步","已经","bit","要","所示","块","两块","点击","，","后退","功能"],"title":"第四步：在 Scratch 中为功能板编程","title_tokens":["第四","在"," ","中为","功能","：","scratch","编程","四步","板","第四步"]},{"location":"project_tutorial/microbit_pt/#_4","text":"在这个案例中，一共涉及了 三个对象 在沟通和交流。 Scratch，Micro:bit中转站 和 Micro:bit功能板 。 对象之间的消息传递如下图所示：","text_tokens":["和","沟通","消息","。","转站","中","对象","的","中转站","中转","案例","：","之间","如下","了","板","在","涉及",":","交流","这个","消息传递","scratch","传递","micro"," ","图","一共","bit","所示","，","三个","功能"],"title":"消息流动的过程","title_tokens":["消息","流动","的","过程"]},{"location":"project_tutorial/microbit_pt/#_5","text":"通过这个案例，我们可以看到， Adapter 可以将不同的对象连接起来，让不同对象可以彼此交互， 不仅仅是单一 Micro:bit 可以与 Scratch 进行交互，而且是整个 Micro:bit 生态 。 通过修改 功能板 的 makecode代码 ，以及 Scratch中的代码 我们可以使用 Micro:bit 更多的传感器来触发 我们想要发送的消息 。 比如人和人之间表示友好，不仅可以通过言语问候，也可以通过握手。 我们可以定义 Micro:bit 接收到特定的消息时，所作出的反应。 如果配合 Micro:bit 各种功能各异的扩展板，也许我们就可以构建出一个属于自己的计算机实体乐园了。 以上可能还不能满足一些好奇小伙伴的野心： 我能用其他对象（比如Python对象）去和 Micro:bit 生态 进行交互吗？这样我就可以让 Micro:bit 获得更多可自定义的行为了。 当然可以啦！接下来我们将用 Scratch PPT 的例子，展示 Python对象，Scratch对象 和 Micro:bit 的交流协作，去制作一个扩展多功能的独特 PPT 。","text_tokens":["消息","传感器","更","独特","不仅","让","多","而且","属于","？","进行","触发","去","接下来","板","整个","其他",":","展示","计算机","！","构建","到","scratch","人","micro","传感","各异","协作","计算","友好","问候","算机","各种","代码","反应","是","对象","彼此","的","也许","仅仅","不同","不仅仅","之间","使用","所","吗","对象连接","可","交流","时","好奇","言语","连接"," ","（","我们","将","python","以及","）","野心","可能","可以","出","不能","配合","还","表示","。","我能","乐园","接下","我","想要","小伙","与","案例","实体","握手","makecode","一个","用","自定义","也","满足","看到","来","以上","adapter","单一","修改","小伙伴","当然","一些","生态","扩展","感器","，","通过","自定","和","定义","作出","特定","如果","中","交互","多功能","例子","自己","：","伙伴","了","起来","行为","就","比如","这个","制作","发送","下来","接收","啦","bit","ppt","获得","这样","功能"],"title":"启发与想象力","title_tokens":["与","想象","启发","想象力"]},{"location":"project_tutorial/object_illustrate/","text":"对象和消息 ¶ 在开始进入具体项目前，我们先来看一看什么是对象和消息？ Scratch中的对象和消息 ¶ 在Scratch中，如果我们想要不同的 动画角色 能够互相交流，可以怎么做呢？比如 小熊快跑 项目（鼓励狂点链接查看源码） 在这个例子中，小猫向小熊大喊了一句： “Yo！小熊快跑” ，然后当小熊听到小猫的喊话后，小熊边跑边大喊： “Yo！小猫跟上啊！” ，小猫随即跟上了小熊的步伐。 现在我们来回答： 什么是消息？ 消息是不同对象之间的“对话”，对象之间通过不断“对话”彼此交流和协作 。 在Scratch中让不同动画角色相互对话的过程中， 对象 就是 动画角色 。 小猫和小熊之间的对话是通过 广播消息 和 接收消息 积木完成的。小猫和小熊分别接收对方发送的消息，然后作出相应的反应。 广播消息积木 接收消息积木 Adapter中的对象和消息 ¶ 在 Adapter 中，我们通过不同的 插件 ，去连接不同的 对象 ， 通过 Adapter 连接的 对象 就是通过 消息 进行交流和互动的。 在这里，我们可以先简单的将消息理解为 不同形式的“对话” 就好了。 对象的特性 ¶ 好奇的同学可能会问：“小熊一定要那么听话向前跑吗？” 当然可以说不啦！上面案例的小熊其实是 熊出没 里的熊二，熊二很可能会这样回答小猫： “俺太胖啦，跑不动啊 :( ”，然后就站在原地动也不动。 我们可以看到对象有一个很重要的特性： 对象可以完全不对消息作出反应，继续做自己的事 。比如：你在打游戏，妈妈叫你写作业啦，你不听，继续玩多一会 :) 我们可以利用这个特性做什么呢？别急，先卖个关子，我们在后续的教程中我们再详细讲述。 在理解了什么是对象和消息后，我们将进入第一项目教程： EIM插件 。","text_tokens":["¶","站","那么","多一会","消息","为","同学","听到","具体","让","不","继续","？","简单","进行","好","边","先","向","去","对话","后","然后","喊话","说","完成",":","打游戏","！","跑不动","(","scratch","快","分别","玩","重要","做","要","协作","互动","会","你","eim","完全","动画","反应","有","是","随即","对象","彼此","一会","的","不同","项目","之间","出没","跟上","查看","吗","小熊","对方","在","理解","里","交流","教程","妈妈","跑",")","好奇","呢","连接"," ","（","我们","这里","角色","将","）","积木","对","可能","可以","“","过程","。","啊","俺","听话","”","想要","熊二","太胖","熊出没","详细","案例","特性","关子","其实","原地","大喊","步伐","一句","当","叫","一个","形式","也","现在","互相","源码","看到","向前","怎么","来","先卖个","问","adapter","当然","就是","很","广播","第一","后续","通过","，","来看","和","动","作出","一定","如果","中","相互","不断","上面","例子","狂点","什么","：","自己","利用","了","鼓励","作出反应","链接","就","事","不动","比如","这个","能够","再","发送","别急","小猫","前","相应","接收","一看","yo","开始","插件","啦","讲述","进入","听","作业","这样","回答","游戏","写"],"title":"对象与消息","title_tokens":["对象","消息","与"]},{"location":"project_tutorial/object_illustrate/#_1","text":"在开始进入具体项目前，我们先来看一看什么是对象和消息？","text_tokens":["来看","在","开始","我们","一看","和","？","进入","消息","先","什么","项目","是","前","对象","，","具体"],"title":"对象和消息","title_tokens":["对象","消息","和"]},{"location":"project_tutorial/object_illustrate/#scratch","text":"在Scratch中，如果我们想要不同的 动画角色 能够互相交流，可以怎么做呢？比如 小熊快跑 项目（鼓励狂点链接查看源码） 在这个例子中，小猫向小熊大喊了一句： “Yo！小熊快跑” ，然后当小熊听到小猫的喊话后，小熊边跑边大喊： “Yo！小猫跟上啊！” ，小猫随即跟上了小熊的步伐。 现在我们来回答： 什么是消息？ 消息是不同对象之间的“对话”，对象之间通过不断“对话”彼此交流和协作 。 在Scratch中让不同动画角色相互对话的过程中， 对象 就是 动画角色 。 小猫和小熊之间的对话是通过 广播消息 和 接收消息 积木完成的。小猫和小熊分别接收对方发送的消息，然后作出相应的反应。 广播消息积木 接收消息积木","text_tokens":["消息","听到","让","？","边","向","对话","后","然后","喊话","完成","！","scratch","快","分别","做","协作","动画","反应","是","随即","对象","彼此","的","不同","项目","之间","跟上","查看","小熊","对方","在","交流","跑","呢"," ","（","我们","角色","）","积木","可以","“","过程","。","啊","”","想要","大喊","步伐","一句","当","现在","互相","源码","怎么","来","就是","广播","通过","，","和","作出","如果","中","相互","不断","例子","狂点","什么","：","了","鼓励","链接","比如","这个","能够","发送","小猫","相应","接收","yo","回答"],"title":"Scratch中的对象和消息","title_tokens":["和","消息","scratch","中","对象","的"]},{"location":"project_tutorial/object_illustrate/#adapter","text":"在 Adapter 中，我们通过不同的 插件 ，去连接不同的 对象 ， 通过 Adapter 连接的 对象 就是通过 消息 进行交流和互动的。 在这里，我们可以先简单的将消息理解为 不同形式的“对话” 就好了。","text_tokens":["可以","“","和","消息","为","。","中","对象","的","”","好","不同","进行","简单","先","去","对话","了","理解","在","形式","就","交流","adapter","连接"," ","插件","我们","就是","，","这里","互动","将","通过"],"title":"Adapter中的对象和消息","title_tokens":["和","消息","中","adapter","对象","的"]},{"location":"project_tutorial/object_illustrate/#_2","text":"好奇的同学可能会问：“小熊一定要那么听话向前跑吗？” 当然可以说不啦！上面案例的小熊其实是 熊出没 里的熊二，熊二很可能会这样回答小猫： “俺太胖啦，跑不动啊 :( ”，然后就站在原地动也不动。 我们可以看到对象有一个很重要的特性： 对象可以完全不对消息作出反应，继续做自己的事 。比如：你在打游戏，妈妈叫你写作业啦，你不听，继续玩多一会 :) 我们可以利用这个特性做什么呢？别急，先卖个关子，我们在后续的教程中我们再详细讲述。 在理解了什么是对象和消息后，我们将进入第一项目教程： EIM插件 。","text_tokens":["站","那么","多一会","消息","同学","不","继续","？","后","然后","说","打游戏",":","！","跑不动","(","玩","重要","做","要","会","你","eim","完全","反应","有","是","对象","一会","的","项目","出没","吗","小熊","理解","在","里","教程","妈妈","跑",")","好奇","呢"," ","我们","将","对","可能","“","可以","。","啊","俺","听话","”","熊二","太胖","熊出没","详细","案例","特性","关子","其实","原地","叫","一个","也","看到","向前","先卖个","问","当然","很","第一","后续","，","和","动","作出","一定","中","上面","什么","：","自己","利用","了","作出反应","就","事","不动","比如","这个","再","别急","小猫","插件","啦","讲述","听","进入","作业","这样","回答","游戏","写"],"title":"对象的特性","title_tokens":["对象","的","特性"]},{"location":"project_tutorial/scratch_ppt/","text":"制作一个多功能 Scratch PPT ¶ 经过前两个教程，我们已经将 Scratch 创作表达的环境延伸到了 计算机系统 以及 Micro:bit 生态 。 可别忘了， Adapter 可以 连接多个对象 ，并让 对象们 彼此沟通，由此构成一个 可理解 和 可扩展 的编程环境 。 我们作为创作主体，在这个编程环境中，自由地表达我们的想法，让想象成为可能。 现在，我们开始进入由多个对象构成的创作环境中编程。 案例思考 ¶ 我们知道， Scratch 可以制作 PPT（幻灯片） 。美中不足的是，这个 PPT 缺乏一些可扩展的功能比如： 打开计算机本地的视频 PPT 换页只能依靠点击鼠标 。。。 而在之前的案例中，我们尝试 使用 Ptyhon对象 获得了 计算机操作系统 的信息 使用 无线Micro:bit 去控制 Scratch小猫 移动。 咦！这不恰好可以用之前尝试过的案例用于改进 Scratch PPT 了吗？ 案例：改进一个 Scratch PPT ¶ 在这里我们尝试在已有的 Codelab演讲PPT (点击链接，打开项目) 上进行改进，为其添加以下功能 无线Micro:bit 作为翻页笔 可以打开任意网站视频（以 Codelab官网 为例） PPT 源码 ¶ 在 help_tool角色 中代码定义了 翻页功能 ，以及 打开本地文件 和 打开网页链接 的自定义积木。（见图注） 值得一提的是： 这里引入 Python对象 能力的方式与 Eim插件教程 不一样，用到的是 Python插件 。在 入门教程1 中有示例如何使用。 这里简单解释一下插件工作的原理，在 Python插件 代码文件中，定义了 PyHelper类 ，在该类中定义了用于打开连接的 open_url 方法 。Scratch积木块通过广播一条 代码语句 ： PyHelper.open_url(url) 给 Python对象 ，然后 Python对象 就会执行这段代码，打开相应的链接了。 提醒 PyHelper类中还有一个方法很实用: open , 这个方法以系统默认的方式打开任何东西: 诸如文本、图片、视频、软件...只要传入想打开的东西的 绝对系统路径 即可。诸如打开Chrome浏览器: PyHelper.open(\"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\") python广播积木 ps： python插件 和 eim插件 的区别需要小伙伴先具备一些Python语言知识，我们将会在插件开发手册中详细解释两者的具体区别。 另外两个角色的代码定义了一个翻页动画，我们将会在动画结束后，利用自定义积木自动弹出 Codelab 的介绍视频。 无线 Microbit 作为翻页笔 ¶ 第一步：准备两块 Micro:bit ¶ 我们按照上一篇教程： Micro:bit Raio ，在 madecode 中定义好 功能板 和 中转板 的行为。让我们可以在 Scratch中使用 功能板 的 A键 （左上方按钮） 和 B键 （右上方按钮）。 第二步：绑定翻页功能 ¶ 我们将 功能板 的 A键 绑定到 向前翻页 ， B键 绑定到 向后翻页 。 现在尝试按下 Micro:bit 功能板 的 A / B 键 ， PPT 开始翻页了！ 翻页动画打开 Codelab官网 ¶ 当翻页到 Codelab 标志时，会有一个动画介绍 Codelab 概况。 现在，我们在动画结束后，自动转到介绍 Codelab视频 中。 我们先来看看 角色introduction 的代码 在这个角色收到 show_codelab_introduction 的消息时，开始出场动画，然后 Codelab介绍信息 就显示出来了。 那么要在动画结束打开一个网页，就非常简单了，我们只需要 在 introduction角色 中自定义 open_url 积木 使用 open_url 积木 代码如下： 现在尝试一下，是否能在翻页动画结束后，自动转到 Codelab官网 呢？ 完整项目代码 启发与想象力 ¶ 增强 Scratch PPT 的例子就此完结了，不知道大家有没有发现，在 Adapter 的帮助下， 我们很容易实现不同对象之间的交互 在 Micro:bit Radio项目 的基础上，无需对Micro:Bit 做任何硬编码（即使用makecode去定义按键的具体功能）， 通过两个积木块，就可以赋予 Micro:Bit 翻页笔的功能 将 Python对象打开网址的能力， 即刻赋予给翻页动画 根据消息的沟通随时绑定对象 ，正是 Adapter 的最核心特性。 前面提到的 对象可以根据自己的需要去响应来自其他的对象的消息 在这里得以体现，如果我不想用 Micro:bit 翻页，换成眼动仪，也就是拖动两个积木块的事情。这时候， Micro:bit 就可以去控制其他东西了，在 Neverland 中可以是 窗帘的升降 或是 灯光的亮灭 或是。。。现实已经不会成为你想象力的天花板了。 项目教程结语 ¶ 到此为止，项目教程向大家展示了 Adapter 的核心概念：对象 和 消息 Adapter 的基本使用方法 Adapter 的核心特性 核心特性包括 灵活地连接各种实体硬件生态（如 Micro:bit) 拓展 Scratch 使用 计算机操作系统 的能力 不同对象之间的可以灵活地绑定 最重要的是，我们的想法可以在 Adapter 创建出的丰富可编程环境中任意表达了 接下来就是发挥大家想象力的时候了，非常欢迎大家继续跟随 Adapter文档 去探索更多编程的可能性！","text_tokens":["a","消息","笔","跟随","东西","响应","具体","继续","先","知道","向","键","后","接下来","发现","由","\\","scratch","原理","重要","给","_","要","为例","亮","此为","图注","eim","各种","1","动画","只","网页","探索","文件","一条","以下","之间","编码","经过","help","以","转","体现","演讲","任意","我们","非常","增强","来自","...","将","python","积木","点击","可能","introduction","工作","手册","语句","美中不足","操作系统","得以","用到","ptyhon","用","灵活","自","向前","作为","本地","并","二步","一些","就是","无线","广播","不足","拓展","软件","示例","\"","google","启发","网址","和","控制","如果","随时","多功能","其","例子","自己","url","之前","值得","延伸","小猫","c","文档","已经","左上方","传入","介绍","事情","那么","一样","容易","可编","创建","开发","欢迎","美中","方式","类中","将会","准备","计算机系统","非常简单",":","展示","打开","换页","能力","机系统","执行","不会","最","别忘了","浏览器","尝试","代码","即可","对象","结束","能","绑定","这时候","不同","中转","自由","赋予","按照","一篇","而","概况","在","结语","时","地","需要","为止","连接","tool"," ","翻页","对","提醒","解释","出","左上","。","咦","ps","动弹","移动","案例","实体","即刻","创作","自定义","时候","具备","很","解释一下","操作","硬","两块","恰好","任何","诸如","上方","完整","拖动","：","环境","值得一提的是","或是","比如","灯光","相应","前","浏览","下来","插件","开始","bit","program","ppt","右上","实现","¶","更","让","多","段","语言","默认","两个","板","然后","系统","计算机","概念","！","有没有","(",",","两者","一步","micro","madecode","按下","成为","会","pyhelper","不想","是","表达","的","项目","codelab","见","files","吗","是否","一下","理解","raio","可","exe","教程",")","radio","编程","呢","/","这里","完结","可以","这","灭","们","已有","包括","可编程","该类","接下","这时","硬件","与","特性","正是","如下","出来","makecode","一个","b","用于","下","升降","来","adapter","小伙伴","信息","缺乏","视频","换成","扩展","第一","neverland","绝对","通过","主体","改进","只能","右上方","中","open","利用","实用","前面","了","行为","第二","按钮","show","即","想象力","标志","application","无需","文本","功能","只要","沟通","为","如","类","、","还有","基础","不","就此","？","简单","进行","好","去","天花","第一步","区别","其他","中有","到","做","如何","想法","计算","你","算机","鼠标","另外","有","彼此","想象",".","没有","使用","收到","图片","按键","可能性","核心","（","提到","角色","幻灯","窗帘","以及","）","幻灯片","过","知识","看看","根据","第二步","我","详细","路径","小伙","添加","多个","大家","当","帮助","上","也","现在","想","源码","入门教程","发挥","自动","出场","生态","方法","天花板","引入","，","自定","定义","由此","思考","现实","chrome","到此为止","交互","显示","伙伴","官网","入门","链接","就","丰富","依靠","制作","这个","基本","网站","眼动仪","进入","microbit","构成","获得","块"],"title":"多对象交互：Scratch PPT","title_tokens":[" ","ppt","：","scratch","对象","交互","多"]},{"location":"project_tutorial/scratch_ppt/#scratch-ppt","text":"经过前两个教程，我们已经将 Scratch 创作表达的环境延伸到了 计算机系统 以及 Micro:bit 生态 。 可别忘了， Adapter 可以 连接多个对象 ，并让 对象们 彼此沟通，由此构成一个 可理解 和 可扩展 的编程环境 。 我们作为创作主体，在这个编程环境中，自由地表达我们的想法，让想象成为可能。 现在，我们开始进入由多个对象构成的创作环境中编程。","text_tokens":["可以","和","主体","们","沟通","。","由此","中","表达","对象","彼此","的","想象","让","自由","别忘了","多个","环境","了","创作","两个","一个","经过","理解","在","计算机系统","现在",":","系统","计算机","可","这个","由","教程","到","以及","scratch","地","编程","作为","延伸","micro","前","adapter","机系统","并","连接"," ","我们","开始","已经","bit","生态","扩展","进入","构成","成为","想法","将","计算","，","算机","可能"],"title":"制作一个多功能 Scratch PPT","title_tokens":[" ","多功能","ppt","制作","scratch","一个","功能"]},{"location":"project_tutorial/scratch_ppt/#_1","text":"我们知道， Scratch 可以制作 PPT（幻灯片） 。美中不足的是，这个 PPT 缺乏一些可扩展的功能比如： 打开计算机本地的视频 PPT 换页只能依靠点击鼠标 。。。 而在之前的案例中，我们尝试 使用 Ptyhon对象 获得了 计算机操作系统 的信息 使用 无线Micro:bit 去控制 Scratch小猫 移动。 咦！这不恰好可以用之前尝试过的案例用于改进 Scratch PPT 了吗？","text_tokens":["可以","过","这","尝试","改进","鼠标","恰好","控制","计算","只能","。","咦","是","中","对象","的","不","？","移动","美中不足","案例","操作系统","：","知道","美中","而","使用","去","了","ptyhon","用","吗","在",":","系统","打开","计算机","可","比如","制作","这个","换页","依靠","之前","scratch","！","本地","micro","小猫","信息"," ","（","我们","缺乏","一些","视频","无线","ppt","扩展","bit","不足","功能","获得","幻灯","操作","）","用于","点击","，","算机","幻灯片"],"title":"案例思考","title_tokens":["案例","思考"]},{"location":"project_tutorial/scratch_ppt/#scratch-ppt_1","text":"在这里我们尝试在已有的 Codelab演讲PPT (点击链接，打开项目) 上进行改进，为其添加以下功能 无线Micro:bit 作为翻页笔 可以打开任意网站视频（以 Codelab官网 为例）","text_tokens":["可以","尝试","改进","已有","为","笔","的","其","进行","添加","项目","以下","codelab","官网","链接","在","上","以","演讲",":","打开","任意","(",")","作为","micro","网站"," ","视频","我们","（","bit","无线","ppt","翻页","这里","为例","）","点击","，","功能"],"title":"案例：改进一个 Scratch PPT","title_tokens":[" ","改进","ppt","案例","：","scratch","一个"]},{"location":"project_tutorial/scratch_ppt/#ppt","text":"在 help_tool角色 中代码定义了 翻页功能 ，以及 打开本地文件 和 打开网页链接 的自定义积木。（见图注） 值得一提的是： 这里引入 Python对象 能力的方式与 Eim插件教程 不一样，用到的是 Python插件 。在 入门教程1 中有示例如何使用。 这里简单解释一下插件工作的原理，在 Python插件 代码文件中，定义了 PyHelper类 ，在该类中定义了用于打开连接的 open_url 方法 。Scratch积木块通过广播一条 代码语句 ： PyHelper.open_url(url) 给 Python对象 ，然后 Python对象 就会执行这段代码，打开相应的链接了。 提醒 PyHelper类中还有一个方法很实用: open , 这个方法以系统默认的方式打开任何东西: 诸如文本、图片、视频、软件...只要传入想打开的东西的 绝对系统路径 即可。诸如打开Chrome浏览器: PyHelper.open(\"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\") python广播积木 ps： python插件 和 eim插件 的区别需要小伙伴先具备一些Python语言知识，我们将会在插件开发手册中详细解释两者的具体区别。 另外两个角色的代码定义了一个翻页动画，我们将会在动画结束后，利用自定义积木自动弹出 Codelab 的介绍视频。","text_tokens":["只要","一样","类","、","还有","东西","具体","开发","不","简单","段","语言","先","方式","类中","默认","后","两个","然后","区别","将会",":","系统","打开","中有","(",",","能力","scratch","\\","两者","执行","原理","给","如何","_","会","pyhelper","浏览器","图注","eim","1","另外","代码","即可","动画","是","对象","结束","的","网页",".","文件","一条","使用","见","codelab","files","图片","一下","help","在","以","exe","教程",")","需要","tool","连接"," ","（","我们","翻页","这里","角色","...","python","）","以及","积木","解释","提醒","出","这","知识","。","工作","手册","该类","ps","语句","详细","路径","小伙","与","动弹","用到","自定义","一个","想","用于","自","入门教程","本地","具备","小伙伴","视频","一些","很","解释一下","广播","方法","引入","软件","绝对","示例","\"","google","通过","，","自定","和","定义","任何","诸如","中","chrome","open","：","利用","实用","伙伴","了","值得一提的是","入门","链接","就","url","这个","值得","相应","浏览","c","插件","application","program","传入","介绍","文本","块","功能"],"title":"PPT 源码","title_tokens":[" ","源码","ppt"]},{"location":"project_tutorial/scratch_ppt/#microbit","text":"","text_tokens":[],"title":"无线 Microbit 作为翻页笔","title_tokens":[" ","无线","翻页","microbit","笔","作为"]},{"location":"project_tutorial/scratch_ppt/#microbit_1","text":"我们按照上一篇教程： Micro:bit Raio ，在 madecode 中定义好 功能板 和 中转板 的行为。让我们可以在 Scratch中使用 功能板 的 A键 （左上方按钮） 和 B键 （右上方按钮）。","text_tokens":["可以","和","定义","a","左上","。","右上方","中","上方","的","让","好","中转","按照","一篇","：","使用","键","行为","板","按钮","raio","b","上","在",":","教程","scratch","micro"," ","（","我们","madecode","bit","左上方","右上","）","，","功能"],"title":"第一步：准备两块 Micro:bit","title_tokens":[" ","准备","bit",":","第一","：","一步","micro","两块","第一步"]},{"location":"project_tutorial/scratch_ppt/#_2","text":"我们将 功能板 的 A键 绑定到 向前翻页 ， B键 绑定到 向后翻页 。 现在尝试按下 Micro:bit 功能板 的 A / B 键 ， PPT 开始翻页了！","text_tokens":["a","尝试","。","的","绑定","向","键","了","后","b","板","现在",":","！","向前","到","micro"," ","/","我们","开始","bit","ppt","翻页","按下","将","，","功能"],"title":"第二步：绑定翻页功能","title_tokens":["翻页","：","第二步","二步","第二","绑定","功能"]},{"location":"project_tutorial/scratch_ppt/#codelab","text":"当翻页到 Codelab 标志时，会有一个动画介绍 Codelab 概况。 现在，我们在动画结束后，自动转到介绍 Codelab视频 中。 我们先来看看 角色introduction 的代码 在这个角色收到 show_codelab_introduction 的消息时，开始出场动画，然后 Codelab介绍信息 就显示出来了。 那么要在动画结束打开一个网页，就非常简单了，我们只需要 在 introduction角色 中自定义 open_url 积木 使用 open_url 积木 代码如下： 现在尝试一下，是否能在翻页动画结束后，自动转到 Codelab官网 呢？ 完整项目代码","text_tokens":["自定","introduction","定义","尝试","那么","代码","消息","看看","动画","只","。","有","中","结束","能","的","网页","open","官网","完整","？","简单","先","显示","项目","：","使用","如下","codelab","后","概况","收到","当","出来","了","一个","然后","自定义","一下","在","转","是否","现在","show","就","非常简单","打开","url","时","这个","到","来","呢","需要","自动","出场","信息"," ","标志","我们","视频","开始","介绍","翻页","非常","_","角色","要","会","积木","，"],"title":"翻页动画打开 Codelab官网","title_tokens":[" ","打开","翻页","动画","codelab","官网"]},{"location":"project_tutorial/scratch_ppt/#_3","text":"增强 Scratch PPT 的例子就此完结了，不知道大家有没有发现，在 Adapter 的帮助下， 我们很容易实现不同对象之间的交互 在 Micro:bit Radio项目 的基础上，无需对Micro:Bit 做任何硬编码（即使用makecode去定义按键的具体功能）， 通过两个积木块，就可以赋予 Micro:Bit 翻页笔的功能 将 Python对象打开网址的能力， 即刻赋予给翻页动画 根据消息的沟通随时绑定对象 ，正是 Adapter 的最核心特性。 前面提到的 对象可以根据自己的需要去响应来自其他的对象的消息 在这里得以体现，如果我不想用 Micro:bit 翻页，换成眼动仪，也就是拖动两个积木块的事情。这时候， Micro:bit 就可以去控制其他东西了，在 Neverland 中可以是 窗帘的升降 或是 灯光的亮灭 或是。。。现实已经不会成为你想象力的天花板了。","text_tokens":["沟通","消息","容易","笔","东西","基础","响应","具体","不","就此","知道","去","天花","两个","发现","其他",":","打开","有没有","scratch","能力","micro","给","做","不会","成为","最","亮","你","不想","动画","是","对象","的","绑定","这时候","想象","不同","没有","赋予","项目","之间","使用","编码","在","体现","按键","radio","需要","核心"," ","（","我们","提到","翻页","这里","增强","完结","来自","将","python","）","对","积木","窗帘","可以","灭","。","根据","我","这时","特性","正是","得以","大家","makecode","即刻","帮助","用","上","也","下","时候","升降","adapter","就是","很","换成","天花板","neverland","硬","通过","，","网址","定义","任何","控制","如果","中","现实","交互","随时","例子","拖动","自己","前面","了","就","或是","灯光","即","想象力","已经","bit","无需","ppt","眼动仪","实现","事情","块","功能"],"title":"启发与想象力","title_tokens":["与","想象","启发","想象力"]},{"location":"project_tutorial/scratch_ppt/#_4","text":"到此为止，项目教程向大家展示了 Adapter 的核心概念：对象 和 消息 Adapter 的基本使用方法 Adapter 的核心特性 核心特性包括 灵活地连接各种实体硬件生态（如 Micro:bit) 拓展 Scratch 使用 计算机操作系统 的能力 不同对象之间的可以灵活地绑定 最重要的是，我们的想法可以在 Adapter 创建出的丰富可编程环境中任意表达了 接下来就是发挥大家想象力的时候了，非常欢迎大家继续跟随 Adapter文档 去探索更多编程的可能性！","text_tokens":["消息","如","跟随","更","可编","创建","多","继续","欢迎","向","去","接下来","展示",":","系统","概念","计算机","！","scratch","能力","micro","重要","最","想法","计算","算机","此为","各种","是","表达","对象","的","绑定","想象","探索","不同","项目","之间","使用","在","任意","教程","地",")","编程","为止","可能性","核心","连接"," ","（","我们","非常","可能","可以","出","包括","可编程","接下","硬件","操作系统","特性","实体","大家","时候","灵活","发挥","adapter","就是","生态","方法","拓展","操作","，","和","中","到此为止","：","环境","了","丰富","文档","基本","想象力","下来","bit"],"title":"项目教程结语","title_tokens":["结语","项目","教程"]},{"location":"project_tutorial/welcome_pt/","text":"教程开篇 ¶ 在快速入门中我们介绍了两个案例： 小猫打开网页 ，我们使用Adapter将小猫和网页连接起来，让小猫打开不同的网页。 Micro：bit say: “hello” ，我们使用Adapter将micro：bit连入创作平台，让Micro：bit 说 “Hello”。 有些小伙伴可能察觉到 我们的创作环境不仅仅局限于创作平台的舞台区了，通过Adapter，我们能够进行编程的事物更多了。 Adapter为创作平台引入了Python能力，积木块可以运行 python 代码去使用计算机操作系统中的功能，比如打开网页。 我们开始触达计算机的编程世界，让我们知道打开网页的方式并不只有一种。 Adapter将Micro：bit与创作平台连接，用积木块就可以控制Micro：bit。 我们建立与硬件沟通的途径，让触手可及的实物理解我们想要表达的想法。 在接下来的教程中，我们将尝试一些有趣的案例，希望我们能够体会到，Adapter最重要的两个核心概念： 对象 和 消息 。 ps： 在进入项目教程之前，建议安装使用 完整版 Adapter","text_tokens":["¶","连入","hello","沟通","消息","为","局限","更","不仅","让","多","不","进行","知道","去","快速","方式","接下来","两个",":","说","打开","计算机","系统","概念","到","能力","micro","平台","有趣","重要","最","想法","接起","计算","完整版","算机","尝试","代码","表达","建立","对象","的","网页","仅仅","不同","实物","不仅仅","项目","局限于","使用","开篇","理解","在","触手可及","教程","say","编程","核心","连接"," ","我们","限于","将","python","积木","可能","“","可以","。","触达","接下","区","体会","ps","”","想要","硬件","运行","小伙","察觉到","察觉","与","案例","操作系统","只有","一种","创作","用","世界","事物","舞台","触手","adapter","并","小伙伴","希望","一些","引入","操作","通过","，","和","控制","有些","中","建议","完整","安装","途径","：","环境","伙伴","了","起来","入门","就","比如","整版","之前","能够","小猫","下来","连接起来","开始","bit","进入","介绍","块","功能"],"title":"教程开篇","title_tokens":["开篇","教程"]},{"location":"project_tutorial/welcome_pt/#_1","text":"在快速入门中我们介绍了两个案例： 小猫打开网页 ，我们使用Adapter将小猫和网页连接起来，让小猫打开不同的网页。 Micro：bit say: “hello” ，我们使用Adapter将micro：bit连入创作平台，让Micro：bit 说 “Hello”。 有些小伙伴可能察觉到 我们的创作环境不仅仅局限于创作平台的舞台区了，通过Adapter，我们能够进行编程的事物更多了。 Adapter为创作平台引入了Python能力，积木块可以运行 python 代码去使用计算机操作系统中的功能，比如打开网页。 我们开始触达计算机的编程世界，让我们知道打开网页的方式并不只有一种。 Adapter将Micro：bit与创作平台连接，用积木块就可以控制Micro：bit。 我们建立与硬件沟通的途径，让触手可及的实物理解我们想要表达的想法。 在接下来的教程中，我们将尝试一些有趣的案例，希望我们能够体会到，Adapter最重要的两个核心概念： 对象 和 消息 。 ps： 在进入项目教程之前，建议安装使用 完整版 Adapter","text_tokens":["连入","hello","沟通","消息","为","局限","更","不仅","让","多","不","进行","知道","去","快速","方式","接下来","两个",":","说","打开","计算机","系统","概念","到","能力","micro","平台","有趣","重要","最","想法","接起","计算","完整版","算机","尝试","代码","表达","建立","对象","的","网页","仅仅","不同","实物","不仅仅","项目","局限于","使用","理解","在","触手可及","教程","say","编程","核心","连接"," ","我们","限于","将","python","积木","可能","“","可以","。","触达","接下","区","体会","ps","”","想要","硬件","运行","小伙","察觉到","察觉","与","案例","操作系统","只有","一种","创作","用","世界","事物","舞台","触手","adapter","并","小伙伴","希望","一些","引入","操作","通过","，","和","控制","有些","中","建议","完整","安装","途径","：","环境","伙伴","了","起来","入门","就","比如","整版","之前","能够","小猫","下来","连接起来","开始","bit","进入","介绍","块","功能"],"title":"教程开篇","title_tokens":["开篇","教程"]},{"location":"scratch_extensions/home_assistant/","text":"Home Assistant ¶","text_tokens":[" ","¶","home","assistant"],"title":"Home Assistant","title_tokens":[" ","home","assistant"]},{"location":"scratch_extensions/home_assistant/#home-assistant","text":"","text_tokens":[],"title":"Home Assistant","title_tokens":[" ","home","assistant"]},{"location":"scratch_extensions/introduction/","text":"介绍 ¶ 欢迎来到 CodeLab Scratch 插件文档。","text_tokens":[" ","¶","插件","来到","介绍","欢迎","。","scratch","codelab","文档"],"title":"介绍(introduction)","title_tokens":["介绍",")","introduction","("]},{"location":"scratch_extensions/introduction/#_1","text":"欢迎来到 CodeLab Scratch 插件文档。","text_tokens":[" ","插件","来到","欢迎","。","scratch","codelab","文档"],"title":"介绍","title_tokens":["介绍"]},{"location":"user_guide/FAQ/","text":"FAQ ¶ 与官方的 Scratch Link 有什么差异？ ¶ 兼容性方面： Scratch Link 目前有以下依赖： Windows 10 version 1709+ macOS 10.13+ Bluetooth 4.0 CodeLab Adapter 对平台和操作系统没有这么高的要求，我们支持： Windows 7、Windows 8、Windows 10（32 位/64 位都支持） macOS 大多数版本 Ubuntu 树莓派 其他 linux 发行版 Scratch Link ； 在连接能力上， Scratch Link 目前只支持 BLE，CodeLab Adapter 支持任何的连接： USB WIFI Bluetooth 2.0/Bluetooth 4.0 大多数的协议（http/websocket/mqtt/ZeroMQ/socket……） ... CodeLab Adapter killer 特性之一是允许普通用户（Scratcher） 使用 Python 拓展 Scratch 的能力 。 CodeLab Adapter killer 特性之二是允许开发者和公司使用 Python 构建自定义的插件，轻松将任何硬件/AI/IOT 设备接入到 Scratch 3.0 中。 Scratch 官方计划开源 Scratch Link ，一旦它们开源，我们将在 CodeLab Adapter 通过插件实现 Scratch Link 的所有功能。 如果你目前要使用以下三种硬件，我们推荐你先使用 Scratch Link。未来我们会和官方的功能完全一样。 Wedo2.0 micro:bit EV3 Scratch Link 和 CodeLab Adapter 可以协同工作。 CodeLab Adapter 致力于提供更好的跨平台支持和开放的 插件系统 ，CodeLab Adapter 的目标是连接万物，不只是连接教育硬件。 CodeLab Adapter 与 CodeLab Scratch3 是否连接成功？ ¶ CodeLab Adapter 启动之后，可以看到 CodeLab Scratch3 指示灯显示绿色，代表连接成功。 启动 CodeLab Adapter 后，与 scratch3 无法通信怎么办？ ¶ 检查下是不是打开了科学上网的软件， 不要使用全局模式。 CodeLab Adapter 可以支持其他平台吗？ ¶ CodeLab Adapter 可以支持其他编程平台吗？而不只是在 CodeLab 的平台上使用。 可以的！ CodeLab Adapter 几乎支持任何平台，无论是 Scratch 3.0 构建的还是 blockly 构建的（如 Tynker 和 code.org）的，或者你用其他什么黑魔法构建的，都没问题！ 这是目前的接入文档： codelab-adapter 支持第三方平台 。 相关的合作条款我们正在构建中。 期待接入 CodeLab Adapter 的公司或组织，欢迎联系我们： wuwenjie718@gmail.com 来信请注明公司/组织的一些基本信息，以及你们正在做的事情 ：） Python 版本(CodeLab Adapter 3.7.0) ¶ 我们在不同操作系统打包时，使用的 Python 版本不同。 Windows：3.7 macOS：3.8 Raspbian：3.7 Ubuntu：3.7 详情可以查看WebUI菜单里的 环境 > 查看 如何使用 Python 拓展 Scratch 的能力？ ¶ Python对象的连接器：EIM 插件 hello world(Adapter Extension) Adapter Node 如何找到 Adapter 主目录 ¶ Adapter 主目录，也是 Adapter 的日志目录，这儿存放了 Adapter 运行时使用的数据。 Mac/Linux 用户的 Adapter 主目录在： ~/codelab_adapter ，如果找不到插件目录（如 Windows 用户），可以通过 CodeLab Adapter Web UI 工具栏里的 插件->打开插件目录 打开它。 如何找到插件目录 ¶ Mac/Linux 用户的插件目录在： ~/codelab_adapter/extensions ，如果找不到插件目录（如 Windows 用户），可以通过 CodeLab Adapter Web UI 工具栏里的 插件->打开扩展目录 打开它，之后找到 extensions 文件夹。 用户配置文件放在哪儿 ¶ ~/codelab_adapter/user_settings.py . Windows 用户如果找不到用户配置文件目录，可以通过 CodeLab Adapter Web UI 工具栏里的 插件->打开插件目录 先打开插件目录，用户配置文件在它的外层。 CodeLab Adapter 网址是什么 ¶ scratch-beta.codelab.club ，你不需要记住， 可以在 Web UI 中打开它。 目前都支持哪些插件 ¶ codelab_adapter_extensions 。 支持移动端吗（iPad/手机） ¶ Adapter 无法直接运行在移动端（可以运行在安卓的linux模拟器（如Termux）上） 在移动端上使用 Adapter 的方式是，将 Adapter 运行在计算机(如树莓派)上，之后通过url参数指向它: https://scratch-beta.codelab.club/?adapter_host=192.168.31.140 但由于不同平台对 https 的限制策略不同，可能需要一些处理技巧。 这是一个 例子 。 自定义存储目录 ¶ 使用环境变量 ADAPTER_HOME_PATH 来软件 home 目录， 例子： ADAPTER_HOME_PATH=/tmp/my_adapter_home ./codelab-adapter --cli 离线使用 ¶ CodeLab Adapter 支持离线使用，目前有 3 种方式使用它。 (推荐) 修改host，添加一条 127.0.0.1 codelab-adapter.codelab.club , 详情 配合 CodeLab Scratch Desktop（离线版） 使用。 将 Web UI 里的 codelab-adapter.codelab.club 替换为 127.0.0.1 ，形如 https://codelab-adapter.codelab.club:12358/?token=YOUR_TOKEN ，重新刷新页面。 推荐使用 方法 1 。 典型的应用场景是在电脑无法联网时，诸如使用 Tello 时。 查看本地环境 ¶ 你将看到: 其中包含了当前 Adapter 所处的计算机环境相关的信息。 软件意外退出 ¶ 当最后一个 client(webui) 关闭时，Adapter将退出。 所以你在刷新webui时也能导致它退出(刷新意味着某个时刻断开) 分布式使用 CodeLab Adapter ¶ @在梦里 同学 提到在树莓派里运行 Scratch 比较卡(需要WebGL)。 CodeLab Adapter 有很好的分布式支持: Adapter Node 可以与 CodeLab Adapter 分布式协同 CodeLab Adapter 可以与 Scratch 分布式协同 为了解决 树莓派里运行 Scratch 比较卡 的问题，我们 可以让Adapter 运行在树莓派里，Scratch 则运行在本机上。 首先在树莓派中运行CodeLab Adapter，复制 WebUI 的URL, 形如: https://codelab-adapter.codelab.club:12358/?token=765b3d2901ef47a0 将 codelab-adapter.codelab.club 修改为 树莓派的 IP 地址: https://192.168.21.104:12358/?token=765b3d2901ef47a0 。 现在你可以在 PC 里打开 树莓派里的 Adapter(需要安全校验) : 接着让我们在 CodeLab Scratch 里使用它, 打开: https://scratch-beta.codelab.club/?adapter_host=192.168.21.104 (adapter_host 是 adapter 所在计算机的 IP，即树莓派的 IP， 它甚至可以运行在互联网的任何设备，任何位置！包括手机！) Tips 考虑到隐私，CodeLab Neverland 自建了聊天服务器，利用的正是以上机制，CodeLab办公室里的计算机都接入 树莓派上的 Adapter。 如何在离网状态下使用CodeLab Adapter ¶ 在某些情况下，可能处于离网状态（诸如控制 tello 时，需要连接到tello网络) @RedYin 给出了一个技巧: 修改hosts 添加如下host规则: 127.0.0.1 codelab-adapter.codelab.club 以下是不同系统的hosts文件所在位置 Windows: C:\\Windows\\System32\\drivers\\etc\\hosts Android: /system/etc/hosts Mac/Linux: /etc/hosts iPhone: /etc/hosts Windows 系统常见文件 ¶ 提示 缺少Python3 ¶ 可能是你把 Adapter 当到了带有 空格 的文件夹里了。 如何获取文件路径 ¶ 以下是windows 10 下的操作: 右键目标文件 -> 属性","text_tokens":["31.140","处理","code","还是","页面","配置文件","先","树莓","webui","android","不到","协同工作","后","技巧","hosts","带有","gmail","发行","离线","联网","是不是","\\","scratch","普通","电脑","webgl","怎么办","科学","期待","时刻","killer","注明","drivers","变量","要","_","高","安卓","主目录","tynker","eim","1","linux","只","3","教育","直接","文件","一条","以下","打包","它们","致力于","工具栏","settings","里","它","这是","0.1","21.104","765b3d2901ef47a0","我们","redyin","最后","哪儿","...","python","将","path","可能","tips","工作","校验","空格","不是","官方","websocket","ubuntu","操作系统","存放","互联网","用","看到","怎么","本地","ipad","记住","-","一些","菜单","拓展","启动","软件","问题","网址","自建","和","分布式","控制","如果","互联","未来","设备","例子","ip","把","指向","club","iot","梦里","extension","之一","属性","目录","=","url","c","文档","4.0","client","刷新","大多数","文件夹","事情","找","要求","更好","处于","一样","解决","开发","目前","环境变量","1709","欢迎","机制","你们","方式","情况","形","http","跨平台","差异",":","打开","其中","7","能力","平台","3.0","但","离网","轻松","本","首先","全局","tello","…","模式","tmp","对象","能","配置","开源","不同","魔法","策略","黑魔法","在位","而","由于","容性","查看",">","在","连接器","scratcher","时","接着","需要","连接"," ","org","host","状态","接器","之后","user","对","link","。","详情","某些","件夹","三种","world","移动","当前","办公室","存储","推荐","开放","自定义","以上","派里","很","通用","web","替换","开发者","操作","数据","版","多数","合作","相关","任何","诸如","常见","mac","意外","：","环境","公司","blockly","重新","faq","无论是","插件","node","用户","bit","聊天","实现","联系","获取","¶","com","hello","同学","wifi","指示灯","让","version","关闭","正在","raspbian","系统","计算机","！","构建","(",",","usb","micro","端","上网","比较","会","之二","所有","检查","所在","接入","cli","windows","是","位置","的","允许","pc","codelab","吗","是否","考虑","@","派",")","编程","your","/","放在","三方","同工","mqtt","为了","可以","这儿","配合","包括","网络","包含","硬件","与","通信","特性","所以","beta","正是","termux","如下","协议","意味","缺少","一个","?","组织","下","发行版","模拟","兼容性","请","3.8","来","adapter","提示","则","信息","扩展","指示","0","system","neverland","scratch3","extensions","ai","找到","通过","socket","第三方","模拟器","工具","中","~","条款","分布","版本","意味着","什么","利用","公室","ble","了","第三","无法","即","外层","绿色","my","不要","复制","2.0","限制","功能","这么","文件目录","规则","或者","如","127.0","为","ev3","、","不","https","？","8","好","地址","位","某个","192.168","其他","日志","计划","bluetooth","到","卡","协同","支持","zeromq","做","致力","如何","10","只是","所在位置","计算","你","算机","完全","没","无论","种","典型","有","system32","兼容",".","wuwenjie718","当到","没有","python3","使用","一旦","服务器","几乎","；","普通用户","成功","（","提到","10.13","12358","断开","给出","）","以及","都","隐私","方面","来信","py","macos","哪些","etc","安全","应用","运行","路径","添加","目标","服务","甚至","64","当","上","也","现在","依赖","32","wedo2.0","修改","iphone","或","务器","方法","手机","布式","办公","机上","，","万物","自定","+","定义","参数","场景","退出","代表","显示","token","所处","ui","导致","环境变","大多","基本","右键","desktop","提供","3.7","home"],"title":"常见问题(FAQ)","title_tokens":["(","常见",")","faq","常见问题","问题"]},{"location":"user_guide/FAQ/#faq","text":"","text_tokens":[],"title":"FAQ","title_tokens":["faq"]},{"location":"user_guide/FAQ/#scratch-link","text":"兼容性方面： Scratch Link 目前有以下依赖： Windows 10 version 1709+ macOS 10.13+ Bluetooth 4.0 CodeLab Adapter 对平台和操作系统没有这么高的要求，我们支持： Windows 7、Windows 8、Windows 10（32 位/64 位都支持） macOS 大多数版本 Ubuntu 树莓派 其他 linux 发行版 Scratch Link ； 在连接能力上， Scratch Link 目前只支持 BLE，CodeLab Adapter 支持任何的连接： USB WIFI Bluetooth 2.0/Bluetooth 4.0 大多数的协议（http/websocket/mqtt/ZeroMQ/socket……） ... CodeLab Adapter killer 特性之一是允许普通用户（Scratcher） 使用 Python 拓展 Scratch 的能力 。 CodeLab Adapter killer 特性之二是允许开发者和公司使用 Python 构建自定义的插件，轻松将任何硬件/AI/IOT 设备接入到 Scratch 3.0 中。 Scratch 官方计划开源 Scratch Link ，一旦它们开源，我们将在 CodeLab Adapter 通过插件实现 Scratch Link 的所有功能。 如果你目前要使用以下三种硬件，我们推荐你先使用 Scratch Link。未来我们会和官方的功能完全一样。 Wedo2.0 micro:bit EV3 Scratch Link 和 CodeLab Adapter 可以协同工作。 CodeLab Adapter 致力于提供更好的跨平台支持和开放的 插件系统 ，CodeLab Adapter 的目标是连接万物，不只是连接教育硬件。","text_tokens":["这么","一样","wifi","ev3","、","开发","不","version","8","目前","1709","先","树莓","协同工作","位","http","跨平台","其他",":","系统","7","发行","构建","bluetooth","计划","到","scratch","能力","普通","usb","micro","协同","支持","平台","3.0","zeromq","killer","致力","10","轻松","要","只是","高","会","之二","所有","你","接入","完全","linux","windows","只","…","有","是","教育","兼容","的","开源","允许","没有","以下","使用","一旦","codelab","它们","容性","致力于","在","；","scratcher","派","普通用户","连接"," ","（","我们","10.13","/","...","python","将","）","对","同工","mqtt","link","都","方面","可以","。","工作","macos","websocket","官方","ubuntu","硬件","三种","目标","操作系统","特性","64","协议","推荐","开放","自定义","上","依赖","32","wedo2.0","发行版","兼容性","adapter","通用","拓展","开发者","操作","ai","，","通过","万物","多数","自定","socket","+","和","定义","任何","如果","中","未来","设备","版本","：","ble","iot","之一","公司","大多","插件","4.0","用户","bit","大多数","实现","提供","2.0","要求","更好","功能"],"title":"与官方的 Scratch Link 有什么差异？","title_tokens":[" ","？","link","差异","与","什么","scratch","有","的","官方"]},{"location":"user_guide/FAQ/#codelab-adapter-codelab-scratch3","text":"CodeLab Adapter 启动之后，可以看到 CodeLab Scratch3 指示灯显示绿色，代表连接成功。","text_tokens":[" ","可以","代表","看到","之后","显示","启动","指示","连接","。","scratch3","codelab","adapter","指示灯","成功","，","绿色"],"title":"CodeLab Adapter 与 CodeLab Scratch3 是否连接成功？","title_tokens":[" ","？","与","scratch3","codelab","adapter","成功","连接","是否"]},{"location":"user_guide/FAQ/#codelab-adapter-scratch3","text":"检查下是不是打开了科学上网的软件， 不要使用全局模式。","text_tokens":["上网"," ","不要","下","打开","科学","全局","的","是不是","模式","。","软件","使用","了","不是","检查","，"],"title":"启动 CodeLab Adapter 后，与 scratch3 无法通信怎么办？","title_tokens":[" ","？","怎么办","与","启动","无法","通信","怎么","scratch3","codelab","后","，","adapter"]},{"location":"user_guide/FAQ/#codelab-adapter","text":"CodeLab Adapter 可以支持其他编程平台吗？而不只是在 CodeLab 的平台上使用。 可以的！ CodeLab Adapter 几乎支持任何平台，无论是 Scratch 3.0 构建的还是 blockly 构建的（如 Tynker 和 code.org）的，或者你用其他什么黑魔法构建的，都没问题！ 这是目前的接入文档： codelab-adapter 支持第三方平台 。 相关的合作条款我们正在构建中。 期待接入 CodeLab Adapter 的公司或组织，欢迎联系我们： wuwenjie718@gmail.com 来信请注明公司/组织的一些基本信息，以及你们正在做的事情 ：）","text_tokens":["com","或者","如","code","还是","不","？","目前","欢迎","正在","你们","其他","gmail","！","构建","scratch","支持","平台","3.0","期待","做","注明","只是","你","tynker","接入","没","无论","的",".","wuwenjie718","魔法","黑魔法","而","使用","codelab","吗","在","几乎","@","这是","编程"," ","（","org","我们","/","三方","）","以及","都","可以","来信","。","用","上","组织","请","adapter","信息","-","一些","或","，","问题","合作","相关","和","第三方","任何","中","条款","什么","：","第三","公司","blockly","无论是","文档","基本","事情","联系"],"title":"CodeLab Adapter 可以支持其他平台吗？","title_tokens":[" ","可以","支持","平台","其他","？","codelab","adapter","吗"]},{"location":"user_guide/FAQ/#python-codelab-adapter-370","text":"我们在不同操作系统打包时，使用的 Python 版本不同。 Windows：3.7 macOS：3.8 Raspbian：3.7 Ubuntu：3.7 详情可以查看WebUI菜单里的 环境 > 查看","text_tokens":["可以","windows","。","详情","macos","的","ubuntu","不同","版本","操作系统","打包","：","raspbian","webui","使用","环境",">","查看","在","系统","里","时","3.8"," ","我们","菜单","3.7","操作","python","，"],"title":"Python 版本(CodeLab Adapter 3.7.0)","title_tokens":[" ","版本","0","(","3.7",")","codelab","python",".","adapter"]},{"location":"user_guide/FAQ/#python-scratch","text":"Python对象的连接器：EIM 插件 hello world(Adapter Extension) Adapter Node","text_tokens":["eim"," ","插件","连接器","node","hello","world","接器","：","(",")","extension","python","adapter","对象","的","连接"],"title":"如何使用 Python 拓展 Scratch 的能力？","title_tokens":[" ","？","拓展","如何","scratch","使用","能力","python","的"]},{"location":"user_guide/FAQ/#adapter","text":"Adapter 主目录，也是 Adapter 的日志目录，这儿存放了 Adapter 运行时使用的数据。 Mac/Linux 用户的 Adapter 主目录在： ~/codelab_adapter ，如果找不到插件目录（如 Windows 用户），可以通过 CodeLab Adapter Web UI 工具栏里的 插件->打开插件目录 打开它。","text_tokens":["可以","这儿","linux","如","windows","。","如果","工具","是","~","通过","的","mac","运行","：","使用","不到","存放","了","codelab",">","也","在","目录","工具栏","日志","ui","打开","里","它","时","adapter"," ","/","插件","找","用户","（","-","web","_","数据","）","，","主目录"],"title":"如何找到 Adapter 主目录","title_tokens":[" ","目录","如何","adapter","找到","主目录"]},{"location":"user_guide/FAQ/#_1","text":"Mac/Linux 用户的插件目录在： ~/codelab_adapter/extensions ，如果找不到插件目录（如 Windows 用户），可以通过 CodeLab Adapter Web UI 工具栏里的 插件->打开扩展目录 打开它，之后找到 extensions 文件夹。","text_tokens":["可以","linux","如","windows","如果","。","工具","~","通过","的","mac","文件","件夹","：","不到","codelab",">","在","目录","工具栏","ui","打开","里","它","adapter"," ","/","插件","（","用户","-","web","扩展","之后","文件夹","_","extensions","找","）","找到","，"],"title":"如何找到插件目录","title_tokens":["插件","找到","目录","如何"]},{"location":"user_guide/FAQ/#_2","text":"~/codelab_adapter/user_settings.py . Windows 用户如果找不到用户配置文件目录，可以通过 CodeLab Adapter Web UI 工具栏里的 插件->打开插件目录 先打开插件目录，用户配置文件在它的外层。","text_tokens":["文件目录","可以","py","windows","如果","。","工具","~","通过",".","的","配置","文件","配置文件","先","不到","codelab",">","在","目录","settings","工具栏","ui","打开","里","它","adapter","外层"," ","/","插件","-","用户","web","user","_","找","，"],"title":"用户配置文件放在哪儿","title_tokens":["放在","用户","配置文件","哪儿","配置","文件"]},{"location":"user_guide/FAQ/#codelab-adapter_1","text":"scratch-beta.codelab.club ，你不需要记住， 可以在 Web UI 中打开它。","text_tokens":["可以","。","中",".","不","club","beta","codelab","在","ui","打开","它","scratch","需要","记住","-"," ","web","，","你"],"title":"CodeLab Adapter 网址是什么","title_tokens":[" ","什么","是","codelab","adapter","网址"]},{"location":"user_guide/FAQ/#_3","text":"codelab_adapter_extensions 。","text_tokens":[" ","。","_","extensions","codelab","adapter"],"title":"目前都支持哪些插件","title_tokens":["插件","支持","目前","哪些","都"]},{"location":"user_guide/FAQ/#ipad","text":"Adapter 无法直接运行在移动端（可以运行在安卓的linux模拟器（如Termux）上） 在移动端上使用 Adapter 的方式是，将 Adapter 运行在计算机(如树莓派)上，之后通过url参数指向它: https://scratch-beta.codelab.club/?adapter_host=192.168.31.140 但由于不同平台对 https 的限制策略不同，可能需要一些处理技巧。 这是一个 例子 。","text_tokens":["可以","参数","linux","31.140","模拟器","如","计算","。","是","处理","直接","通过","的",".","https","不同","例子","运行","移动","策略","树莓","指向","对","club","使用","方式","beta","termux","codelab","由于","一个","?","在","上","192.168","技巧","=",":","计算机","url","它","模拟","无法","派","(","这是",")","scratch","adapter","需要","端"," ","（","/","-","host","平台","一些","但","之后","_","安卓","将","）","限制","，","算机","可能"],"title":"支持移动端吗（iPad/手机）","title_tokens":["（","支持","/","移动","手机","）","ipad","吗","端"]},{"location":"user_guide/FAQ/#_4","text":"使用环境变量 ADAPTER_HOME_PATH 来软件 home 目录， 例子： ADAPTER_HOME_PATH=/tmp/my_adapter_home ./codelab-adapter --cli","text_tokens":["cli","tmp",".","例子","环境变量","：","环境","使用","codelab","目录","=","环境变","来","adapter"," ","/","-","my","变量","_","软件","home","path","，"],"title":"自定义存储目录","title_tokens":["自定","目录","定义","存储","自定义"]},{"location":"user_guide/FAQ/#_5","text":"CodeLab Adapter 支持离线使用，目前有 3 种方式使用它。 (推荐) 修改host，添加一条 127.0.0.1 codelab-adapter.codelab.club , 详情 配合 CodeLab Scratch Desktop（离线版） 使用。 将 Web UI 里的 codelab-adapter.codelab.club 替换为 127.0.0.1 ，形如 https://codelab-adapter.codelab.club:12358/?token=YOUR_TOKEN ，重新刷新页面。 推荐使用 方法 1 。 典型的应用场景是在电脑无法联网时，诸如使用 Tello 时。","text_tokens":["1","配合","场景","种","版","127.0","为","如","典型","。","详情","诸如","有","3","是","tello","页面",".","的","https","应用","一条","目前","添加","club","使用","方式","token","codelab","推荐","形","?","在","重新","=","ui",":","它","里","离线","无法","联网","(",",",")","0.1","scratch","时","your","adapter","电脑","修改"," ","支持","-","（","host","/","刷新","web","替换","desktop","方法","_","12358","将","）","，"],"title":"离线使用","title_tokens":["使用","离线"]},{"location":"user_guide/FAQ/#_6","text":"你将看到: 其中包含了当前 Adapter 所处的计算机环境相关的信息。","text_tokens":["相关","。","的","包含","当前","环境","了","所处",":","看到","其中","计算机","adapter","信息"," ","将","计算","你","算机"],"title":"查看本地环境","title_tokens":["环境","查看","本地"]},{"location":"user_guide/FAQ/#_7","text":"当最后一个 client(webui) 关闭时，Adapter将退出。 所以你在刷新webui时也能导致它退出(刷新意味着某个时刻断开)","text_tokens":["。","能","退出","关闭","意味着","webui","所以","某个","意味","当","一个","在","也","导致","它","时","(",")","adapter"," ","client","刷新","，","时刻","最后","断开","将","你"],"title":"软件意外退出","title_tokens":["软件","意外","退出"]},{"location":"user_guide/FAQ/#codelab-adapter_2","text":"@在梦里 同学 提到在树莓派里运行 Scratch 比较卡(需要WebGL)。 CodeLab Adapter 有很好的分布式支持: Adapter Node 可以与 CodeLab Adapter 分布式协同 CodeLab Adapter 可以与 Scratch 分布式协同 为了解决 树莓派里运行 Scratch 比较卡 的问题，我们 可以让Adapter 运行在树莓派里，Scratch 则运行在本机上。 首先在树莓派中运行CodeLab Adapter，复制 WebUI 的URL, 形如: https://codelab-adapter.codelab.club:12358/?token=765b3d2901ef47a0 将 codelab-adapter.codelab.club 修改为 树莓派的 IP 地址: https://192.168.21.104:12358/?token=765b3d2901ef47a0 。 现在你可以在 PC 里打开 树莓派里的 Adapter(需要安全校验) : 接着让我们在 CodeLab Scratch 里使用它, 打开: https://scratch-beta.codelab.club/?adapter_host=192.168.21.104 (adapter_host 是 adapter 所在计算机的 IP，即树莓派的 IP， 它甚至可以运行在互联网的任何设备，任何位置！包括手机！) Tips 考虑到隐私，CodeLab Neverland 自建了聊天服务器，利用的正是以上机制，CodeLab办公室里的计算机都接入 树莓派上的 Adapter。","text_tokens":["同学","解决","如","为","让","https","好","树莓","webui","机制","地址","形","192.168",":","打开","计算机","！","联网","(",",","scratch","到","卡","协同","支持","webgl","比较","_","本","计算","你","所在","首先","算机","接入","有","是","位置","的",".","使用","pc","codelab","在","考虑","服务器","它","里","@","派","接着",")","需要","21.104","765b3d2901ef47a0"," ","提到","我们","/","host","12358","将","都","为了","可以","tips","隐私","包括","。","校验","安全","运行","与","服务","办公室","甚至","正是","beta","互联网","?","上","现在","以上","adapter","则","修改","-","派里","很","务器","手机","布式","办公","机上","neverland","，","问题","自建","分布式","任何","中","互联","设备","ip","分布","利用","公室","club","梦里","token","了","=","url","即","node","复制","聊天"],"title":"分布式使用 CodeLab Adapter","title_tokens":[" ","分布式","分布","布式","使用","codelab","adapter"]},{"location":"user_guide/FAQ/#codelab-adapter_3","text":"在某些情况下，可能处于离网状态（诸如控制 tello 时，需要连接到tello网络) @RedYin 给出了一个技巧: 修改hosts 添加如下host规则: 127.0.0.1 codelab-adapter.codelab.club 以下是不同系统的hosts文件所在位置 Windows: C:\\Windows\\System32\\drivers\\etc\\hosts Android: /system/etc/hosts Mac/Linux: /etc/hosts iPhone: /etc/hosts","text_tokens":["规则","linux","127.0","控制","windows","tello","诸如","是","网络","位置","某些","所在","system32","etc",".","的","mac","文件","不同","添加","以下","在位","club","android","如下","情况","了","codelab","一个","在","技巧","hosts",":","下","系统","时","@","到","\\",")","0.1","adapter","需要","c","连接","修改","（"," ","-","/","host","iphone","离网","状态","redyin","drivers","所在位置","system","给出","，","处于","可能"],"title":"如何在离网状态下使用CodeLab Adapter","title_tokens":[" ","在","下","离网","状态","如何","使用","codelab","adapter"]},{"location":"user_guide/FAQ/#windows","text":"","text_tokens":[],"title":"Windows 系统常见文件","title_tokens":[" ","系统","windows","常见","文件"]},{"location":"user_guide/FAQ/#python3","text":"可能是你把 Adapter 当到了带有 空格 的文件夹里了。","text_tokens":[" ","空格","文件","件夹","带有","把","当到","里","文件夹","。","是","了","adapter","的","你","可能"],"title":"提示缺少Python3","title_tokens":["提示","缺少","python3"]},{"location":"user_guide/FAQ/#_8","text":"以下是windows 10 下的操作: 右键目标文件 -> 属性","text_tokens":[" ","-",":","下","属性","目标","右键","windows","以下","10","操作","是","的",">","文件"],"title":"如何获取文件路径","title_tokens":["文件","如何","路径","获取"]},{"location":"user_guide/Linda/","text":"Linda ¶ 用于协调不同的程序，使它们进行协作。 提醒 在 Adapter >= 4.0 中可用。 介绍 ¶ CodeLab Adapter 4.0 内置了 Linda server（Tuple Space），目前我们提供了以下客户端（持续增加中...）与 Linda Tuple Space 交互: Python Client Scratch Client REST API cli (命令行客户端) JavaScript Client(开发者) mush-lang Linda 最有趣的一个地方是，所有 Tuple Space 参与者（跨语言、跨系统、跨网络）都能够互操作，语义由参与者自己\"协调\", 所以 Alan Kay 将 Linda 称为\"协调语言\"。 基本操作(operate) ¶ 核心操作 ¶ out: 生成一个元组(tuple) 到 元组空间（tuple space） in: 在tuple space中匹配元组，如果匹配到则消耗它, 如果未匹配则一直等待 inp: in的非阻塞版本。 如果匹配到则消耗它, 如果未匹配则返回空元组 rd: read only, 在tuple space中匹配元组，如果匹配到则返回它(不移除), 如果未匹配则一直等待 rdp: 非阻塞版本的 rd eval: 暂不考虑实现 辅助操作 ¶ 不在 linda 的原始论文中，是我自己的扩展 dump: 获取元组空间所有元组 status: 获取元组空间状态 reboot: 重置元组空间 Python Client ¶ 安装依赖: pip install https://github.com/CodeLabClub/codelab_adapter_client_python/archive/master.zip 提供同步和异步两种基类: AdapterNode AdapterNodeAio AdapterNode ¶ from codelab_adapter_client import AdapterNode class MyNode ( AdapterNode ): NODE_ID = \"linda/test\" def __init__ ( self ): super () . __init__ () node = MyNode () node . receive_loop_as_thread () time . sleep ( 0.1 ) 创建Adapter Node之后，就可以通过node使用linda了。 res = node . linda_reboot () # reboot linda server, clean tuple space assert res == [] res = node . linda_out ([ 1 , 2 , 3 ]) # out assert res == [ 1 , 2 , 3 ] res = node . linda_out ([ 1 , 2 , 4 ]) # out res = node . linda_dump () assert res == [[ 1 , 2 , 3 ], [ 1 , 2 , 4 ]] res = node . linda_rd ([ 1 , 2 , 3 ]) # read and blocking assert res == [ 1 , 2 , 3 ] res = node . linda_rdp ([ 1 , 2 , \"*\" ]) # read but non-blocking assert res == [ 1 , 2 , 3 ] # 先入先出 res = node . linda_in ([ 1 , 2 , 3 ]) # read then remove (blocking) assert res == [ 1 , 2 , 3 ] AdapterNodeAio(异步) ¶ 同步和异步 API 保持一致 import asyncio from codelab_adapter_client import AdapterNodeAio class MyNode ( AdapterNodeAio ): NODE_ID = \"linda/test\" def __init__ ( self ): super () . __init__ () # 以下代码在 jupyter 中运行，如果你想在python脚本中使用，请考虑异步代码的生命周期，参考: https://github.com/CodeLabClub/codelab_adapter_client_python/blob/master/tests/test_linda_client.py#L26 task = asyncio . create_task ( node . receive_loop ()) await asyncio . sleep ( 0.1 ) # !! 等待zmq通信管道建立完成 _tuple = [ \"test_linda\" ] # reboot res = await node . linda_reboot () assert res == [] # out _tuple = [ \"hello\" , \"world\" ] await node . linda_out ( _tuple ) # rdp res = await node . linda_rdp ( _tuple ) assert res == _tuple # inp res = await node . linda_inp ( _tuple ) assert res == _tuple res = await node . linda_dump () assert res == [] 更多用法参考测试文件: test_linda_client.py Scratch Client ¶ REST API ¶ 使用 httpie 作为客户端。 := 表示后边跟的是 json 数据 out ¶ http post https://codelab-adapter.codelab.club:12358/api/linda operate=out tuple:='[\"hello\", \"linda\"]' in ¶ http post https://codelab-adapter.codelab.club:12358/api/linda operate=in tuple:='[\"hello\", \"linda\"]' dump ¶ http post https://codelab-adapter.codelab.club:12358/api/linda operate=dump 其他原语类似 cli (命令行客户端) ¶ pip install https://github.com/CodeLabClub/codelab_adapter_client_python/archive/master.zip # pip install codelab_adapter_client --upgrade # 暂未更新到 pypi codelab-linda --help codelab-linda out --help # reboot codelab-linda reboot # dump codelab-linda dump # out codelab-linda out --data '[1, \"hello\"]' # rd codelab-linda rd --data '[1, \"hello\"]' codelab-linda rd --data '[1, \"*\"]' # rdp codelab-linda rd --data '[1, 2, 3]' # [] # in codelab-linda rd --data '[1, \"*\"]' JavaScript Client ¶ 方便开发者，将 Linda 引入自己的web项目。 CodeLab 目前使用 JavaScript Client，将 Linda 带入 CodeLab Scratch、CodeLab Adapter WebUI 和 Lively。 import AdapterBaseClient from \"./codelab_adapter_base.js\" ; // https://github.com/CodeLabClub/scratch3_eim/blob/v3/codelab_adapter_base.js let NODE_ID = \"linda/js/client\" ; let HELP_URL = \"https://adapter.codelab.club/user_guide/Linda/\" ; let runtime = null ; let adapter_client = new AdapterBaseClient ( NODE_ID , HELP_URL , runtime ); await adapter_client . linda_out ([ 1 , 2 , 3 ]). then (( data )=>{ console . log ( \"linda\" , data ); return data }) tuple = await adapter_client . linda_in ([ \"hi\" , \"lively\" , \"*\" ]). then (( data )=>{ console . log ( \"linda\" , data ); return data }) tuple = await adapter_client . linda_in ([ \"hi\" , \"python\" , \"from Lively\" ]). then (( data )=>{ console . log ( \"linda\" , data ); return data }) tuple = await adapter_client . linda_in ([ \"hello\" , \"lively\" , \"*\" ]). then (( data )=>{ console . log ( \"linda\" , data ); return data }) await adapter_client . linda_in ([ 1 , 2 , 5 ], 1000 ). then (( data )=>{ console . log ( \"linda\" , data ); return data }) //超时 mush-lang ¶ LISP 是一种构建材料 -- Alan Kay 为了更好地探索 Linda 的可能性，我们围绕 Linda 的基本原语，构建了一门简单的语言 -- mush-lang 。 mush-lang 采用 LISP 风格的语法，可以视为 LISP 的一门玩具方言。 LISP 因其同构性(内外表示一致)，可能是所有语言中最简单的。 mush-lang 目前在 Python 中实现。 Demo ¶ 多个 Scratch 角色 的 实时同步 ¶ 在 Python 的例子中，我们甚至在Scratch里构建了 Server！ 两个Scratch角色同步的代码如下 linda-demo1 linda-demo2 python 与 Scratch 同步的代码如下: linda-demo1 Python核心部分代码为: node . linda_out ([ \"request\" , \"loudness\" , \"xxx\" ]) node . linda_in ([ \"response\" , \"loudness\" , \"*\" ]) Jupyter 与 Scratch 的互操作 ¶ 跨语言对象之间的互操作 用到了 Jupyter notebook 里的 ipywidgets. # 请使用 jupyter notebook，而不是jupyterlab from ipywidgets import interact , interactive , fixed , interact_manual from codelab_adapter_client import AdapterNode import time class MyNode ( AdapterNode ): NODE_ID = \"linda/jupyter\" def __init__ ( self ): super () . __init__ () node = MyNode () node . receive_loop_as_thread () @interact ( show = True , x = 100 , size = 100 ) def f ( show , x , size ): node . linda_out ([ \" %% x\" , x ], wait = False ) # f函数是非阻塞的回调函数，使用wait=False参数，使node.linda_out使非阻塞的，此时相当于流，记得使用 message tuple（见下文） node . linda_out ([ \" %% show\" , show ], wait = False ) node . linda_out ([ \" %% size\" , size ], wait = False ) return show , x , size 进阶 ¶ 消息风格 ¶ linda 的基本观点是数据不停生灭（由用户显式操控）。 如果我们想在 Linda 中实现 \"消息/流\" 的模式，可能会遇到tuple堆积（生产者太快）的问题（这是很严重的问题，似乎也不是正确使用linda的方式） 为了尽可能少地破坏概念完整性，我们引入了一种特殊的tuple来支持\"消息/流\"模式。 我们定义了一种叫做 message tuple 的 tuple，它像消息一样，每次只能流的瞬时截面: 一个数据 。 以下是几个message tuple的例子: (\"%%x\", 1) (\"%%y\", 50) (\"%%z\", \"hello\", \"world\") 在语法层面，message tuple只是普通的tuple，唯一区别是第一个元素需要是如下风格字符串， \"%%x\", x可以是任意值，可以把它看作message tuple的id，不同id的message tuple被视为不同tuple，支持tuple的所有操作符。 以下是一个例子: message_tuple demo 视角 站在变量的视角，你可以将其看作全局变量 FAQ ¶ 如何看到 Linda Tuple Space ¶ Adapter >=4.1.0 在 Scratch 里有些 in/rd 积木一直阻塞 ¶ 简单而言，按照以下顺序运行程序: 确保在linda in/rd 积木运行之前，先运行linda reboot 之后在启动Scratch程序 以下是原因分析(可以不看): 这个Linda背后的实现有关，Adapter Linda 目前是C/S架构。Scratch中的 in/rd 积木实际上 promise。 reboot针对的是linda server的操作。 如果程序在 in/rd 的时候，被reboot，则客户端(Scratch)的 in/rd 对应的promise永远不会被解决。 linda reboot 一下 速度 ¶ <!-- ZMQ_LOOP_TIME 以下是一个在scratch里进行速率测试的demo linda-rate → 默认情况下，30帧/s。 在Python客户端，通过修改参数，可以提高到300-600帧/s。 class MyNode ( AdapterNode ): NODE_ID = \"linda/test\" def __init__ ( self ): super () . __init__ ( recv_mode = \"block\" , bucket_fill_rate = 1000 , bucket_token = 1000 ) Linda 与 EIM ¶ Linda 与 EIM 将长期共存，一个 Adapter Node，即是Linda client，也是EIM client，它们各有所擅。长期来看，我们更偏好 Linda。 参考 ¶ 在 CodeLab Adapter 中实现 Linda 并发模型 Linda: 比 Actor 更好的并发模型 [译]Alan Kay 看待'对象'的几次观点转变 建立在异步消息之上的同步指令: 分别在 JavaScript、Python、Squeak 上实现 [译]Smalltalk 背后的设计原则","text_tokens":["参考","消息","id","先","init","webui","smalltalk","用法","[","in","增加","严重","由","同步","有关","scratch","普通","太快","分别","操作符","有趣","}","流","adapternodeaio","变量","_","fixed","遇到","eim","生命","1","*","zmq","3","bucket","out","命令行","null","探索","文件","破坏","as","lisp","demo2","值","以下","之间","tuple","它们","help","围绕","kay","超时","任意","它","里","两种","0.1","生成","!","未","暂","我们","视角","%%","针对","指令","...","python","将","显式","积木","mode","可能","更新","非","表示","'","并发","不是","from","用到","rd","l26","看到","作为","确保",";","-","js","保持","像","import","跟","启动","空间","\"","问题","几个","长期","和","如果","httpie","速度","元组","阻塞","]","模型","操控","安装","其","例子","记得","把","自己","club","性","风格","eval","=","url","之前","upgrade","方便","c","loop","4.0","client","提高","res","跨","介绍","lively","promise","空","有所","每次","space","参与者","更好","站","install","一样","解决","元素","之上","脚本","创建","开发","目前","类似","方式","xxx","lang","情况","相当于","http","带入",":","false","response","blob","方言","可用","语法","不会","最","同构","rate","log","等待","全局","代码","模式","对象","下文","一门","不同","codelabclub","基本操作","按照","server","而",">","先出","在","一直","不看","持续","函数","地","receive","需要","post"," ","当于","状态","之后","user","地方","提醒","观点","jupyter","inp","。","<","特殊","interact","loudness","共存","def","world","返回","辅助","时候","wait","recv","唯一","分析","实际","很","web","生产","开发者","sleep","操作","数据","100","time","生灭","thread","重置","block","message","y","完整","50","but","程序","先入","api","玩具","pip","and","only","faq","squeak","原则","let","node","生产者","用户","dump","实现","30","non","获取","new","¶","com","hello","600","更","转变","多","尽可能少","语言","adapterbaseclient","默认","实时","两个","产者","系统","pypi","正确","！","assert","构建","概念","(",",","await","背后","而言","因","内外","remove","notebook","archive","rdp","比","会","所有","tests","300","叫做","完整性","cli","是","的","架构","移除","项目","回调","使非","codelab","材料","一下","考虑","@","似乎","帧",")","blocking","/","为了","可以","这","称为","网络","return","ipywidgets","与","参与","通信","永远","一种","所以","如下","guide","一个","用于","下","原因","4.1","请","来","adapter","则","瞬时","译","扩展","2","第一","create","0","scratch3","内置","通过","runtime","来看","见下文","只能","是非","有些","中","消耗","hi","true","版本","速率","暂未","了","demo1","顺序","show","即","不停","进阶","{","客户端","jupyterlab","使","z","→","互操作","为","reboot","协调","、","json","不","https","简单","进行","擅","github","区别","其他","完成","设计","到","原始","字符","javascript","f","size","支持","语义","then","demo","如何","只是","协作","看待","你","保持一致","采用","后边","alan","建立","部分","相当",".","__","adapternode","一致","周期","4","使用","#","原语","堆积","operate","clean","尽可能","论文","可能性","核心","rest","生命周期","（","actor","self","12358","角色","各","）","长期共存","都","基类","linda","层面","py","s","read","对应","super","asyncio","我","x","被","运行","task","几次","mynode","多个","甚至","尽可","匹配","test","interactive","也","上","想","依赖","修改","console","base","引入","zip","master","，","1000","manual","定义","测试","参数","字符串","request","第一个","v3","管道","fill","交互","实际上","token","mush","就","此时","data","这个","能够","截面","5","异步","基本","视为","看作","status","提供","偏好","命令","class","全局变量","客户"],"title":"Linda","title_tokens":["linda"]},{"location":"user_guide/Linda/#linda","text":"用于协调不同的程序，使它们进行协作。 提醒 在 Adapter >= 4.0 中可用。","text_tokens":["协调","。","中","的","不同","进行","程序","它们",">","在","=","用于","adapter"," ","4.0","可用","协作","使","提醒","，"],"title":"Linda","title_tokens":["linda"]},{"location":"user_guide/Linda/#_1","text":"CodeLab Adapter 4.0 内置了 Linda server（Tuple Space），目前我们提供了以下客户端（持续增加中...）与 Linda Tuple Space 交互: Python Client Scratch Client REST API cli (命令行客户端) JavaScript Client(开发者) mush-lang Linda 最有趣的一个地方是，所有 Tuple Space 参与者（跨语言、跨系统、跨网络）都能够互操作，语义由参与者自己\"协调\", 所以 Alan Kay 将 Linda 称为\"协调语言\"。","text_tokens":["称为","linda","cli","互操作","alan","协调","。","、","中","是","网络","的","命令行","交互","开发","语言","目前","与","参与","以下","server","自己","所以","api","tuple","codelab","了","lang","参与者","一个","mush","kay","持续",":","系统","增加","由","能够","(",",","scratch",")","javascript","adapter","rest"," ","（","4.0","我们","客户端","client","-","有趣","跨","语义","\"","地方","提供","开发者","操作","最","命令","...","内置","space","）","python","将","所有","，","都","客户"],"title":"介绍","title_tokens":["介绍"]},{"location":"user_guide/Linda/#operate","text":"","text_tokens":[],"title":"基本操作(operate)","title_tokens":["基本操作","(","操作","operate",")","基本"]},{"location":"user_guide/Linda/#_2","text":"out: 生成一个元组(tuple) 到 元组空间（tuple space） in: 在tuple space中匹配元组，如果匹配到则消耗它, 如果未匹配则一直等待 inp: in的非阻塞版本。 如果匹配到则消耗它, 如果未匹配则返回空元组 rd: read only, 在tuple space中匹配元组，如果匹配到则返回它(不移除), 如果未匹配则一直等待 rdp: 非阻塞版本的 rd eval: 暂不考虑实现","text_tokens":["等待","非","read","inp","如果","。","中","消耗","元组","阻塞","out","的","不","版本","移除","匹配","tuple","返回","in","一个","rd","eval","在","一直","考虑",":","only","它","(","到",")",",","生成","未","则","暂"," ","（","rdp","空","实现","space","空间","）","，"],"title":"核心操作","title_tokens":["操作","核心"]},{"location":"user_guide/Linda/#_3","text":"不在 linda 的原始论文中，是我自己的扩展 dump: 获取元组空间所有元组 status: 获取元组空间状态 reboot: 重置元组空间","text_tokens":["linda","reboot","重置","中","是","元组","我","的","空间","不","自己","在",":","原始","论文"," ","dump","扩展","status","状态","获取","所有","，"],"title":"辅助操作","title_tokens":["操作","辅助"]},{"location":"user_guide/Linda/#python-client","text":"安装依赖: pip install https://github.com/CodeLabClub/codelab_adapter_client_python/archive/master.zip 提供同步和异步两种基类: AdapterNode AdapterNodeAio","text_tokens":["com","和","install",".","adapternode","https","安装","codelabclub","github","codelab","pip",":","依赖","同步","两种","adapter","异步"," ","/","client","archive","adapternodeaio","提供","_","zip","python","master","基类"],"title":"Python Client","title_tokens":[" ","client","python"]},{"location":"user_guide/Linda/#adapternode","text":"from codelab_adapter_client import AdapterNode class MyNode ( AdapterNode ): NODE_ID = \"linda/test\" def __init__ ( self ): super () . __init__ () node = MyNode () node . receive_loop_as_thread () time . sleep ( 0.1 ) 创建Adapter Node之后，就可以通过node使用linda了。 res = node . linda_reboot () # reboot linda server, clean tuple space assert res == [] res = node . linda_out ([ 1 , 2 , 3 ]) # out assert res == [ 1 , 2 , 3 ] res = node . linda_out ([ 1 , 2 , 4 ]) # out res = node . linda_dump () assert res == [[ 1 , 2 , 3 ], [ 1 , 2 , 4 ]] res = node . linda_rd ([ 1 , 2 , 3 ]) # read and blocking assert res == [ 1 , 2 , 3 ] res = node . linda_rdp ([ 1 , 2 , \"*\" ]) # read but non-blocking assert res == [ 1 , 2 , 3 ] # 先入先出 res = node . linda_in ([ 1 , 2 , 3 ]) # read then remove (blocking) assert res == [ 1 , 2 , 3 ]","text_tokens":["可以","1","*","linda","thread","reboot","read","。","super","3","remove","通过","__",".","创建","]","adapternode","def","out","id","as","but","from","mynode","init","server","4","-","test","使用","tuple","[","codelab","了","先入","#","先出","in","rd","and","就","=",":","assert","(",",",")","receive","0.1","clean","adapter","blocking","class"," ","/","node","client","self","loop","res","dump","，","2","import","之后","rdp","then","_","sleep","space","non","\"","time"],"title":"AdapterNode","title_tokens":["adapternode"]},{"location":"user_guide/Linda/#adapternodeaio","text":"同步和异步 API 保持一致 import asyncio from codelab_adapter_client import AdapterNodeAio class MyNode ( AdapterNodeAio ): NODE_ID = \"linda/test\" def __init__ ( self ): super () . __init__ () # 以下代码在 jupyter 中运行，如果你想在python脚本中使用，请考虑异步代码的生命周期，参考: https://github.com/CodeLabClub/codelab_adapter_client_python/blob/master/tests/test_linda_client.py#L26 task = asyncio . create_task ( node . receive_loop ()) await asyncio . sleep ( 0.1 ) # !! 等待zmq通信管道建立完成 _tuple = [ \"test_linda\" ] # reboot res = await node . linda_reboot () assert res == [] # out _tuple = [ \"hello\" , \"world\" ] await node . linda_out ( _tuple ) # rdp res = await node . linda_rdp ( _tuple ) assert res == _tuple # inp res = await node . linda_inp ( _tuple ) assert res == _tuple res = await node . linda_dump () assert res == [] 更多用法参考测试文件: test_linda_client.py","text_tokens":["com","参考","hello","reboot","更","脚本","多","https","id","init","github","用法","[",":","完成","assert","同步","(","await",",","blob","rdp","adapternodeaio","_","tests","你","保持一致","等待","生命","zmq","代码","建立","__",".","的","out","文件","codelabclub","一致","周期","以下","使用","tuple","codelab","#","在","考虑",")","receive","0.1","!","生命周期"," ","/","self","python","linda","jupyter","py","inp","super","asyncio","def","运行","task","world","from","mynode","通信","test","想","l26","请","adapter","保持","import","create","sleep","\"","master","，","和","测试","如果","中","管道","]","api","=","异步","loop","node","client","dump","res","class"],"title":"AdapterNodeAio(异步)","title_tokens":[")","异步","adapternodeaio","("]},{"location":"user_guide/Linda/#scratch-client","text":"","text_tokens":[],"title":"Scratch Client","title_tokens":[" ","scratch","client"]},{"location":"user_guide/Linda/#rest-api","text":"使用 httpie 作为客户端。 := 表示后边跟的是 json 数据","text_tokens":[" ","客户端","=",":","后边","跟","表示","。","json","httpie","使用","作为","是","数据","的","客户"],"title":"REST API","title_tokens":[" ","api","rest"]},{"location":"user_guide/Linda/#out","text":"http post https://codelab-adapter.codelab.club:12358/api/linda operate=out tuple:='[\"hello\", \"linda\"]'","text_tokens":["hello","linda","'","out",".","]","https","club","api","tuple","[","codelab","http","=",":",",","operate","adapter","post"," ","/","-","12358","\""],"title":"out","title_tokens":["out"]},{"location":"user_guide/Linda/#in","text":"http post https://codelab-adapter.codelab.club:12358/api/linda operate=in tuple:='[\"hello\", \"linda\"]'","text_tokens":["hello","linda","'",".","]","https","club","api","tuple","[","codelab","in","http","=",":",",","operate","adapter","post"," ","/","-","12358","\""],"title":"in","title_tokens":["in"]},{"location":"user_guide/Linda/#dump","text":"http post https://codelab-adapter.codelab.club:12358/api/linda operate=dump 其他原语类似","text_tokens":["linda",".","https","club","类似","api","codelab","原语","http","其他","=",":","operate","adapter","post"," ","/","-","dump","12358"],"title":"dump","title_tokens":["dump"]},{"location":"user_guide/Linda/#cli","text":"pip install https://github.com/CodeLabClub/codelab_adapter_client_python/archive/master.zip # pip install codelab_adapter_client --upgrade # 暂未更新到 pypi codelab-linda --help codelab-linda out --help # reboot codelab-linda reboot # dump codelab-linda dump # out codelab-linda out --data '[1, \"hello\"]' # rd codelab-linda rd --data '[1, \"hello\"]' codelab-linda rd --data '[1, \"*\"]' # rdp codelab-linda rd --data '[1, 2, 3]' # [] # in codelab-linda rd --data '[1, \"*\"]'","text_tokens":["com","更新","1","hello","linda","*","install","reboot","'","3",".","out","]","https","codelabclub","github","暂未","[","codelab","#","in","pip","rd","help",":","pypi","data","到","upgrade",",","adapter"," ","/","-","client","dump","archive","2","rdp","_","zip","python","\"","master"],"title":"cli (命令行客户端)","title_tokens":[" ","客户端","cli","(",")","命令","命令行","客户"]},{"location":"user_guide/Linda/#javascript-client","text":"方便开发者，将 Linda 引入自己的web项目。 CodeLab 目前使用 JavaScript Client，将 Linda 带入 CodeLab Scratch、CodeLab Adapter WebUI 和 Lively。 import AdapterBaseClient from \"./codelab_adapter_base.js\" ; // https://github.com/CodeLabClub/scratch3_eim/blob/v3/codelab_adapter_base.js let NODE_ID = \"linda/js/client\" ; let HELP_URL = \"https://adapter.codelab.club/user_guide/Linda/\" ; let runtime = null ; let adapter_client = new AdapterBaseClient ( NODE_ID , HELP_URL , runtime ); await adapter_client . linda_out ([ 1 , 2 , 3 ]). then (( data )=>{ console . log ( \"linda\" , data ); return data }) tuple = await adapter_client . linda_in ([ \"hi\" , \"lively\" , \"*\" ]). then (( data )=>{ console . log ( \"linda\" , data ); return data }) tuple = await adapter_client . linda_in ([ \"hi\" , \"python\" , \"from Lively\" ]). then (( data )=>{ console . log ( \"linda\" , data ); return data }) tuple = await adapter_client . linda_in ([ \"hello\" , \"lively\" , \"*\" ]). then (( data )=>{ console . log ( \"linda\" , data ); return data }) await adapter_client . linda_in ([ 1 , 2 , 5 ], 1000 ). then (( data )=>{ console . log ( \"linda\" , data ); return data }) //超时","text_tokens":["com","hello","、","开发","https","id","目前","webui","adapterbaseclient","github","[","in","带入",":","(",",","scratch","await","javascript","blob","}","then","_","eim","log","1","*","3","的",".","null","out","codelabclub","项目","使用","tuple","codelab",">","help","超时",")"," ","/","user","将","python","linda","。","return","from","guide",";","adapter","console","js","web","2","import","base","开发者","引入","scratch3","\"","runtime","，","1000","和","v3","hi","]","自己","club","=","url","data","方便","5","{","let","node","client","lively","new"],"title":"JavaScript Client","title_tokens":[" ","client","javascript"]},{"location":"user_guide/Linda/#mush-lang","text":"LISP 是一种构建材料 -- Alan Kay 为了更好地探索 Linda 的可能性，我们围绕 Linda 的基本原语，构建了一门简单的语言 -- mush-lang 。 mush-lang 采用 LISP 风格的语法，可以视为 LISP 的一门玩具方言。 LISP 因其同构性(内外表示一致)，可能是所有语言中最简单的。 mush-lang 目前在 Python 中实现。","text_tokens":["可以","采用","linda","alan","表示","。","是","中","的","一门","探索","其","简单","语言","lisp","一致","目前","一种","性","了","lang","风格","材料","玩具","原语","mush","围绕","kay","在","构建","(","地",")","基本","可能性","方言","因"," ","-","我们","为了","视为","内外","实现","语法","最","python","所有","，","更好","同构","可能"],"title":"mush-lang","title_tokens":["mush","-","lang"]},{"location":"user_guide/Linda/#demo","text":"","text_tokens":[],"title":"Demo","title_tokens":["demo"]},{"location":"user_guide/Linda/#scratch","text":"在 Python 的例子中，我们甚至在Scratch里构建了 Server！ 两个Scratch角色同步的代码如下 linda-demo1 linda-demo2 python 与 Scratch 同步的代码如下: linda-demo1 Python核心部分代码为: node . linda_out ([ \"request\" , \"loudness\" , \"xxx\" ]) node . linda_in ([ \"response\" , \"loudness\" , \"*\" ])","text_tokens":["*","linda","代码","为","request","中","loudness","部分","的",".","out","]","例子","demo2","与","server","甚至","如下","[","了","xxx","demo1","in","两个","在",":","里","！","构建","response","同步","(",",","scratch",")","核心"," ","-","我们","node","_","角色","python","\"","，"],"title":"多个 Scratch 角色 的 实时同步","title_tokens":[" ","实时","多个","同步","角色","scratch","的"]},{"location":"user_guide/Linda/#jupyter-scratch","text":"跨语言对象之间的互操作 用到了 Jupyter notebook 里的 ipywidgets. # 请使用 jupyter notebook，而不是jupyterlab from ipywidgets import interact , interactive , fixed , interact_manual from codelab_adapter_client import AdapterNode import time class MyNode ( AdapterNode ): NODE_ID = \"linda/jupyter\" def __init__ ( self ): super () . __init__ () node = MyNode () node . receive_loop_as_thread () @interact ( show = True , x = 100 , size = 100 ) def f ( show , x , size ): node . linda_out ([ \" %% x\" , x ], wait = False ) # f函数是非阻塞的回调函数，使用wait=False参数，使node.linda_out使非阻塞的，此时相当于流，记得使用 message tuple（见下文） node . linda_out ([ \" %% show\" , show ], wait = False ) node . linda_out ([ \" %% size\" , size ], wait = False ) return show , x , size","text_tokens":["互操作","id","语言","init","[","相当于",":","false","(",",","f","size","流","notebook","_","fixed","对象","相当","下文","的",".","__","out","adapternode","as","之间","而","使用","回调","使非","codelab","tuple","#","里","@","函数",")","receive"," ","/","（","当于","self","%%","）","linda","jupyter","super","interact","return","不是","def","ipywidgets","x","from","mynode","interactive","用到","请","wait","adapter","import","操作","100","\"","time","，","manual","见下文","参数","thread","是非","message","阻塞","]","记得","true","了","show","=","此时","loop","node","client","跨","jupyterlab","使","class"],"title":"Jupyter 与 Scratch 的互操作","title_tokens":[" ","jupyter","与","互操作","scratch","操作","的"]},{"location":"user_guide/Linda/#_4","text":"","text_tokens":[],"title":"进阶","title_tokens":["进阶"]},{"location":"user_guide/Linda/#_5","text":"linda 的基本观点是数据不停生灭（由用户显式操控）。 如果我们想在 Linda 中实现 \"消息/流\" 的模式，可能会遇到tuple堆积（生产者太快）的问题（这是很严重的问题，似乎也不是正确使用linda的方式） 为了尽可能少地破坏概念完整性，我们引入了一种特殊的tuple来支持\"消息/流\"模式。 我们定义了一种叫做 message tuple 的 tuple，它像消息一样，每次只能流的瞬时截面: 一个数据 。 以下是几个message tuple的例子: (\"%%x\", 1) (\"%%y\", 50) (\"%%z\", \"hello\", \"world\") 在语法层面，message tuple只是普通的tuple，唯一区别是第一个元素需要是如下风格字符串， \"%%x\", x可以是任意值，可以把它看作message tuple的id，不同id的message tuple被视为不同tuple，支持tuple的所有操作符。 以下是一个例子: message_tuple demo 视角 站在变量的视角，你可以将其看作全局变量","text_tokens":["站","hello","消息","一样","元素","尽可能少","id","方式","区别","产者",":","概念","严重","正确","由","(",",","普通","太快","字符","操作符","支持","流","demo","语法","只是","_","变量","会","遇到","所有","你","叫做","完整性","1","全局","模式","是","的","破坏","不同","值","以下","使用","tuple","在","任意","它","似乎","堆积","地",")","需要","尽可能"," ","（","我们","/","视角","%%","将","显式","）","观点","为了","可能","可以","这","linda","层面","。","特殊","不是","x","被","world","一种","尽可","如下","一个","也","想","来","瞬时","唯一","很","像","第一","生产","引入","操作","数据","\"","，","问题","几个","定义","生灭","字符串","只能","如果","中","第一个","message","y","完整","50","操控","其","例子","把","了","风格","截面","不停","基本","视为","生产者","用户","看作","实现","每次","全局变量","z"],"title":"消息风格","title_tokens":["消息","风格"]},{"location":"user_guide/Linda/#faq","text":"","text_tokens":[],"title":"FAQ","title_tokens":["faq"]},{"location":"user_guide/Linda/#linda-tuple-space","text":"Adapter >=4.1.0","text_tokens":[" ","=","4.1","0","adapter",">","."],"title":"如何看到 Linda Tuple Space","title_tokens":[" ","linda","看到","如何","tuple","space"]},{"location":"user_guide/Linda/#scratch-inrd","text":"简单而言，按照以下顺序运行程序: 确保在linda in/rd 积木运行之前，先运行linda reboot 之后在启动Scratch程序 以下是原因分析(可以不看): 这个Linda背后的实现有关，Adapter Linda 目前是C/S架构。Scratch中的 in/rd 积木实际上 promise。 reboot针对的是linda server的操作。 如果程序在 in/rd 的时候，被reboot，则客户端(Scratch)的 in/rd 对应的promise永远不会被解决。 linda reboot 一下","text_tokens":["可以","linda","s","解决","reboot","。","如果","对应","是","中","的","简单","被","运行","目前","先","以下","按照","server","永远","程序","实际上","in","顺序","rd","一下","在","不看",":","时候","原因","之前","这个","(","有关","scratch",")","背后","确保","adapter","而言","c","则"," ","/","分析","实际","客户端","promise","之后","启动","实现","不会","操作","针对","积木","架构","，","客户"],"title":"在 Scratch 里有些 in/rd 积木一直阻塞","title_tokens":[" ","在","/","一直","里","阻塞","有些","scratch","积木","in","rd"]},{"location":"user_guide/Linda/#_6","text":"<!-- ZMQ_LOOP_TIME 以下是一个在scratch里进行速率测试的demo linda-rate → 默认情况下，30帧/s。 在Python客户端，通过修改参数，可以提高到300-600帧/s。 class MyNode ( AdapterNode ): NODE_ID = \"linda/test\" def __init__ ( self ): super () . __init__ ( recv_mode = \"block\" , bucket_fill_rate = 1000 , bucket_token = 1000 )","text_tokens":["可以","测试","→","zmq","linda","s","参数","600","<","。","300","block","是","super","bucket","通过","fill","的","__",".","adapternode","def","进行","id","速率","mynode","以下","init","test","默认","情况","token","一个","在","=",":","下","里","到","帧","scratch","(",")",",","!","recv","修改","-"," ","loop","/","客户端","demo","提高","node","，","\"","self","_","30","1000","mode","python","class","time","rate","客户"],"title":"速度","title_tokens":["速度"]},{"location":"user_guide/Linda/#linda-eim","text":"Linda 与 EIM 将长期共存，一个 Adapter Node，即是Linda client，也是EIM client，它们各有所擅。长期来看，我们更偏好 Linda。","text_tokens":["eim","长期","来看","linda","。","更","是","共存","与","擅","它们","一个","也","即","adapter"," ","node","client","我们","有所","偏好","各","将","长期共存","，"],"title":"Linda 与 EIM","title_tokens":[" ","与","eim","linda"]},{"location":"user_guide/Linda/#_7","text":"在 CodeLab Adapter 中实现 Linda 并发模型 Linda: 比 Actor 更好的并发模型 [译]Alan Kay 看待'对象'的几次观点转变 建立在异步消息之上的同步指令: 分别在 JavaScript、Python、Squeak 上实现 [译]Smalltalk 背后的设计原则","text_tokens":["linda","alan","消息","'","之上","、","中","并发","建立","对象","的","]","转变","模型","几次","smalltalk","[","codelab","在","kay","上",":","设计","同步","背后","javascript","adapter","分别","squeak","异步","原则","译"," ","actor","实现","比","指令","看待","python","更好","观点"],"title":"参考","title_tokens":["参考"]},{"location":"user_guide/advanced/","text":"进阶（advanced） ¶ 通过 extension_eim_trigger 和 extension_eim_monitor 插件， Scratcher 可以轻松使用 Python 拓展 Scratch 的能力。 eim trigger ：使用 Python 往 Scratch 中发送消息。 eim monitor ：使用 Python 处理来自 Scratch 的消息。","text_tokens":["¶","eim","和","可以","消息","。","中","处理","的","advanced","往","：","使用","extension","trigger","scratcher","monitor","scratch","能力","发送","进阶","（"," ","插件","，","拓展","轻松","_","来自","python","）","通过"],"title":"进阶(advanced)","title_tokens":[")","进阶","advanced","("]},{"location":"user_guide/advanced/#advanced","text":"通过 extension_eim_trigger 和 extension_eim_monitor 插件， Scratcher 可以轻松使用 Python 拓展 Scratch 的能力。 eim trigger ：使用 Python 往 Scratch 中发送消息。 eim monitor ：使用 Python 处理来自 Scratch 的消息。","text_tokens":["eim","可以","和","消息","。","中","处理","通过","的","往","：","使用","extension","trigger","scratcher","monitor","scratch","能力","发送"," ","插件","拓展","轻松","_","来自","python","，"],"title":"进阶（advanced）","title_tokens":["（","）","进阶","advanced"]},{"location":"user_guide/develop/","text":"测试版 ¶","text_tokens":[" ","¶","测试","测试版"],"title":"测试版","title_tokens":["测试","测试版"]},{"location":"user_guide/develop/#_1","text":"","text_tokens":[],"title":"测试版","title_tokens":["测试","测试版"]},{"location":"user_guide/gallery-bak/","text":"演示视频（Gallery） ¶ Notice If you can't read Chinese, Please use Google Translate. 读书与思考 ¶ 收工，吃饭 ¶ 击灭那盏灯 ¶ 小房间与大房间（labo 套件） ¶ 姿势乐谱 ¶ 冲啊，先驱音速 ¶ hungry robot ¶ 巴甫洛夫的机器人 ¶ 击掌奏乐 ¶ Leap Motion 超级玛丽 ¶ 在 CodeLab Scratch3 中，无线控制 bit:bot ¶ 在 CodeLab Scratch3 中，使用 micro:bit 开/关灯 ¶ 参考 积木化编程与智能家居 。 在 CodeLab Scratch3 中，利用运动检测开/关灯 ¶ 在 CodeLab Scratch3 中，利用传感器做体感游戏 ¶ 参考 积木化编程与智能家居 。 在 CodeLab Scratch3 中，使用本地的机器视觉 ¶ 使用手势控制客厅的灯 ¶ 我们布置好了一个可编程的空间，使用 Scratch3 中的积木进行空间编程，控制室内的灯光、插座、空调、电视，如果你愿意，也可以去淘宝买一根哈利波特的木制魔杖（估计只要九块九），用我们提供的机器视觉积木训练一下，就可以用你自制的咒语（比如用魔杖划一个o）控制你的房间 参考 积木化编程与智能家居 。 门与电视的联动 ¶ 我们使用树莓派可将任何屏幕变为变为一个可编程的广告牌（哈哈只要 200 块哦，这块似乎也值得商业化[奸笑]）。加上简单的神经网络你可以做到，当穿着裙子的姑娘走近屏幕，屏幕立马给她安利新款纪梵希，而穿着格子衬衫的大叔靠近时，屏幕则以机械键盘蛊惑他。 参考 积木化编程与智能家居 。 纸做的开关 ¶ 参考 积木化编程与智能家居 。 Cozmo 接入在线课程平台 ¶ 参考 使用 Codelab_Adapter 连接 blockly 与硬件 。 Incendio（火焰咒） ¶ 控制优必选 Alpha 系列机器人 ¶ 参考 codelab-adapter 接入优必选 Alpha 系列机器人 接入 blender（连接游戏、电影与 VR） ¶ 做一个微信聊天界面 ¶ 要有光（微信 Scratch 物联网） ¶ 人脸地标（Python 程序接入 Scratch） ¶ 鼻梁上的老花镜（增强现实） ¶ hi-渡边君（chatbot） ¶ 智能音箱 ¶ 掌控板（reverse shell） ¶ unity、lego、scratch3-adapter（by 联想研究院） ¶ 四轴飞行器 ¶ oh my vector ¶ 模拟器（by 联想研究院） ¶ 眼动仪 ¶ Switch Labo ❤️ Vector ¶ Candy Language for Vector ¶ 接入 Arduino ¶ Physics extension and Leap Motion ¶ wechat extension ¶ Cozmo and Vector: Where did the human go? ¶ 渡边君（cozmo+vector） ¶ 灵光一现（脑电波＋智能家居） ¶ DJI Tello x Leap Motion ¶ DJI Tello x Switch Labo ¶ DJI Tello x Switch Joy-Con ¶ 霍格沃兹模式 ¶ CodeLab ❤️ Toio ¶ 给我一个 Toio，我可以转动地球 ¶ 在你转身之后，岁月无光 ¶ 天空没有留下鸟的痕迹，但 Toio 已飞过 ¶ 接入 3D 游戏 ¶ 山寨版龟派气功 ¶ CodeLab x leju robot ¶ 手势窗帘 ¶ 体验者初次学会适应变量 ¶ Toio etoys ¶ 魔法教室 ¶ 灰袍巫师 ¶ Scratch x 微信 x IoT ¶ Jupyter ＋ Scratch ¶ 谁动了我的糖果 ¶ Toio music interface ¶ Toio music interface2 ¶ I am reading (Python) ¶ cube symphony ¶ 自制门禁系统 ¶ CodeLab 有嘻哈 ¶ 目之所及 ¶ 兼容 iPad ¶ 可穿戴设备 & 魔杖 ¶ Fire! ¶ Inspired by DynamicLand ¶ 命运之手 ¶ 重力效应 ¶ 拍案惊球 ¶ Body Programming ¶ 二进制 ¶ 蜡笔调色盘 ¶ 一场烟火 ¶ Toio 泡泡龙 ¶ Seeing Spaces ¶ COVID-19 ¶ Dynamic Table ¶ 小型解释器 ¶ spelling ¶ 皮卡与皮卡丘 ¶ 如何画一只会跑的独角兽🦄️ ¶ 42 (DynamicTable4Math) ¶ 动画原理 ¶ 纸糊方向盘 ¶ 震动检测器 ¶ 生日贺卡 ¶ CodeLab Adapter ❤️ Teachable Machine ¶ Kano Wand ¶ 闪现 ¶ 积木消失了 ¶ \"RoboMaster EP\" ¶ Minecraft ¶ Sonic Pi ¶ Yanshee ¶ Hey Siri ¶ RoboMaster && Motion Sensor ¶ GameShell ¶","text_tokens":["参考","灰袍","＋","motion","树莓","[","无","联网","画","广告","scratch","etoys","电影","传感","哈利","原理","买","给","变量","_","for","3d","击灭","robomaster","动画","估计","神经网络","检测","调色盘","you","dynamicland","客厅","惊球","纸","初次","以","哈利波","!","谁动","我们","一现","机器","if","增强","超级玛丽","将","python","积木","i","&&","联动","适应","'","布置","姑娘","独角","用","language","学会","巴甫洛","本地","leap","ipad","blender","-","无线","家居","在线","泡泡龙","飞行","空间","界面","\"","google","泡泡","notice","控制","如果","他","]","设备","拍案","小型","iot","extension","大叔","转身","值得","inspired","必选","人脸","地标","裙子","labo","body","生日","训练","天空","spelling","霍","冲","命运","开","可编","二进制","愿意","咒","智能","释器","大","自制","老花镜","yanshee","奏乐","门","套件",":","进制","平台","先驱","但","渡边","变为","做到","智能家居","tello","模式","translate","一场","chinese","魔法","seeing","sensor","而","地球","机械","在","leju","商业","where","时","课程","空调","版龟","连接"," ","教室","physics","之后","飞过","解释","魔杖","table","jupyter","。","玛丽","啊","格沃兹","转动","电波","调色","arduino","hungry","淘宝","消失","花镜","音速","shell","巫师","minecraft","incendio","神经网","研究","四轴","by","加上","covid","解释器","划","吃饭","the","木制","reading","任何","体验","键盘","感","之手","did","程序","皮卡","视觉","and","alpha","blockly","️","比如","灯光","bit","聊天","姿势","纸糊","unity","kano","独角兽","¶","乐谱","传感器","格子","巴甫洛夫","闪现","飞行器","teachable","cozmo","运动","洛夫","板","演示","系统","programming","dynamictable4math","(",",","ep","奸笑","micro","屏幕","joy","con","击掌","spaces","hey","会","接入","联想","商业化","安利","的","方向盘","machine","已","codelab","系列","一下","脑电波","可","派","似乎",")","跑","编程","wand","t","/","立马","要有光","门禁系统","哈哈","可以","检测器","老花","气功","可编程","music","目之所及","网络","硬件","与","读书","插座","一个","?","oh","模拟","岁月","adapter","则","视频","所及","chatbot","灵光","scratch3","go","小房间","模拟器","中","hi","痕迹","收工","利用","了","特","君","蛊惑","盏灯","human","留下","衬衫","my","火焰","靠近","42","🦄","symphony","只要","哦","、","switch","cube","can","好","简单","进行","dynamic","dji","去","糖果","please","reverse","掌控","化","做体","做","toio","如何","robot","19","你","九块","者","纪梵希","vector","&","兼容",".","室内","没有","使用","机器人","咒语","穿戴","微信","皮卡丘","interface2","新款","重力","（","am","use","一根","九","广告牌","pi","窗帘","）","那","鼻梁","read","一只","门禁","我","震动","光","interface","200","房间","x","o","烟火","开关","当","小房","也","上","联想研究院","研究院","贺卡","bot","灯","关灯","蜡笔","感器","vr","gameshell","，","+","音箱","方向","她","lego","手势","思考","现实","物","siri","测器","wechat","走近","优","candy","超级","山寨","电视","穿着","这块","效应","就","sonic","有嘻哈","眼动仪","fire","提供","gallery","块","神经","❤","游戏","鸟"],"title":"演示视频（Gallery）","title_tokens":["视频","（","演示","gallery","）"]},{"location":"user_guide/gallery-bak/#gallery","text":"Notice If you can't read Chinese, Please use Google Translate.","text_tokens":[" ","chinese","please","notice","use","read","if","'",",","translate","you","t","google",".","can"],"title":"演示视频（Gallery）","title_tokens":["视频","（","演示","gallery","）"]},{"location":"user_guide/gallery-bak/#_1","text":"","text_tokens":[],"title":"读书与思考","title_tokens":["与","思考","读书"]},{"location":"user_guide/gallery-bak/#_2","text":"","text_tokens":[],"title":"收工，吃饭","title_tokens":["吃饭","，","收工"]},{"location":"user_guide/gallery-bak/#_3","text":"","text_tokens":[],"title":"击灭那盏灯","title_tokens":["盏灯","那","击灭"]},{"location":"user_guide/gallery-bak/#labo","text":"","text_tokens":[],"title":"小房间与大房间（labo 套件）","title_tokens":["（","小房"," ","套件","小房间","与","labo","）","大","房间"]},{"location":"user_guide/gallery-bak/#_4","text":"","text_tokens":[],"title":"姿势乐谱","title_tokens":["乐谱","姿势"]},{"location":"user_guide/gallery-bak/#_5","text":"","text_tokens":[],"title":"冲啊，先驱音速","title_tokens":["音速","先驱","啊","冲","，"]},{"location":"user_guide/gallery-bak/#hungry-robot","text":"","text_tokens":[],"title":"hungry robot","title_tokens":[" ","robot","hungry"]},{"location":"user_guide/gallery-bak/#_6","text":"","text_tokens":[],"title":"巴甫洛夫的机器人","title_tokens":["机器","巴甫洛","巴甫洛夫","机器人","的","洛夫"]},{"location":"user_guide/gallery-bak/#_7","text":"","text_tokens":[],"title":"击掌奏乐","title_tokens":["击掌","奏乐"]},{"location":"user_guide/gallery-bak/#leap-motion","text":"","text_tokens":[],"title":"Leap Motion 超级玛丽","title_tokens":[" ","超级","玛丽","超级玛丽","leap","motion"]},{"location":"user_guide/gallery-bak/#codelab-scratch3-bitbot","text":"","text_tokens":[],"title":"在 CodeLab Scratch3 中，无线控制 bit:bot","title_tokens":[" ","在","bit","无线",":","控制","bot","中","scratch3","codelab","，"]},{"location":"user_guide/gallery-bak/#codelab-scratch3-microbit","text":"参考 积木化编程与智能家居 。","text_tokens":[" ","参考","智能","与","家居","智能家居","。","编程","积木","化"],"title":"在 CodeLab Scratch3 中，使用 micro:bit 开/关灯","title_tokens":[" ","在","/","bit",":","关灯","中","使用","scratch3","codelab","micro","开","，"]},{"location":"user_guide/gallery-bak/#codelab-scratch3","text":"","text_tokens":[],"title":"在 CodeLab Scratch3 中，利用运动检测开/关灯","title_tokens":[" ","在","/","检测","关灯","利用","中","scratch3","codelab","运动","开","，"]},{"location":"user_guide/gallery-bak/#codelab-scratch3_1","text":"参考 积木化编程与智能家居 。","text_tokens":[" ","参考","智能","与","家居","智能家居","。","编程","积木","化"],"title":"在 CodeLab Scratch3 中，利用传感器做体感游戏","title_tokens":[" ","在","传感","做体","传感器","利用","中","scratch3","codelab","感器","感","游戏","，"]},{"location":"user_guide/gallery-bak/#codelab-scratch3_2","text":"","text_tokens":[],"title":"在 CodeLab Scratch3 中，使用本地的机器视觉","title_tokens":[" ","在","机器","视觉","中","使用","本地","scratch3","codelab","的","，"]},{"location":"user_guide/gallery-bak/#_8","text":"我们布置好了一个可编程的空间，使用 Scratch3 中的积木进行空间编程，控制室内的灯光、插座、空调、电视，如果你愿意，也可以去淘宝买一根哈利波特的木制魔杖（估计只要九块九），用我们提供的机器视觉积木训练一下，就可以用你自制的咒语（比如用魔杖划一个o）控制你的房间 参考 积木化编程与智能家居 。","text_tokens":["可以","只要","参考","智能家居","控制","可编程","如果","、","。","布置","中","估计","的","室内","可编","愿意","你","房间","好","进行","智能","与","o","九块","电视","使用","去","淘宝","了","咒语","插座","视觉","一个","用","一下","自制","也","就","特","哈利波","比如","编程","魔杖","灯光","空调","化"," ","（","我们","哈利","买","机器","家居","一根","九","提供","划","scratch3","空间","）","积木","训练","，","木制"],"title":"使用手势控制客厅的灯","title_tokens":["灯","控制","手势","使用","客厅","的"]},{"location":"user_guide/gallery-bak/#_9","text":"我们使用树莓派可将任何屏幕变为变为一个可编程的广告牌（哈哈只要 200 块哦，这块似乎也值得商业化[奸笑]）。加上简单的神经网络你可以做到，当穿着裙子的姑娘走近屏幕，屏幕立马给她安利新款纪梵希，而穿着格子衬衫的大叔靠近时，屏幕则以机械键盘蛊惑他。 参考 积木化编程与智能家居 。","text_tokens":["可以","商业化","只要","哦","任何","参考","智能家居","她","纪梵希","可编程","。","格子","网络","安利","键盘","他","的","可编","200","]","神经网络","你","简单","智能","与","走近","树莓","姑娘","而","使用","[","机械","当","穿着","一个","这块","也","以","大叔","新款","可","商业","时","派","似乎","广告","值得","编程","奸笑","蛊惑","屏幕","神经网","则","化","（"," ","我们","衬衫","立马","给","裙子","哈哈","家居","加上","靠近","广告牌","变为","做到","块","将","神经","）","积木","，"],"title":"门与电视的联动","title_tokens":["联动","门","与","电视","的"]},{"location":"user_guide/gallery-bak/#_10","text":"参考 积木化编程与智能家居 。","text_tokens":[" ","参考","智能","与","家居","智能家居","。","编程","积木","化"],"title":"纸做的开关","title_tokens":["开关","做","的","纸"]},{"location":"user_guide/gallery-bak/#cozmo","text":"参考 使用 Codelab_Adapter 连接 blockly 与硬件 。","text_tokens":[" ","blockly","硬件","参考","与","。","_","使用","codelab","adapter","连接"],"title":"Cozmo 接入在线课程平台","title_tokens":[" ","平台","接入","在线","cozmo","课程"]},{"location":"user_guide/gallery-bak/#incendio","text":"","text_tokens":[],"title":"Incendio（火焰咒）","title_tokens":["（","咒","火焰","incendio","）"]},{"location":"user_guide/gallery-bak/#alpha","text":"参考 codelab-adapter 接入优必选 Alpha 系列机器人","text_tokens":[" ","-","接入","alpha","参考","机器","优","必选","机器人","codelab","adapter","系列"],"title":"控制优必选 Alpha 系列机器人","title_tokens":[" ","alpha","机器","优","控制","必选","机器人","系列"]},{"location":"user_guide/gallery-bak/#blender-vr","text":"","text_tokens":[],"title":"接入 blender（连接游戏、电影与 VR）","title_tokens":[" ","（","接入","电影","与","、","）","游戏","vr","连接","blender"]},{"location":"user_guide/gallery-bak/#_11","text":"","text_tokens":[],"title":"做一个微信聊天界面","title_tokens":["微信","聊天","做","界面","一个"]},{"location":"user_guide/gallery-bak/#scratch","text":"","text_tokens":[],"title":"要有光（微信 Scratch 物联网）","title_tokens":["（","微信"," ","要有光","联网","scratch","）","物"]},{"location":"user_guide/gallery-bak/#python-scratch","text":"","text_tokens":[],"title":"人脸地标（Python 程序接入 Scratch）","title_tokens":["（"," ","接入","地标","程序","scratch","python","）","人脸"]},{"location":"user_guide/gallery-bak/#_12","text":"","text_tokens":[],"title":"鼻梁上的老花镜（增强现实）","title_tokens":["老花镜","上","花镜","（","鼻梁","老花","增强","现实","）","的"]},{"location":"user_guide/gallery-bak/#hi-chatbot","text":"","text_tokens":[],"title":"hi-渡边君（chatbot）","title_tokens":["-","（","chatbot","渡边","君","hi","）"]},{"location":"user_guide/gallery-bak/#_13","text":"","text_tokens":[],"title":"智能音箱","title_tokens":["音箱","智能"]},{"location":"user_guide/gallery-bak/#reverse-shell","text":"","text_tokens":[],"title":"掌控板（reverse shell）","title_tokens":["（"," ","reverse","shell","）","掌控","板"]},{"location":"user_guide/gallery-bak/#unitylegoscratch3-adapterby","text":"","text_tokens":[],"title":"unity、lego、scratch3-adapter（by 联想研究院）","title_tokens":["-","（"," ","联想","联想研究院","研究院","by","lego","、","unity","scratch3","adapter","）","研究"]},{"location":"user_guide/gallery-bak/#_14","text":"","text_tokens":[],"title":"四轴飞行器","title_tokens":["飞行器","飞行","四轴"]},{"location":"user_guide/gallery-bak/#oh-my-vector","text":"","text_tokens":[],"title":"oh my vector","title_tokens":["oh"," ","vector","my"]},{"location":"user_guide/gallery-bak/#by","text":"","text_tokens":[],"title":"模拟器（by 联想研究院）","title_tokens":["（"," ","联想研究院","联想","研究院","by","模拟器","模拟","）","研究"]},{"location":"user_guide/gallery-bak/#_15","text":"","text_tokens":[],"title":"眼动仪","title_tokens":["眼动仪"]},{"location":"user_guide/gallery-bak/#switch-labo-vector","text":"","text_tokens":[],"title":"Switch Labo ❤️ Vector","title_tokens":[" ","️","switch","labo","vector","❤"]},{"location":"user_guide/gallery-bak/#candy-language-for-vector","text":"","text_tokens":[],"title":"Candy Language for Vector","title_tokens":[" ","candy","vector","for","language"]},{"location":"user_guide/gallery-bak/#arduino","text":"","text_tokens":[],"title":"接入 Arduino","title_tokens":[" ","接入","arduino"]},{"location":"user_guide/gallery-bak/#physics-extension-and-leap-motion","text":"","text_tokens":[],"title":"Physics extension and Leap Motion","title_tokens":[" ","and","physics","motion","leap","extension"]},{"location":"user_guide/gallery-bak/#wechat-extension","text":"","text_tokens":[],"title":"wechat extension","title_tokens":["wechat"," ","extension"]},{"location":"user_guide/gallery-bak/#cozmo-and-vector-where-did-the-human-go","text":"","text_tokens":[],"title":"Cozmo and Vector: Where did the human go?","title_tokens":[" ","and","?",":","did","where","cozmo","vector","go","the","human"]},{"location":"user_guide/gallery-bak/#cozmovector","text":"","text_tokens":[],"title":"渡边君（cozmo+vector）","title_tokens":["（","+","君","渡边","cozmo","vector","）"]},{"location":"user_guide/gallery-bak/#_16","text":"","text_tokens":[],"title":"灵光一现（脑电波＋智能家居）","title_tokens":["（","一现","智能家居","智能","脑电波","家居","灵光","＋","电波","）"]},{"location":"user_guide/gallery-bak/#dji-tello-x-leap-motion","text":"","text_tokens":[],"title":"DJI Tello x Leap Motion","title_tokens":[" ","x","tello","dji","leap","motion"]},{"location":"user_guide/gallery-bak/#dji-tello-x-switch-labo","text":"","text_tokens":[],"title":"DJI Tello x Switch Labo","title_tokens":[" ","x","tello","switch","dji","labo"]},{"location":"user_guide/gallery-bak/#dji-tello-x-switch-joy-con","text":"","text_tokens":[],"title":"DJI Tello x Switch Joy-Con","title_tokens":[" ","-","con","x","tello","switch","dji","joy"]},{"location":"user_guide/gallery-bak/#_17","text":"","text_tokens":[],"title":"霍格沃兹模式","title_tokens":["霍","格沃兹","模式"]},{"location":"user_guide/gallery-bak/#codelab-toio","text":"","text_tokens":[],"title":"CodeLab ❤️ Toio","title_tokens":[" ","️","toio","codelab","❤"]},{"location":"user_guide/gallery-bak/#toio","text":"","text_tokens":[],"title":"给我一个 Toio，我可以转动地球","title_tokens":[" ","可以","给","toio","转动","地球","我","，","一个"]},{"location":"user_guide/gallery-bak/#_18","text":"","text_tokens":[],"title":"在你转身之后，岁月无光","title_tokens":["你","在","之后","无","转身","岁月","光","，"]},{"location":"user_guide/gallery-bak/#toio_1","text":"","text_tokens":[],"title":"天空没有留下鸟的痕迹，但 Toio 已飞过","title_tokens":["留下"," ","但","没有","toio","已","飞过","的","，","天空","痕迹","鸟"]},{"location":"user_guide/gallery-bak/#3d","text":"","text_tokens":[],"title":"接入 3D 游戏","title_tokens":[" ","游戏","接入","3d"]},{"location":"user_guide/gallery-bak/#_19","text":"","text_tokens":[],"title":"山寨版龟派气功","title_tokens":["山寨","气功","派","版龟"]},{"location":"user_guide/gallery-bak/#codelab-x-leju-robot","text":"","text_tokens":[],"title":"CodeLab x leju robot","title_tokens":[" ","x","leju","robot","codelab"]},{"location":"user_guide/gallery-bak/#_20","text":"","text_tokens":[],"title":"手势窗帘","title_tokens":["窗帘","手势"]},{"location":"user_guide/gallery-bak/#_21","text":"","text_tokens":[],"title":"体验者初次学会适应变量","title_tokens":["初次","学会","者","适应","体验","变量"]},{"location":"user_guide/gallery-bak/#toio-etoys","text":"","text_tokens":[],"title":"Toio etoys","title_tokens":[" ","etoys","toio"]},{"location":"user_guide/gallery-bak/#_22","text":"","text_tokens":[],"title":"魔法教室","title_tokens":["教室","魔法"]},{"location":"user_guide/gallery-bak/#_23","text":"","text_tokens":[],"title":"灰袍巫师","title_tokens":["巫师","灰袍"]},{"location":"user_guide/gallery-bak/#scratch-x-x-iot","text":"","text_tokens":[],"title":"Scratch x 微信 x IoT","title_tokens":[" ","微信","x","scratch","iot"]},{"location":"user_guide/gallery-bak/#jupyter-scratch","text":"","text_tokens":[],"title":"Jupyter ＋ Scratch","title_tokens":["jupyter"," ","＋","scratch"]},{"location":"user_guide/gallery-bak/#_24","text":"","text_tokens":[],"title":"谁动了我的糖果","title_tokens":["糖果","了","我","谁动","的"]},{"location":"user_guide/gallery-bak/#toio-music-interface","text":"","text_tokens":[],"title":"Toio music interface","title_tokens":[" ","toio","interface","music"]},{"location":"user_guide/gallery-bak/#toio-music-interface2","text":"","text_tokens":[],"title":"Toio music interface2","title_tokens":[" ","toio","interface2","music"]},{"location":"user_guide/gallery-bak/#i-am-reading-python","text":"","text_tokens":[],"title":"I am reading (Python)","title_tokens":[" ","reading","am","(",")","python","i"]},{"location":"user_guide/gallery-bak/#cube-symphony","text":"","text_tokens":[],"title":"cube symphony","title_tokens":[" ","cube","symphony"]},{"location":"user_guide/gallery-bak/#_25","text":"","text_tokens":[],"title":"自制门禁系统","title_tokens":["门禁","门禁系统","系统","自制"]},{"location":"user_guide/gallery-bak/#codelab","text":"","text_tokens":[],"title":"CodeLab 有嘻哈","title_tokens":[" ","codelab","有嘻哈"]},{"location":"user_guide/gallery-bak/#_26","text":"","text_tokens":[],"title":"目之所及","title_tokens":["目之所及","所及"]},{"location":"user_guide/gallery-bak/#ipad","text":"","text_tokens":[],"title":"兼容 iPad","title_tokens":[" ","兼容","ipad"]},{"location":"user_guide/gallery-bak/#_27","text":"","text_tokens":[],"title":"可穿戴设备 &amp; 魔杖","title_tokens":["设备"," ","可","amp","&",";","穿戴","魔杖"]},{"location":"user_guide/gallery-bak/#fire","text":"","text_tokens":[],"title":"Fire!","title_tokens":["fire","!"]},{"location":"user_guide/gallery-bak/#inspired-by-dynamicland","text":"","text_tokens":[],"title":"Inspired by DynamicLand","title_tokens":["inspired"," ","by","dynamicland"]},{"location":"user_guide/gallery-bak/#_28","text":"","text_tokens":[],"title":"命运之手","title_tokens":["之手","命运"]},{"location":"user_guide/gallery-bak/#_29","text":"","text_tokens":[],"title":"重力效应","title_tokens":["效应","重力"]},{"location":"user_guide/gallery-bak/#_30","text":"","text_tokens":[],"title":"拍案惊球","title_tokens":["拍案","惊球"]},{"location":"user_guide/gallery-bak/#body-programming","text":"","text_tokens":[],"title":"Body Programming","title_tokens":[" ","programming","body"]},{"location":"user_guide/gallery-bak/#_31","text":"","text_tokens":[],"title":"二进制","title_tokens":["进制","二进制"]},{"location":"user_guide/gallery-bak/#_32","text":"","text_tokens":[],"title":"蜡笔调色盘","title_tokens":["调色","调色盘","蜡笔"]},{"location":"user_guide/gallery-bak/#_33","text":"","text_tokens":[],"title":"一场烟火","title_tokens":["一场","烟火"]},{"location":"user_guide/gallery-bak/#toio_2","text":"","text_tokens":[],"title":"Toio 泡泡龙","title_tokens":[" ","泡泡龙","泡泡","toio"]},{"location":"user_guide/gallery-bak/#seeing-spaces","text":"","text_tokens":[],"title":"Seeing Spaces","title_tokens":[" ","spaces","seeing"]},{"location":"user_guide/gallery-bak/#covid-19","text":"","text_tokens":[],"title":"COVID-19","title_tokens":["-","covid","19"]},{"location":"user_guide/gallery-bak/#dynamic-table","text":"","text_tokens":[],"title":"Dynamic Table","title_tokens":[" ","table","dynamic"]},{"location":"user_guide/gallery-bak/#_34","text":"","text_tokens":[],"title":"小型解释器","title_tokens":["解释","解释器","释器","小型"]},{"location":"user_guide/gallery-bak/#spelling","text":"","text_tokens":[],"title":"spelling","title_tokens":["spelling"]},{"location":"user_guide/gallery-bak/#_35","text":"","text_tokens":[],"title":"皮卡与皮卡丘","title_tokens":["与","皮卡丘","皮卡"]},{"location":"user_guide/gallery-bak/#_36","text":"","text_tokens":[],"title":"如何画一只会跑的独角兽🦄️","title_tokens":["️","一只","如何","画","独角","跑","🦄","会","的","独角兽"]},{"location":"user_guide/gallery-bak/#42-dynamictable4math","text":"","text_tokens":[],"title":"42 (DynamicTable4Math)","title_tokens":[" ","dynamictable4math","42","(",")"]},{"location":"user_guide/gallery-bak/#_37","text":"","text_tokens":[],"title":"动画原理","title_tokens":["原理","动画"]},{"location":"user_guide/gallery-bak/#_38","text":"","text_tokens":[],"title":"纸糊方向盘","title_tokens":["方向","纸糊","方向盘"]},{"location":"user_guide/gallery-bak/#_39","text":"","text_tokens":[],"title":"震动检测器","title_tokens":["检测","震动","测器","检测器"]},{"location":"user_guide/gallery-bak/#_40","text":"","text_tokens":[],"title":"生日贺卡","title_tokens":["贺卡","生日"]},{"location":"user_guide/gallery-bak/#codelab-adapter-teachable-machine","text":"","text_tokens":[],"title":"CodeLab Adapter ❤️ Teachable Machine","title_tokens":[" ","teachable","️","machine","codelab","❤","adapter"]},{"location":"user_guide/gallery-bak/#kano-wand","text":"","text_tokens":[],"title":"Kano Wand","title_tokens":[" ","wand","kano"]},{"location":"user_guide/gallery-bak/#_41","text":"","text_tokens":[],"title":"闪现","title_tokens":["闪现"]},{"location":"user_guide/gallery-bak/#_42","text":"","text_tokens":[],"title":"积木消失了","title_tokens":["积木","消失","了"]},{"location":"user_guide/gallery-bak/#robomaster-ep","text":"","text_tokens":[],"title":"\"RoboMaster EP\"","title_tokens":[" ","\"","robomaster","ep"]},{"location":"user_guide/gallery-bak/#minecraft","text":"","text_tokens":[],"title":"Minecraft","title_tokens":["minecraft"]},{"location":"user_guide/gallery-bak/#sonic-pi","text":"","text_tokens":[],"title":"Sonic Pi","title_tokens":[" ","sonic","pi"]},{"location":"user_guide/gallery-bak/#yanshee","text":"","text_tokens":[],"title":"Yanshee","title_tokens":["yanshee"]},{"location":"user_guide/gallery-bak/#hey-siri","text":"","text_tokens":[],"title":"Hey Siri","title_tokens":[" ","siri","hey"]},{"location":"user_guide/gallery-bak/#robomaster-motion-sensor","text":"","text_tokens":[],"title":"RoboMaster &amp;&amp; Motion Sensor","title_tokens":[" ","robomaster","sensor","amp","&",";","motion"]},{"location":"user_guide/gallery-bak/#gameshell","text":"","text_tokens":[],"title":"GameShell","title_tokens":["gameshell"]},{"location":"user_guide/gallery/","text":"演示视频（Gallery） ¶ 请点击 玩给你看","text_tokens":["视频","（"," ","¶","看","玩","演示","给","gallery","请","）","点击","你"],"title":"展示视频(gallery)","title_tokens":["视频","展示","(",")","gallery"]},{"location":"user_guide/gallery/#gallery","text":"请点击 玩给你看","text_tokens":[" ","看","玩","给","请","点击","你"],"title":"演示视频（Gallery）","title_tokens":["视频","（","演示","gallery","）"]},{"location":"user_guide/install/","text":"安装（install）","text_tokens":["（","安装","install","）"],"title":"Install","title_tokens":["install"]},{"location":"user_guide/settings/","text":"配置文件 ¶ CodeLab Adapter 允许用户的自定义配置。配置文件位于: ~/codelab_adapter/user_settings.py 。 支持使用环境变量覆盖这些配置项，诸如 AUTO_OPEN_WEBUI=false codelab-adapter 以下是一些常见配置项： ADAPTER_MODE ¶ 有三种模式： NORMAL, 普通用户模式，CodeLab Adapter 作为客户端程序，增强 Scratch，支持自定义插件……关注易用性与安全性。 DEV（开发）模式，关注灵活性，同时也带来安全风险。 NEVERLAND_HUB 模式， 用于Neverland 2.0 LONGAN_HUB 模式, 关注健壮性 KEEP_LAST_CLIENT ¶ 是否强行保留最后一个web client（webUI 或 Scratch） 默认是 False ALWAYS_KEEP_ADAPTER_RUNNING ¶ 当所有web client退出时， Adapter 软件是否也退出 默认是 False OPEN_MESSAGE_HUB ¶ 是否允许本地（localhost）之外的 Adapter Node 与 CodeLab Adapter 通信，默认是 OPEN_MESSAGE_HUB=False 。 将 OPEN_MESSAGE_HUB 设为 True 的一个典型用例是将树莓派作为消息中心，把硬件能力提供给移动端（iPad/mobile）使用。 USE_SSL ¶ 是否以 https 运行 Adapter Node 的 http/websocketss 服务。 默认 USE_SSL=True 。 将 USE_SSL 设为 False 的一个典型用例是 CodeLab Adapter 作为服务集成到 Electron 中。将 USE_SSL 设为 False 之后就不会存在证书过期问题（无需 https 证书）。 AUTO_OPEN_WEBUI ¶ 是否自动打开 Web UI 默认 AUTO_OPEN_WEBUI = True 。 如果你希望将 CodeLab Adapter 用作内部服务，可以将 AUTO_OPEN_WEBUI 设为 False。 PYTHON3_PATH ¶ 系统的 Python3 路径， 只在 lite 版本（linux）中可用，默认为 \"/usr/bin/python3\" , 你可以自行指定。 DEFAULT_ADAPTER_HOST ¶ 默认 DEFAULT_ADAPTER_HOST = \"codelab-adapter.codelab.club\" 如果你使用自己的 https 证书，可以替换为自己的域名。 OPEN_WEBSOCKET_API ¶ 默认 OPEN_WEBSOCKET_API = True OPEN_REST_API 用于打开/关闭 WEBSOCKET API。 OPEN_REST_API ¶ 默认 OPEN_REST_API = True OPEN_REST_API 用于打开/关闭 REST API 。 TOKEN ¶ 默认为 None ，软件每次启动都将随机生成 TOKEN。 取消注释 # TOKEN = \"<random string>\" ，则永久固定 TOKEN。 <random string> 在软件初次运行的时候在本地随机生成。 RC_EXTENSIONS ¶ 默认启动的 EXTENSIONS 默认为 [] RC_NODES ¶ 默认启动的 NODES 在mac下 RC_NODES 默认为: [\"node_status_bar.py\"] , 它是一个 menu bar 在windows/linux 下 RC_NODES默认为 [] USER_WHITELIST_HOSTNAME ¶ 白名单 只有加入白名单的域名才能与 Adapter 通信。 ZMQ_LOOP_TIME ¶ 决定消息收发的速度，由于Adapter本质上是个消息系统，所以 ZMQ_LOOP_TIME 直接影响Adapter的运行速度。 ZMQ_LOOP_TIME 默认值 0.02 （秒），ZMQ_LOOP_TIME 越小，Adapter 消息速度(EIM、Linda)越快。 相应的代价是 Adapter 会占用更多CPU。 OPEN_LINDA_REST_API ¶ 是否开启 Linda REST API 默认是开启(True)","text_tokens":["¶","消息","为","更","、","whitelist","默认值","cpu","开发","https","usr","多","环境变量","配置文件","关闭","树莓","webui","健壮性","取消","注释","易用性","默认","[","覆盖","http","rc","代价",":","这些","false","打开","系统","收发","到",",","普通","scratch","设","能力","加入","(","快","本质","随机","端","越","支持","可用","给","string","变量","_","不会","auto","健壮","会","所有","你","normal","eim","同时","内部","always","linux","zmq","典型","只","windows","hostname","模式","…","有","是","带来","直接","用例","的",".","客户端程序","配置","文件","名单","允许","keep","以下","python3","使用","证书","由于","codelab","自行","#",">","开启","是否","初次","在","以","settings","electron","秒","它","白名单","时","派","普通用户",")","lite","生成","rest"," ","/","（","host","use","bar","之后","nodes","user","最后","增强","mode","将","default","）","之外","path","none","风险","都","mobile","可以","指定","linda","py","longan","。","存在","<","集成","安全","dev","last","websocket","越小","硬件","三种","移动","与","运行","路径","安全性","通信","服务","保留","只有","所以","影响","当","自定义","一个","也","上","用于","下","用作","灵活","时候","作为","强行","本地","random","adapter","ipad","自动","则","希望","menu","-","一些","websocketss","过期","通用","web","或","替换","启动","灵活性","中心","软件","neverland","extensions","才能","\"","项","，","running","问题","time","自定","关注","定义","固定","诸如","常见","ssl","如果","~","中","bin","永久","速度","message","open","]","mac","退出","决定","true","把","版本","域名","：","自己","程序","环境","club","api","token","hub","0.02","活性","就","=","ui","环境变","个","易用","位于","相应","插件","loop","客户端","client","用户","localhost","node","无需","status","占用","提供","2.0","每次","客户"],"title":"配置文件(settings)","title_tokens":["settings","配置文件","(",")","配置","文件"]},{"location":"user_guide/settings/#_1","text":"CodeLab Adapter 允许用户的自定义配置。配置文件位于: ~/codelab_adapter/user_settings.py 。 支持使用环境变量覆盖这些配置项，诸如 AUTO_OPEN_WEBUI=false codelab-adapter 以下是一些常见配置项：","text_tokens":["自定","定义","py","。","诸如","常见","~","是","的",".","open","配置","文件","允许","配置文件","环境变量","以下","webui","：","使用","环境","codelab","覆盖","自定义","settings","=",":","这些","环境变","false","位于","adapter"," ","/","支持","-","用户","一些","user","变量","_","auto","项","，"],"title":"配置文件","title_tokens":["配置文件","配置","文件"]},{"location":"user_guide/settings/#adapter_mode","text":"有三种模式： NORMAL, 普通用户模式，CodeLab Adapter 作为客户端程序，增强 Scratch，支持自定义插件……关注易用性与安全性。 DEV（开发）模式，关注灵活性，同时也带来安全风险。 NEVERLAND_HUB 模式， 用于Neverland 2.0 LONGAN_HUB 模式, 关注健壮性","text_tokens":["自定","同时","关注","定义","longan","。","模式","…","有","带来","安全","dev","客户端程序","开发","三种","与","安全性","：","健壮性","程序","易用性","codelab","hub","自定义","活性","也","用于","灵活","普通用户","易用",",","普通","scratch","作为","adapter"," ","支持","客户端","插件","用户","（","通用","增强","灵活性","_","2.0","neverland","健壮","）","，","风险","normal","客户"],"title":"ADAPTER_MODE","title_tokens":["_","mode","adapter"]},{"location":"user_guide/settings/#keep_last_client","text":"是否强行保留最后一个web client（webUI 或 Scratch） 默认是 False","text_tokens":[" ","（","client","false","web","或","最后","webui","保留","scratch","是","强行","默认","）","一个","是否"],"title":"KEEP_LAST_CLIENT","title_tokens":["keep","last","client","_"]},{"location":"user_guide/settings/#always_keep_adapter_running","text":"当所有web client退出时， Adapter 软件是否也退出 默认是 False","text_tokens":[" ","是否","也","client","false","web","时","软件","是","默认","adapter","当","所有","，","退出"],"title":"ALWAYS_KEEP_ADAPTER_RUNNING","title_tokens":["always","keep","_","adapter","running"]},{"location":"user_guide/settings/#open_message_hub","text":"是否允许本地（localhost）之外的 Adapter Node 与 CodeLab Adapter 通信，默认是 OPEN_MESSAGE_HUB=False 。 将 OPEN_MESSAGE_HUB 设为 True 的一个典型用例是将树莓派作为消息中心，把硬件能力提供给移动端（iPad/mobile）使用。","text_tokens":["典型","消息","为","。","是","message","用例","open","的","硬件","true","允许","与","把","移动","通信","树莓","使用","默认","codelab","hub","一个","是否","=","false","派","设","能力","作为","本地","adapter","ipad","端","（"," ","localhost","node","/","给","提供","_","中心","将","）","之外","，","mobile"],"title":"OPEN_MESSAGE_HUB","title_tokens":["message","open","hub","_"]},{"location":"user_guide/settings/#use_ssl","text":"是否以 https 运行 Adapter Node 的 http/websocketss 服务。 默认 USE_SSL=True 。 将 USE_SSL 设为 False 的一个典型用例是 CodeLab Adapter 作为服务集成到 Electron 中。将 USE_SSL 设为 False 之后就不会存在证书过期问题（无需 https 证书）。","text_tokens":["典型","为","。","存在","ssl","集成","是","中","用例","的","https","运行","true","服务","证书","默认","codelab","一个","是否","http","以","就","=","electron","false","到","设","作为","adapter"," ","/","node","websocketss","过期","（","无需","use","之后","_","不会","将","）","问题"],"title":"USE_SSL","title_tokens":["ssl","_","use"]},{"location":"user_guide/settings/#auto_open_webui","text":"是否自动打开 Web UI 默认 AUTO_OPEN_WEBUI = True 。 如果你希望将 CodeLab Adapter 用作内部服务，可以将 AUTO_OPEN_WEBUI 设为 False。","text_tokens":["可以","内部","为","。","如果","open","true","服务","webui","默认","codelab","是否","=","ui","false","打开","用作","设","adapter","自动","希望"," ","web","，","_","auto","将","你"],"title":"AUTO_OPEN_WEBUI","title_tokens":["open","auto","webui","_"]},{"location":"user_guide/settings/#python3_path","text":"系统的 Python3 路径， 只在 lite 版本（linux）中可用，默认为 \"/usr/bin/python3\" , 你可以自行指定。","text_tokens":["可以","指定","linux","为","只","。","中","bin","的","你","usr","路径","版本","python3","默认","自行","在","系统",",","lite"," ","（","/","可用","）","\"","，"],"title":"PYTHON3_PATH","title_tokens":["path","_","python3"]},{"location":"user_guide/settings/#default_adapter_host","text":"默认 DEFAULT_ADAPTER_HOST = \"codelab-adapter.codelab.club\" 如果你使用自己的 https 证书，可以替换为自己的域名。","text_tokens":["可以","为","如果","。","的",".","https","域名","自己","club","使用","证书","默认","codelab","=","adapter"," ","-","host","，","替换","_","default","\"","你"],"title":"DEFAULT_ADAPTER_HOST","title_tokens":["host","default","adapter","_"]},{"location":"user_guide/settings/#open_websocket_api","text":"默认 OPEN_WEBSOCKET_API = True OPEN_REST_API 用于打开/关闭 WEBSOCKET API。","text_tokens":[" ","/","=","true","用于","打开","关闭","。","_","api","默认","open","websocket","rest"],"title":"OPEN_WEBSOCKET_API","title_tokens":["open","websocket","api","_"]},{"location":"user_guide/settings/#open_rest_api","text":"默认 OPEN_REST_API = True OPEN_REST_API 用于打开/关闭 REST API 。","text_tokens":[" ","/","=","true","用于","打开","关闭","。","_","api","默认","open","rest"],"title":"OPEN_REST_API","title_tokens":["open","api","rest","_"]},{"location":"user_guide/settings/#token","text":"默认为 None ，软件每次启动都将随机生成 TOKEN。 取消注释 # TOKEN = \"<random string>\" ，则永久固定 TOKEN。 <random string> 在软件初次运行的时候在本地随机生成。","text_tokens":["固定","为","。","<","永久","的","运行","取消","注释","默认","token","#",">","初次","在","=","时候","生成","random","本地","则","随机"," ","string","启动","软件","每次","none","将","\"","，","都"],"title":"TOKEN","title_tokens":["token"]},{"location":"user_guide/settings/#rc_extensions","text":"默认启动的 EXTENSIONS 默认为 []","text_tokens":[" ","为","启动","默认","extensions","[","的","]"],"title":"RC_EXTENSIONS","title_tokens":["rc","extensions","_"]},{"location":"user_guide/settings/#rc_nodes","text":"默认启动的 NODES 在mac下 RC_NODES 默认为: [\"node_status_bar.py\"] , 它是一个 menu bar 在windows/linux 下 RC_NODES默认为 []","text_tokens":["linux","py","为","windows","是",".","的","mac","]","默认","[","一个","在","rc",":","下","它",",","menu"," ","/","node","status","bar","nodes","启动","_","\""],"title":"RC_NODES","title_tokens":["nodes","rc","_"]},{"location":"user_guide/settings/#user_whitelist_hostname","text":"白名单 只有加入白名单的域名才能与 Adapter 通信。","text_tokens":["名单"," ","与","白名单","只有","域名","通信","。","加入","adapter","才能","的"],"title":"USER_WHITELIST_HOSTNAME","title_tokens":["whitelist","user","hostname","_"]},{"location":"user_guide/settings/#zmq_loop_time","text":"决定消息收发的速度，由于Adapter本质上是个消息系统，所以 ZMQ_LOOP_TIME 直接影响Adapter的运行速度。 ZMQ_LOOP_TIME 默认值 0.02 （秒），ZMQ_LOOP_TIME 越小，Adapter 消息速度(EIM、Linda)越快。 相应的代价是 Adapter 会占用更多CPU。","text_tokens":["eim","zmq","linda","消息","。","更","速度","、","是","默认值","直接","cpu","的","越小","多","决定","运行","所以","由于","影响","默认","0.02","上","代价","收发","系统","秒","个","(",")","快","相应","adapter","本质","越"," ","loop","（","，","占用","_","会","）","time"],"title":"ZMQ_LOOP_TIME","title_tokens":["loop","time","zmq","_"]},{"location":"user_guide/settings/#open_linda_rest_api","text":"是否开启 Linda REST API 默认是开启(True)","text_tokens":[" ","true","linda","(",")","是","api","默认","开启","rest","是否"],"title":"OPEN_LINDA_REST_API","title_tokens":["linda","_","api","open","rest"]},{"location":"user_guide/usage/","text":"使用说明（usage） ¶ 我们以内置的插件为例，来讲解如何使用 CodeLab Adapter。 如果你手头有 micro:bit，推荐阅读 micro:bit 的例子，其次建议阅读微信的例子；如果你空无一物，请阅读 EIM 的例子。 micro:bit ¶ 在 Codelab Scratch 3.0 中使用 micro:bit，基于 USB，支持 Mac、Windows（支持 Windows 7 及以上版本）、Ubuntu、Raspbian（树莓派）。 使用说明： micro:bit 。 微信插件 ¶ 首先确保你的微信能登陆 网页微信 （ps：有些微信账号不能登陆网页微信）。 使用说明： 微信插件 。 EIM ¶ 使用说明： EIM 。","text_tokens":["¶","eim","空无一物","windows","。","如果","、","有","中","有些","ps","建议","能","的","mac","网页","你","ubuntu","例子","登陆","及","版本","无一物","树莓","：","一物","raspbian","使用","codelab","推荐","usage","微信","以","在",":","；","7","派","其次","手头","来","请","scratch","确保","micro","adapter","usb","以上","账号","（"," ","我们","插件","3.0","bit","基于","讲解","支持","如何","说明","为例","阅读","内置","）","，","首先","不能"],"title":"使用说明（usage）","title_tokens":["（","usage","说明","使用","）"]},{"location":"user_guide/usage/#usage","text":"我们以内置的插件为例，来讲解如何使用 CodeLab Adapter。 如果你手头有 micro:bit，推荐阅读 micro:bit 的例子，其次建议阅读微信的例子；如果你空无一物，请阅读 EIM 的例子。","text_tokens":["eim","空无一物","。","如果","有","建议","的","例子","无一物","一物","使用","codelab","推荐","微信","以",":","；","其次","手头","来","请","micro","adapter","插件"," ","我们","bit","讲解","，","如何","为例","阅读","内置","你"],"title":"使用说明（usage）","title_tokens":["（","usage","说明","使用","）"]},{"location":"user_guide/usage/#microbit","text":"在 Codelab Scratch 3.0 中使用 micro:bit，基于 USB，支持 Mac、Windows（支持 Windows 7 及以上版本）、Ubuntu、Raspbian（树莓派）。 使用说明： micro:bit 。","text_tokens":["windows","。","、","中","mac","ubuntu","及","版本","树莓","：","raspbian","使用","codelab","在",":","7","派","scratch","micro","usb","以上"," ","支持","基于","（","3.0","bit","说明","）","，"],"title":"micro:bit","title_tokens":[":","bit","micro"]},{"location":"user_guide/usage/#_1","text":"首先确保你的微信能登陆 网页微信 （ps：有些微信账号不能登陆网页微信）。 使用说明： 微信插件 。","text_tokens":["。","有些","ps","能","的","网页","登陆","：","使用","微信","账号","确保"," ","（","插件","说明","）","你","首先","不能"],"title":"微信插件","title_tokens":["插件","微信"]},{"location":"user_guide/usage/#eim","text":"使用说明： EIM 。","text_tokens":[" ","eim","：","。","说明","使用"],"title":"EIM","title_tokens":["eim"]},{"location":"user_guide/与外部系统通信/","text":"与外部系统通信 ¶ 既可以使用以下的 REST api， 也可以使用 OSC (高速) 和 ZeroMQ（超高速） 外部系统 -> Adapter ¶ 接收外部的https请求， 消息最后流向 Scratch https://codelab-adapter.codelab.club:12358/api/message/eim?message=hello kano wand 和 calypso 都是案例 codelab_adapter_client ¶ Python对象的连接器：EIM 插件 Python client ¶ requests ¶ import requests requests . get ( \"https://codelab-adapter.codelab.club:12358/api/message/eim?message=hello\" , verify = False ) 也可以是呀post import requests requests . post ( \"https://codelab-adapter.codelab.club:12358/api/message/eim\" , json = { \"message\" : \"hello\" }, verify = False ) urllib.request ¶ import urllib.parse import urllib.request import ssl from socket import timeout message = urllib . parse . quote ( \"hello\" ) url = f 'https://codelab-adapter.codelab.club:12358/api/message/eim?message={message}' try : f = urllib . request . urlopen ( url , context = ssl . _create_unverified_context (), timeout = 1 ) except timeout : print ( \"message to adapter timeout\" ) JavaScript client ¶ fetch ¶ fetch ( \"https://codelab-adapter.codelab.club:12358/api/message/eim?message=hi\" ) XMLHttpRequest ¶ // 浏览器可能会提醒 CORS(跨域) 依然可用 var xhr = new XMLHttpRequest(); var url = \"https://codelab-adapter.codelab.club:12358/api/message/eim?message=hi\" xhr.open(\"GET\", url, true); xhr.send(); teachable machine插件 基于这个原理。 Adapter -> 外部系统 ¶ 由于 Adapter 允许自定义 Python 插件，所以根据外部系统接口自行实现即可。 也可采用 Python对象的连接器：EIM 插件","text_tokens":["¶","hello","消息","外部","json","https","calypso","teachable","requests",":","系统","false","(",",","scratch","javascript","f","基于","}","原理","可用","zeromq","_","会","浏览器","eim","采用","1","既","依然","即可","timeout","是","对象","的",".","cors","to","允许","以下","machine","使用","由于","codelab","自行","unverified",">","跨域","urlopen","连接器","呀","send","print","可",")","wand","var","rest","连接"," ","（","/","post","接器","最后","urllib","12358","try","python","）","提醒","都","可能","可以","osc","接口","高速","'","。","根据","fetch","quote","与","案例","通信","parse","from","xhr","所以","自定义","?","也",";","adapter","超高","-","import","get","create","\"","，","自定","socket","和","except","定义","new","ssl","request","流向","hi","message","请求","open","true","context","超高速","：","club","api","=","url","这个","verify","浏览","接收","{","插件","client","xmlhttprequest","实现","kano"],"title":"与外部系统通信","title_tokens":["与","外部","通信","系统"]},{"location":"user_guide/与外部系统通信/#_1","text":"既可以使用以下的 REST api， 也可以使用 OSC (高速) 和 ZeroMQ（超高速）","text_tokens":["可以","和","osc","既","高速","的","超高速","以下","使用","api","也","(",")","超高","rest"," ","（","zeromq","）","，"],"title":"与外部系统通信","title_tokens":["与","外部","通信","系统"]},{"location":"user_guide/与外部系统通信/#-adapter","text":"接收外部的https请求， 消息最后流向 Scratch https://codelab-adapter.codelab.club:12358/api/message/eim?message=hello kano wand 和 calypso 都是案例","text_tokens":["eim","和","hello","消息","流向","外部","是","message","请求",".","的","https","calypso","案例","club","api","codelab","?","=",":","scratch","wand","adapter","接收"," ","/","-","最后","12358","kano","，","都"],"title":"外部系统 -&gt; Adapter","title_tokens":[" ","-","系统","gt","外部","&",";","adapter"]},{"location":"user_guide/与外部系统通信/#codelab_adapter_client","text":"Python对象的连接器：EIM 插件","text_tokens":["eim"," ","插件","连接器","接器","：","python","对象","的","连接"],"title":"codelab_adapter_client","title_tokens":["adapter","client","codelab","_"]},{"location":"user_guide/与外部系统通信/#python-client","text":"","text_tokens":[],"title":"Python client","title_tokens":[" ","client","python"]},{"location":"user_guide/与外部系统通信/#requests","text":"import requests requests . get ( \"https://codelab-adapter.codelab.club:12358/api/message/eim?message=hello\" , verify = False ) 也可以是呀post import requests requests . post ( \"https://codelab-adapter.codelab.club:12358/api/message/eim\" , json = { \"message\" : \"hello\" }, verify = False )","text_tokens":["eim","可以","hello","是","message",".","json","https","club","api","codelab","?","requests","也","呀","=",":","false","(",",","verify",")","adapter","post"," ","/","-","{","}","import","get","12358","\""],"title":"requests","title_tokens":["requests"]},{"location":"user_guide/与外部系统通信/#urllibrequest","text":"import urllib.parse import urllib.request import ssl from socket import timeout message = urllib . parse . quote ( \"hello\" ) url = f 'https://codelab-adapter.codelab.club:12358/api/message/eim?message={message}' try : f = urllib . request . urlopen ( url , context = ssl . _create_unverified_context (), timeout = 1 ) except timeout : print ( \"message to adapter timeout\" )","text_tokens":["eim","socket","except","1","hello","'","timeout","ssl","request","message",".","quote","https","to","context","from","parse","club","api","codelab","unverified","?","urlopen","=",":","print","url","(",",",")","adapter","f"," ","/","-","{","}","import","create","urllib","12358","try","_","\""],"title":"urllib.request","title_tokens":["request",".","urllib"]},{"location":"user_guide/与外部系统通信/#javascript-client","text":"","text_tokens":[],"title":"JavaScript client","title_tokens":[" ","client","javascript"]},{"location":"user_guide/与外部系统通信/#fetch","text":"fetch ( \"https://codelab-adapter.codelab.club:12358/api/message/eim?message=hi\" )","text_tokens":["eim","hi","message","fetch",".","https","club","api","codelab","?","=",":","(",")","adapter"," ","/","-","12358","\""],"title":"fetch","title_tokens":["fetch"]},{"location":"user_guide/与外部系统通信/#xmlhttprequest","text":"// 浏览器可能会提醒 CORS(跨域) 依然可用 var xhr = new XMLHttpRequest(); var url = \"https://codelab-adapter.codelab.club:12358/api/message/eim?message=hi\" xhr.open(\"GET\", url, true); xhr.send(); teachable machine插件 基于这个原理。","text_tokens":["eim","依然","。","hi","message",".","open","cors","https","teachable","true","xhr","machine","club","api","codelab","跨域","?","=",":","send","url","这个","(",",",")","var",";","adapter","浏览"," ","/","-","xmlhttprequest","插件","可用","基于","原理","get","12358","会","\"","提醒","new","浏览器","可能"],"title":"XMLHttpRequest","title_tokens":["xmlhttprequest"]},{"location":"user_guide/与外部系统通信/#adapter-","text":"由于 Adapter 允许自定义 Python 插件，所以根据外部系统接口自行实现即可。 也可采用 Python对象的连接器：EIM 插件","text_tokens":["自定","eim","定义","采用","接口","即可","。","根据","外部","对象","的","允许","：","所以","由于","自行","自定义","也","连接器","系统","可","adapter","连接"," ","插件","接器","实现","python","，"],"title":"Adapter -&gt; 外部系统","title_tokens":[" ","-","gt","系统","外部","&",";","adapter"]},{"location":"user_guide/嵌入scratch/","text":"将 Scratch 项目嵌入网站 ¶ 服务于教学和内容设计，也可用于构建和发布 microworld（《Mindstorms》）。 开发者和教师可以利用 CodeLab Scratch，将 sb3 项目嵌入到自己的网站和课程中。 一些例子 ¶ Pong Starter ¶ Pong Starter < iframe src = \"https://scratch-beta.codelab.club/player.html?sb3url=https://adapter.codelab.club/sb3/Pong_Starter.sb3\" allowtransparency = \"true\" width = \"500\" height = \"450\" frameborder = \"0\" scrolling = \"no\" allowfullscreen ></ iframe > Dress Up Tera ¶ < iframe src = \"https://scratch-beta.codelab.club/player.html?sb3url=https://adapter.codelab.club/sb3/Dress_Up_Tera.sb3\" allowtransparency = \"true\" width = \"500\" height = \"450\" frameborder = \"0\" scrolling = \"no\" allowfullscreen ></ iframe > 交响乐 ¶ 交响乐 < iframe src = \"https://scratch-beta.codelab.club/player.html?sb3url=https://adapter.codelab.club/sb3/交响乐.sb3\" allowtransparency = \"true\" width = \"500\" height = \"450\" frameborder = \"0\" scrolling = \"no\" allowfullscreen ></ iframe > 如何将 sb3 文件保存到线上 ¶ 可以保存到任何服务器上（https），只要允许跨域资源共享（CORS），以下是 nginx 的配置： add_header Access-Control-Allow-Origin *; add_header Access-Control-Allow-Methods 'GET, OPTIONS'; 如果你没有自己的服务器, 可以将你的 sb3 文件提交到 CodeLab 的仓库里： codelab-adapter-docs ，我们将为你代为托管。 当然你也可以将其放在云存储上（诸如七牛云）。 参考 ¶ How to Embed a Project phosphorus phosphorus 3D Remix: Experimental render-ordering using clones Mario Land 2 - gb.sb2 3D Framework v0.48h +timings Alone in the depths Epic Ninja v1.12","text_tokens":["¶","提交","a","只要","参考","project","为","450","frameborder","ninja","tera","开发","https","allowtransparency","remix","header","in","clones","embed","托管",":","构建","设计","到",",","scratch","内容","nginx","player","methods","height","交响","phosphorus","如何","gb","_","《","no","scrolling","你","3d","*","于","h","是","timings","的",".","配置","文件","cors","to","允许","没有","mario","项目","以下","codelab","保存","render",">","跨域","服务器","教师","epic","里","可","experimental","课程","options"," ","（","src","/","我们","放在","sb3","sb2","将","）","html","可以","allow","'","。","<","资源","mindstorms","starter","服务","add","beta","ordering","存储","?","也","嵌入","上","access","用于","dress","仓库","sb3url","allowfullscreen",";","adapter","iframe","land","当然","-","一些","到线","资源共享","v0.48","2","务器","get","0","开发者","the","\"","，","和","width","共享","how","+","教学","任何","如果","诸如","control","七牛云","microworld","中","500","alone","代为","framework","其","例子","true","depths","up","利用","自己","：","pong","club","发布","云","=","v1.12","交响乐","网站","》","using","docs","origin"],"title":"将 Scratch 项目嵌入网站","title_tokens":[" ","嵌入","项目","scratch","将","网站"]},{"location":"user_guide/嵌入scratch/#scratch","text":"服务于教学和内容设计，也可用于构建和发布 microworld（《Mindstorms》）。 开发者和教师可以利用 CodeLab Scratch，将 sb3 项目嵌入到自己的网站和课程中。","text_tokens":["可以","和","教学","于","。","microworld","中","的","开发","mindstorms","服务","利用","项目","自己","codelab","发布","也","嵌入","教师","用于","可","构建","设计","到","scratch","课程","内容","网站"," ","（","》","sb3","开发者","将","）","《","，"],"title":"将 Scratch 项目嵌入网站","title_tokens":[" ","嵌入","项目","scratch","将","网站"]},{"location":"user_guide/嵌入scratch/#_1","text":"","text_tokens":[],"title":"一些例子","title_tokens":["一些","例子"]},{"location":"user_guide/嵌入scratch/#pong-starter","text":"Pong Starter < iframe src = \"https://scratch-beta.codelab.club/player.html?sb3url=https://adapter.codelab.club/sb3/Pong_Starter.sb3\" allowtransparency = \"true\" width = \"500\" height = \"450\" frameborder = \"0\" scrolling = \"no\" allowfullscreen ></ iframe >","text_tokens":["width","<","450","frameborder","500",".","https","allowtransparency","starter","true","pong","club","beta","codelab",">","?","=",":","sb3url","scratch","allowfullscreen","adapter","iframe"," ","src","/","-","player","height","sb3","\"","0","_","html","no","scrolling"],"title":"Pong Starter","title_tokens":[" ","pong","starter"]},{"location":"user_guide/嵌入scratch/#dress-up-tera","text":"< iframe src = \"https://scratch-beta.codelab.club/player.html?sb3url=https://adapter.codelab.club/sb3/Dress_Up_Tera.sb3\" allowtransparency = \"true\" width = \"500\" height = \"450\" frameborder = \"0\" scrolling = \"no\" allowfullscreen ></ iframe >","text_tokens":["width","<","450","frameborder","500",".","tera","https","allowtransparency","true","up","club","beta","codelab",">","?","=",":","dress","sb3url","scratch","allowfullscreen","adapter","iframe"," ","src","/","-","player","height","sb3","\"","0","_","html","no","scrolling"],"title":"Dress Up Tera","title_tokens":[" ","up","tera","dress"]},{"location":"user_guide/嵌入scratch/#_2","text":"交响乐 < iframe src = \"https://scratch-beta.codelab.club/player.html?sb3url=https://adapter.codelab.club/sb3/交响乐.sb3\" allowtransparency = \"true\" width = \"500\" height = \"450\" frameborder = \"0\" scrolling = \"no\" allowfullscreen ></ iframe >","text_tokens":["width","<","450","frameborder","500",".","https","allowtransparency","true","club","beta","codelab",">","?","=",":","sb3url","交响乐","scratch","allowfullscreen","adapter","iframe"," ","src","/","-","player","height","sb3","\"","交响","0","html","no","scrolling"],"title":"交响乐","title_tokens":["交响","交响乐"]},{"location":"user_guide/嵌入scratch/#sb3","text":"可以保存到任何服务器上（https），只要允许跨域资源共享（CORS），以下是 nginx 的配置： add_header Access-Control-Allow-Origin *; add_header Access-Control-Allow-Methods 'GET, OPTIONS'; 如果你没有自己的服务器, 可以将你的 sb3 文件提交到 CodeLab 的仓库里： codelab-adapter-docs ，我们将为你代为托管。 当然你也可以将其放在云存储上（诸如七牛云）。","text_tokens":["可以","提交","共享","allow","只要","*","任何","为","'","如果","。","control","诸如","是","七牛云","的","代为","配置","cors","https","资源","你","文件","其","允许","没有","服务","以下","：","add","自己","codelab","保存","header","存储","跨域","云","上","也","服务器","access","仓库","托管","里","到",",",";","adapter","options","当然","（"," ","资源共享","nginx","-","methods","sb3","我们","放在","务器","get","_","docs","将","）","origin","，"],"title":"如何将 sb3 文件保存到线上","title_tokens":[" ","上","到线","sb3","如何","将","保存","文件"]},{"location":"user_guide/嵌入scratch/#_3","text":"How to Embed a Project phosphorus phosphorus 3D Remix: Experimental render-ordering using clones Mario Land 2 - gb.sb2 3D Framework v0.48h +timings Alone in the depths Epic Ninja v1.12","text_tokens":["how","a","+","project","h","ninja","timings","alone",".","framework","remix","to","depths","mario","ordering","render","in","clones","embed",":","epic","v1.12","experimental","land"," ","-","v0.48","2","sb2","phosphorus","using","gb","the","3d"],"title":"参考","title_tokens":["参考"]},{"location":"utils/dependence/","text":"安装 CodeLab Adapter 安装 Chrome 浏览器 目前 Scratch 官方团队在陆续支持更多浏览器版本，现阶段使用 Firefox/Chrome 浏览器效果最佳. 建议将其设为默认浏览器.","text_tokens":["团队","现阶段","为","更","效果","建议","chrome",".","官方","多","安装","其设","目前","版本","使用","默认","codelab","最佳","在","阶段","scratch","adapter","浏览","陆续"," ","支持","/","将","firefox","，","浏览器"],"title":"Dependence","title_tokens":["dependence"]},{"location":"utils/install_python/","text":"建议通过搜索引擎，学习如何安装 Python3( >=3.6 ). 或者参考 python.org Python 3 Installation & Setup Guide","text_tokens":["参考","或者","3","&","建议","通过",".","引擎","安装","setup","python3","guide",">","学习","=","搜索","(",")","搜索引擎"," ","org","3.6","installation","如何","python","，","索引"],"title":"Install python","title_tokens":[" ","install","python"]},{"location":"utils/manual_comment/","text":"","text_tokens":[],"title":"Manual comment","title_tokens":["manual"," ","comment"]},{"location":"utils/neverland_require/","text":"依赖 需要身处CodeLab Neverland空间里 。","text_tokens":[" ","依赖","里","。","neverland","codelab","空间","需要","身处"],"title":"Neverland require","title_tokens":[" ","neverland","require"]},{"location":"utils/open_adapter/","text":"双击打开 Codelab Adapter。 Codelab Adapter 启动之后，将打开默认浏览器。","text_tokens":[" ","浏览","打开","之后","启动","双击","。","默认","codelab","adapter","将","，","浏览器"],"title":"Open adapter","title_tokens":[" ","open","adapter"]},{"location":"utils/open_scratch/","text":"点击 Web UI 上的 scratch3 链接, 或者点击 这儿 , 将打开如下页面: 图中箭头所指的小圆点呈现绿色 说明 Codelab Adapter 与 Scratch3.0 的连接正常。","text_tokens":["这儿","或者","。","正常","页面","的","呈现","与","scratch3.0","如下","codelab","链接","上","ui",":","打开","图中",",","圆点","adapter","绿色","连接"," ","箭头","小圆点","web","所指","说明","scratch3","将","点击"],"title":"Open scratch","title_tokens":[" ","scratch","open"]},{"location":"utils/update/","text":"如果你之前使用过旧版本的软件，更新到新版本后，建议也更新一下插件目录( ~/codelab_adapter/extensions/ ) 提醒 也可以直接删除 ~/codelab_adapter/ 目录来更新, 请确保此时Adapter已经退出，否则你将遇到 token error 问题，此时需要在任务管理器里关闭Adapter。 旧的插件会被备份到同级目录(如 extensions_1540437691 )。","text_tokens":["过","可以","备份","更新","如","否则","旧版本","如果","。","旧","~","建议","直接","的","1540437691","退出","你","管理器","遇到","版本","error","关闭","被","旧版","删除","使用","token","codelab","后","理器","一下","也","在","目录","新","此时","里","之前","到","(",")","来",",","请","确保","adapter","需要","同级","插件"," ","/","已经","_","软件","管理","会","extensions","将","提醒","，","任务","问题"],"title":"Update","title_tokens":["update"]},{"location":"utils/upload_sb3/","text":"","text_tokens":[],"title":"Upload sb3","title_tokens":[" ","sb3","upload"]}]}